       """
       Interface for an output.
    1: """
    1: from __future__ import unicode_literals
    1: from abc import ABCMeta, abstractmethod
    1: from six import with_metaclass
    1: from prompt_toolkit.layout.screen import Size
       
       __all__ = [
    1:     'Output',
    1:     'DummyOutput',
       ]
       
       
    2: class Output(with_metaclass(ABCMeta, object)):
           """
           Base class defining the output interface for a
           :class:`~prompt_toolkit.renderer.Renderer`.
       
           Actual implementations are
           :class:`~prompt_toolkit.terminal.vt100_output.Vt100_Output` and
           :class:`~prompt_toolkit.terminal.win32_output.Win32Output`.
    1:     """
    1:     @abstractmethod
           def fileno(self):
               " Return the file descriptor to which we can write for the output. "
       
    1:     @abstractmethod
           def encoding(self):
               """
               Return the encoding for this output, e.g. 'utf-8'.
               (This is used mainly to know which characters are supported by the
               output the data, so that the UI can provide alternatives, when
               required.)
               """
       
    1:     @abstractmethod
           def write(self, data):
               " Write text (Terminal escape sequences will be removed/escaped.) "
       
    1:     @abstractmethod
           def write_raw(self, data):
               " Write text. "
       
    1:     @abstractmethod
           def set_title(self, title):
               " Set terminal title. "
       
    1:     @abstractmethod
           def clear_title(self):
               " Clear title again. (or restore previous title.) "
       
    1:     @abstractmethod
           def flush(self):
               " Write to output stream and flush. "
       
    1:     @abstractmethod
           def erase_screen(self):
               """
               Erases the screen with the background colour and moves the cursor to
               home.
               """
       
    1:     @abstractmethod
           def enter_alternate_screen(self):
               " Go to the alternate screen buffer. (For full screen applications). "
       
    1:     @abstractmethod
           def quit_alternate_screen(self):
               " Leave the alternate screen buffer. "
       
    1:     @abstractmethod
           def enable_mouse_support(self):
               " Enable mouse. "
       
    1:     @abstractmethod
           def disable_mouse_support(self):
               " Disable mouse. "
       
    1:     @abstractmethod
           def erase_end_of_line(self):
               """
               Erases from the current cursor position to the end of the current line.
               """
       
    1:     @abstractmethod
           def erase_down(self):
               """
               Erases the screen from the current line down to the bottom of the
               screen.
               """
       
    1:     @abstractmethod
           def reset_attributes(self):
               " Reset color and styling attributes. "
       
    1:     @abstractmethod
           def set_attributes(self, attrs, color_depth):
               " Set new color and styling attributes. "
       
    1:     @abstractmethod
           def disable_autowrap(self):
               " Disable auto line wrapping. "
       
    1:     @abstractmethod
           def enable_autowrap(self):
               " Enable auto line wrapping. "
       
    1:     @abstractmethod
    1:     def cursor_goto(self, row=0, column=0):
               " Move cursor position. "
       
    1:     @abstractmethod
           def cursor_up(self, amount):
               " Move cursor `amount` place up. "
       
    1:     @abstractmethod
           def cursor_down(self, amount):
               " Move cursor `amount` place down. "
       
    1:     @abstractmethod
           def cursor_forward(self, amount):
               " Move cursor `amount` place forward. "
       
    1:     @abstractmethod
           def cursor_backward(self, amount):
               " Move cursor `amount` place backward. "
       
    1:     @abstractmethod
           def hide_cursor(self):
               " Hide cursor. "
       
    1:     @abstractmethod
           def show_cursor(self):
               " Show cursor. "
       
    1:     def ask_for_cpr(self):
               """
               Asks for a cursor position report (CPR).
               (VT100 only.)
               """
       
    1:     def bell(self):
               " Sound bell. "
       
    1:     def enable_bracketed_paste(self):
               " For vt100 only. "
       
    1:     def disable_bracketed_paste(self):
               " For vt100 only. "
       
    1:     def scroll_buffer_to_prompt(self):
               " For Win32 only. "
       
       
    2: class DummyOutput(Output):
           """
           For testing. An output class that doesn't render anything.
    1:     """
    1:     def fileno(self):
               " There is no sensible default for fileno(). "
               raise NotImplementedError
       
    1:     def encoding(self):
               return 'utf-8'
       
    1:     def write(self, data): pass
    1:     def write_raw(self, data): pass
    1:     def set_title(self, title): pass
    1:     def clear_title(self): pass
    1:     def flush(self): pass
    1:     def erase_screen(self): pass
    1:     def enter_alternate_screen(self): pass
    1:     def quit_alternate_screen(self): pass
    1:     def enable_mouse_support(self): pass
    1:     def disable_mouse_support(self): pass
    1:     def erase_end_of_line(self): pass
    1:     def erase_down(self): pass
    1:     def reset_attributes(self): pass
    1:     def set_attributes(self, attrs, color_depth): pass
    1:     def disable_autowrap(self): pass
    1:     def enable_autowrap(self): pass
    1:     def cursor_goto(self, row=0, column=0): pass
    1:     def cursor_up(self, amount): pass
    1:     def cursor_down(self, amount): pass
    1:     def cursor_forward(self, amount): pass
    1:     def cursor_backward(self, amount): pass
    1:     def hide_cursor(self): pass
    1:     def show_cursor(self): pass
    1:     def ask_for_cpr(self): pass
    1:     def bell(self): pass
    1:     def enable_bracketed_paste(self): pass
    1:     def disable_bracketed_paste(self): pass
    1:     def scroll_buffer_to_prompt(self): pass
       
    1:     def get_size(self):
               return Size(rows=40, columns=80)
       
    1:     def get_rows_below_cursor_position(self):
               return 40
