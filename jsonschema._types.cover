    1: import numbers
       
    1: from pyrsistent import pmap
    1: import attr
       
    1: from jsonschema.compat import int_types, str_types
    1: from jsonschema.exceptions import UndefinedTypeCheck
       
       
    1: def is_array(checker, instance):
           return isinstance(instance, list)
       
       
    1: def is_bool(checker, instance):
           return isinstance(instance, bool)
       
       
    1: def is_integer(checker, instance):
           # bool inherits from int, so ensure bools aren't reported as ints
           if isinstance(instance, bool):
               return False
           return isinstance(instance, int_types)
       
       
    1: def is_null(checker, instance):
           return instance is None
       
       
    1: def is_number(checker, instance):
           # bool inherits from int, so ensure bools aren't reported as ints
           if isinstance(instance, bool):
               return False
           return isinstance(instance, numbers.Number)
       
       
    1: def is_object(checker, instance):
           return isinstance(instance, dict)
       
       
    1: def is_string(checker, instance):
           return isinstance(instance, str_types)
       
       
    1: def is_any(checker, instance):
           return True
       
       
    2: @attr.s(frozen=True)
    1: class TypeChecker(object):
           """
           A ``type`` property checker.
       
           A `TypeChecker` performs type checking for an `IValidator`. Type
           checks to perform are updated using `TypeChecker.redefine` or
           `TypeChecker.redefine_many` and removed via `TypeChecker.remove`.
           Each of these return a new `TypeChecker` object.
       
           Arguments:
       
               type_checkers (dict):
       
                   The initial mapping of types to their checking functions.
    1:     """
    1:     _type_checkers = attr.ib(default=pmap(), converter=pmap)
       
    1:     def is_type(self, instance, type):
               """
               Check if the instance is of the appropriate type.
       
               Arguments:
       
                   instance (object):
       
                       The instance to check
       
                   type (str):
       
                       The name of the type that is expected.
       
               Returns:
       
                   bool: Whether it conformed.
       
       
               Raises:
       
                   `jsonschema.exceptions.UndefinedTypeCheck`:
                       if type is unknown to this object.
               """
               try:
                   fn = self._type_checkers[type]
               except KeyError:
                   raise UndefinedTypeCheck(type)
       
               return fn(self, instance)
       
    1:     def redefine(self, type, fn):
               """
               Produce a new checker with the given type redefined.
       
               Arguments:
       
                   type (str):
       
                       The name of the type to check.
       
                   fn (callable):
       
                       A function taking exactly two parameters - the type
                       checker calling the function and the instance to check.
                       The function should return true if instance is of this
                       type and false otherwise.
       
               Returns:
       
                   A new `TypeChecker` instance.
               """
    1:         return self.redefine_many({type: fn})
       
    1:     def redefine_many(self, definitions=()):
               """
               Produce a new checker with the given types redefined.
       
               Arguments:
       
                   definitions (dict):
       
                       A dictionary mapping types to their checking functions.
       
               Returns:
       
                   A new `TypeChecker` instance.
               """
    1:         return attr.evolve(
    1:             self, type_checkers=self._type_checkers.update(definitions),
               )
       
    1:     def remove(self, *types):
               """
               Produce a new checker with the given types forgotten.
       
               Arguments:
       
                   types (~collections.Iterable):
       
                       the names of the types to remove.
       
               Returns:
       
                   A new `TypeChecker` instance
       
               Raises:
       
                   `jsonschema.exceptions.UndefinedTypeCheck`:
       
                       if any given type is unknown to this object
               """
       
    1:         checkers = self._type_checkers
    2:         for each in types:
    1:             try:
    1:                 checkers = checkers.remove(each)
                   except KeyError:
                       raise UndefinedTypeCheck(each)
    1:         return attr.evolve(self, type_checkers=checkers)
       
       
    1: draft3_type_checker = TypeChecker(
           {
    1:         u"any": is_any,
    1:         u"array": is_array,
    1:         u"boolean": is_bool,
    1:         u"integer": is_integer,
    1:         u"object": is_object,
    1:         u"null": is_null,
    1:         u"number": is_number,
    1:         u"string": is_string,
           },
       )
    1: draft4_type_checker = draft3_type_checker.remove(u"any")
    1: draft6_type_checker = draft4_type_checker.redefine(
    1:     u"integer",
    1:     lambda checker, instance: (
               is_integer(checker, instance) or
               isinstance(instance, float) and instance.is_integer()
           ),
       )
    1: draft7_type_checker = draft6_type_checker
