    1: """Read and write notebooks in JSON format."""
       
       # Copyright (c) IPython Development Team.
       # Distributed under the terms of the Modified BSD License.
       
    1: import copy
    1: import json
       
    1: from .nbbase import from_dict
    1: from .rwbase import (
           NotebookReader, NotebookWriter, restore_bytes, rejoin_lines, split_lines,
           strip_transient,
       )
       
    1: from ipython_genutils import py3compat
       
       
    2: class BytesEncoder(json.JSONEncoder):
    1:     """A JSON encoder that accepts b64 (and other *ascii*) bytestrings."""
    1:     def default(self, obj):
               if isinstance(obj, bytes):
                   return obj.decode('ascii')
               return json.JSONEncoder.default(self, obj)
       
       
    2: class JSONReader(NotebookReader):
       
    1:     def reads(self, s, **kwargs):
               nb = json.loads(s, **kwargs)
               nb = self.to_notebook(nb, **kwargs)
               nb = strip_transient(nb)
               return nb
       
    1:     def to_notebook(self, d, **kwargs):
               return rejoin_lines(from_dict(d))
       
       
    2: class JSONWriter(NotebookWriter):
       
    1:     def writes(self, nb, **kwargs):
               kwargs['cls'] = BytesEncoder
               kwargs['indent'] = 1
               kwargs['sort_keys'] = True
               kwargs['separators'] = (',',': ')
               nb = copy.deepcopy(nb)
               nb = strip_transient(nb)
               if kwargs.pop('split_lines', True):
                   nb = split_lines(nb)
               return py3compat.str_to_unicode(json.dumps(nb, **kwargs), 'utf-8')
           
       
    1: _reader = JSONReader()
    1: _writer = JSONWriter()
       
    1: reads = _reader.reads
    1: read = _reader.read
    1: to_notebook = _reader.to_notebook
    1: write = _writer.write
    1: writes = _writer.writes
       
