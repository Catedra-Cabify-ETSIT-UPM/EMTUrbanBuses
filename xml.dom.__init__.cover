       """W3C Document Object Model implementation for Python.
       
       The Python mapping of the Document Object Model is documented in the
       Python Library Reference in the section on the xml.dom package.
       
       This package contains the following modules:
       
       minidom -- A simple implementation of the Level 1 DOM with namespace
                  support added (based on the Level 2 specification) and other
                  minor Level 2 functionality.
       
       pulldom -- DOM builder supporting on-demand tree-building for selected
                  subtrees of the document.
       
    1: """
       
       
    2: class Node:
    1:     """Class giving the NodeType constants."""
    1:     __slots__ = ()
       
           # DOM implementations may use this as a base class for their own
           # Node implementations.  If they don't, the constants defined here
           # should still be used as the canonical definitions as they match
           # the values given in the W3C recommendation.  Client code can
           # safely refer to these values in all tests of Node.nodeType
           # values.
       
    1:     ELEMENT_NODE                = 1
    1:     ATTRIBUTE_NODE              = 2
    1:     TEXT_NODE                   = 3
    1:     CDATA_SECTION_NODE          = 4
    1:     ENTITY_REFERENCE_NODE       = 5
    1:     ENTITY_NODE                 = 6
    1:     PROCESSING_INSTRUCTION_NODE = 7
    1:     COMMENT_NODE                = 8
    1:     DOCUMENT_NODE               = 9
    1:     DOCUMENT_TYPE_NODE          = 10
    1:     DOCUMENT_FRAGMENT_NODE      = 11
    1:     NOTATION_NODE               = 12
       
       
       #ExceptionCode
    1: INDEX_SIZE_ERR                 = 1
    1: DOMSTRING_SIZE_ERR             = 2
    1: HIERARCHY_REQUEST_ERR          = 3
    1: WRONG_DOCUMENT_ERR             = 4
    1: INVALID_CHARACTER_ERR          = 5
    1: NO_DATA_ALLOWED_ERR            = 6
    1: NO_MODIFICATION_ALLOWED_ERR    = 7
    1: NOT_FOUND_ERR                  = 8
    1: NOT_SUPPORTED_ERR              = 9
    1: INUSE_ATTRIBUTE_ERR            = 10
    1: INVALID_STATE_ERR              = 11
    1: SYNTAX_ERR                     = 12
    1: INVALID_MODIFICATION_ERR       = 13
    1: NAMESPACE_ERR                  = 14
    1: INVALID_ACCESS_ERR             = 15
    1: VALIDATION_ERR                 = 16
       
       
    2: class DOMException(Exception):
           """Abstract base class for DOM exceptions.
    1:     Exceptions with specific codes are specializations of this class."""
       
    1:     def __init__(self, *args, **kw):
               if self.__class__ is DOMException:
                   raise RuntimeError(
                       "DOMException should not be instantiated directly")
               Exception.__init__(self, *args, **kw)
       
    1:     def _get_code(self):
               return self.code
       
       
    2: class IndexSizeErr(DOMException):
    1:     code = INDEX_SIZE_ERR
       
    2: class DomstringSizeErr(DOMException):
    1:     code = DOMSTRING_SIZE_ERR
       
    2: class HierarchyRequestErr(DOMException):
    1:     code = HIERARCHY_REQUEST_ERR
       
    2: class WrongDocumentErr(DOMException):
    1:     code = WRONG_DOCUMENT_ERR
       
    2: class InvalidCharacterErr(DOMException):
    1:     code = INVALID_CHARACTER_ERR
       
    2: class NoDataAllowedErr(DOMException):
    1:     code = NO_DATA_ALLOWED_ERR
       
    2: class NoModificationAllowedErr(DOMException):
    1:     code = NO_MODIFICATION_ALLOWED_ERR
       
    2: class NotFoundErr(DOMException):
    1:     code = NOT_FOUND_ERR
       
    2: class NotSupportedErr(DOMException):
    1:     code = NOT_SUPPORTED_ERR
       
    2: class InuseAttributeErr(DOMException):
    1:     code = INUSE_ATTRIBUTE_ERR
       
    2: class InvalidStateErr(DOMException):
    1:     code = INVALID_STATE_ERR
       
    2: class SyntaxErr(DOMException):
    1:     code = SYNTAX_ERR
       
    2: class InvalidModificationErr(DOMException):
    1:     code = INVALID_MODIFICATION_ERR
       
    2: class NamespaceErr(DOMException):
    1:     code = NAMESPACE_ERR
       
    2: class InvalidAccessErr(DOMException):
    1:     code = INVALID_ACCESS_ERR
       
    2: class ValidationErr(DOMException):
    1:     code = VALIDATION_ERR
       
    2: class UserDataHandler:
    1:     """Class giving the operation constants for UserDataHandler.handle()."""
       
           # Based on DOM Level 3 (WD 9 April 2002)
       
    1:     NODE_CLONED   = 1
    1:     NODE_IMPORTED = 2
    1:     NODE_DELETED  = 3
    1:     NODE_RENAMED  = 4
       
    1: XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace"
    1: XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/"
    1: XHTML_NAMESPACE = "http://www.w3.org/1999/xhtml"
    1: EMPTY_NAMESPACE = None
    1: EMPTY_PREFIX = None
       
    1: from .domreg import getDOMImplementation, registerDOMImplementation
