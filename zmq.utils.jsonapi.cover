       """Priority based json library imports.
       
       Always serializes to bytes instead of unicode for zeromq compatibility
       on Python 2 and 3.
       
       Use ``jsonapi.loads()`` and ``jsonapi.dumps()`` for guaranteed symmetry.
       
       Priority: ``simplejson`` > ``jsonlib2`` > stdlib ``json``
       
       ``jsonapi.loads/dumps`` provide kwarg-compatibility with stdlib json.
       
       ``jsonapi.jsonmod`` will be the module of the actual underlying implementation.
    1: """
       
       # Copyright (C) PyZMQ Developers
       # Distributed under the terms of the Modified BSD License.
       
    1: from zmq.utils.strtypes import bytes, unicode
       
    1: jsonmod = None
       
    1: priority = ['simplejson', 'jsonlib2', 'json']
    3: for mod in priority:
    3:     try:
    3:         jsonmod = __import__(mod)
    2:     except ImportError:
    2:         pass
           else:
    1:         break
       
    1: def dumps(o, **kwargs):
           """Serialize object to JSON bytes (utf-8).
           
           See jsonapi.jsonmod.dumps for details on kwargs.
           """
           
           if 'separators' not in kwargs:
               kwargs['separators'] = (',', ':')
           
           s = jsonmod.dumps(o, **kwargs)
           
           if isinstance(s, unicode):
               s = s.encode('utf8')
           
           return s
       
    1: def loads(s, **kwargs):
           """Load object from JSON bytes (utf-8).
           
           See jsonapi.jsonmod.loads for details on kwargs.
           """
           
           if str is unicode and isinstance(s, bytes):
               s = s.decode('utf8')
           
           return jsonmod.loads(s, **kwargs)
       
    1: __all__ = ['jsonmod', 'dumps', 'loads']
       
