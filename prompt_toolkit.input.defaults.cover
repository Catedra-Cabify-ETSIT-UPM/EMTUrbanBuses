    1: from __future__ import unicode_literals
    1: from prompt_toolkit.application.current import get_app
    1: from prompt_toolkit.eventloop.context import TaskLocal, TaskLocalNotSetError
    1: from prompt_toolkit.utils import is_windows
    1: from .base import Input
    1: import sys
       
       __all__ = [
    1:     'create_input',
    1:     'create_pipe_input',
    1:     'get_default_input',
    1:     'set_default_input',
       ]
       
       
    1: def create_input(stdin=None):
           stdin = stdin or sys.stdin
       
           if is_windows():
               from .win32 import Win32Input
               return Win32Input(stdin)
           else:
               from .vt100 import Vt100Input
               return Vt100Input(stdin)
       
       
    1: def create_pipe_input():
           """
           Create an input pipe.
           This is mostly useful for unit testing.
           """
           if is_windows():
               from .win32_pipe import Win32PipeInput
               return Win32PipeInput()
           else:
               from .posix_pipe import PosixPipeInput
               return PosixPipeInput()
       
       
    1: _default_input = TaskLocal()
       
       
    1: def get_default_input():
           """
           Get the input class to be used by default.
       
           Called when creating a new Application(), when no `Input` has been passed.
           """
           # Other create/return the default input.
           try:
               value = _default_input.get()
           except TaskLocalNotSetError:
               # If an application is already running, take the input from there.
               # (This is important for the "ENTER for continue" prompts after
               # executing system commands and displaying readline-style completions.)
               app = get_app(return_none=True)
               if app:
                   return app.input
       
               return create_input()
           else:
               return value
       
       
    1: def set_default_input(input):
           """
           Set the default `Input` class.
       
           (Used for instance, for the telnet submodule.)
           """
           assert isinstance(input, Input)
           _default_input.set(input)
