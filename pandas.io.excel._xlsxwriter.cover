    1: import pandas._libs.json as json
       
    1: from pandas.io.excel._base import ExcelWriter
    1: from pandas.io.excel._util import _validate_freeze_panes
       
       
    2: class _XlsxStyler:
           # Map from openpyxl-oriented styles to flatter xlsxwriter representation
           # Ordering necessary for both determinism and because some are keyed by
           # prefixes of others.
           STYLE_MAPPING = {
               "font": [
    1:             (("name",), "font_name"),
    1:             (("sz",), "font_size"),
    1:             (("size",), "font_size"),
    1:             (("color", "rgb"), "font_color"),
    1:             (("color",), "font_color"),
    1:             (("b",), "bold"),
    1:             (("bold",), "bold"),
    1:             (("i",), "italic"),
    1:             (("italic",), "italic"),
    1:             (("u",), "underline"),
    1:             (("underline",), "underline"),
    1:             (("strike",), "font_strikeout"),
    1:             (("vertAlign",), "font_script"),
    1:             (("vertalign",), "font_script"),
               ],
    1:         "number_format": [(("format_code",), "num_format"), ((), "num_format")],
    1:         "protection": [(("locked",), "locked"), (("hidden",), "hidden")],
               "alignment": [
    1:             (("horizontal",), "align"),
    1:             (("vertical",), "valign"),
    1:             (("text_rotation",), "rotation"),
    1:             (("wrap_text",), "text_wrap"),
    1:             (("indent",), "indent"),
    1:             (("shrink_to_fit",), "shrink"),
               ],
               "fill": [
    1:             (("patternType",), "pattern"),
    1:             (("patterntype",), "pattern"),
    1:             (("fill_type",), "pattern"),
    1:             (("start_color", "rgb"), "fg_color"),
    1:             (("fgColor", "rgb"), "fg_color"),
    1:             (("fgcolor", "rgb"), "fg_color"),
    1:             (("start_color",), "fg_color"),
    1:             (("fgColor",), "fg_color"),
    1:             (("fgcolor",), "fg_color"),
    1:             (("end_color", "rgb"), "bg_color"),
    1:             (("bgColor", "rgb"), "bg_color"),
    1:             (("bgcolor", "rgb"), "bg_color"),
    1:             (("end_color",), "bg_color"),
    1:             (("bgColor",), "bg_color"),
    1:             (("bgcolor",), "bg_color"),
               ],
               "border": [
    1:             (("color", "rgb"), "border_color"),
    1:             (("color",), "border_color"),
    1:             (("style",), "border"),
    1:             (("top", "color", "rgb"), "top_color"),
    1:             (("top", "color"), "top_color"),
    1:             (("top", "style"), "top"),
    1:             (("top",), "top"),
    1:             (("right", "color", "rgb"), "right_color"),
    1:             (("right", "color"), "right_color"),
    1:             (("right", "style"), "right"),
    1:             (("right",), "right"),
    1:             (("bottom", "color", "rgb"), "bottom_color"),
    1:             (("bottom", "color"), "bottom_color"),
    1:             (("bottom", "style"), "bottom"),
    1:             (("bottom",), "bottom"),
    1:             (("left", "color", "rgb"), "left_color"),
    1:             (("left", "color"), "left_color"),
    1:             (("left", "style"), "left"),
    1:             (("left",), "left"),
               ],
           }
       
    1:     @classmethod
    1:     def convert(cls, style_dict, num_format_str=None):
               """
               converts a style_dict to an xlsxwriter format dict
       
               Parameters
               ----------
               style_dict : style dictionary to convert
               num_format_str : optional number format string
               """
       
               # Create a XlsxWriter format object.
               props = {}
       
               if num_format_str is not None:
                   props["num_format"] = num_format_str
       
               if style_dict is None:
                   return props
       
               if "borders" in style_dict:
                   style_dict = style_dict.copy()
                   style_dict["border"] = style_dict.pop("borders")
       
               for style_group_key, style_group in style_dict.items():
                   for src, dst in cls.STYLE_MAPPING.get(style_group_key, []):
                       # src is a sequence of keys into a nested dict
                       # dst is a flat key
                       if dst in props:
                           continue
                       v = style_group
                       for k in src:
                           try:
                               v = v[k]
                           except (KeyError, TypeError):
                               break
                       else:
                           props[dst] = v
       
               if isinstance(props.get("pattern"), str):
                   # TODO: support other fill patterns
                   props["pattern"] = 0 if props["pattern"] == "none" else 1
       
               for k in ["border", "top", "right", "bottom", "left"]:
                   if isinstance(props.get(k), str):
                       try:
                           props[k] = [
                               "none",
                               "thin",
                               "medium",
                               "dashed",
                               "dotted",
                               "thick",
                               "double",
                               "hair",
                               "mediumDashed",
                               "dashDot",
                               "mediumDashDot",
                               "dashDotDot",
                               "mediumDashDotDot",
                               "slantDashDot",
                           ].index(props[k])
                       except ValueError:
                           props[k] = 2
       
               if isinstance(props.get("font_script"), str):
                   props["font_script"] = ["baseline", "superscript", "subscript"].index(
                       props["font_script"]
                   )
       
               if isinstance(props.get("underline"), str):
                   props["underline"] = {
                       "none": 0,
                       "single": 1,
                       "double": 2,
                       "singleAccounting": 33,
                       "doubleAccounting": 34,
                   }[props["underline"]]
       
               return props
       
       
    2: class _XlsxWriter(ExcelWriter):
    1:     engine = "xlsxwriter"
    1:     supported_extensions = (".xlsx",)
       
           def __init__(
               self,
               path,
               engine=None,
               date_format=None,
               datetime_format=None,
    1:         mode="w",
               **engine_kwargs
           ):
               # Use the xlsxwriter module as the Excel writer.
               import xlsxwriter
       
               if mode == "a":
                   raise ValueError("Append mode is not supported with xlsxwriter!")
       
               super().__init__(
                   path,
                   engine=engine,
                   date_format=date_format,
                   datetime_format=datetime_format,
                   mode=mode,
                   **engine_kwargs
               )
       
               self.book = xlsxwriter.Workbook(path, **engine_kwargs)
       
    1:     def save(self):
               """
               Save workbook to disk.
               """
       
               return self.book.close()
       
           def write_cells(
    1:         self, cells, sheet_name=None, startrow=0, startcol=0, freeze_panes=None
           ):
               # Write the frame cells using xlsxwriter.
               sheet_name = self._get_sheet_name(sheet_name)
       
               if sheet_name in self.sheets:
                   wks = self.sheets[sheet_name]
               else:
                   wks = self.book.add_worksheet(sheet_name)
                   self.sheets[sheet_name] = wks
       
               style_dict = {"null": None}
       
               if _validate_freeze_panes(freeze_panes):
                   wks.freeze_panes(*(freeze_panes))
       
               for cell in cells:
                   val, fmt = self._value_with_fmt(cell.val)
       
                   stylekey = json.dumps(cell.style)
                   if fmt:
                       stylekey += fmt
       
                   if stylekey in style_dict:
                       style = style_dict[stylekey]
                   else:
                       style = self.book.add_format(_XlsxStyler.convert(cell.style, fmt))
                       style_dict[stylekey] = style
       
                   if cell.mergestart is not None and cell.mergeend is not None:
                       wks.merge_range(
                           startrow + cell.row,
                           startcol + cell.col,
                           startrow + cell.mergestart,
                           startcol + cell.mergeend,
                           val,
                           style,
                       )
                   else:
                       wks.write(startrow + cell.row, startcol + cell.col, val, style)
