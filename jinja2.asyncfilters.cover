    1: from functools import wraps
       
    1: from jinja2.asyncsupport import auto_aiter
    1: from jinja2 import filters
       
       
    1: async def auto_to_seq(value):
           seq = []
           if hasattr(value, '__aiter__'):
               async for item in value:
                   seq.append(item)
           else:
               for item in value:
                   seq.append(item)
           return seq
       
       
    1: async def async_select_or_reject(args, kwargs, modfunc, lookup_attr):
           seq, func = filters.prepare_select_or_reject(
               args, kwargs, modfunc, lookup_attr)
           if seq:
               async for item in auto_aiter(seq):
                   if func(item):
                       yield item
       
       
    1: def dualfilter(normal_filter, async_filter):
   11:     wrap_evalctx = False
   11:     if getattr(normal_filter, 'environmentfilter', False):
    3:         is_async = lambda args: args[0].is_async
    3:         wrap_evalctx = False
           else:
    8:         if not getattr(normal_filter, 'evalcontextfilter', False) and \
    7:            not getattr(normal_filter, 'contextfilter', False):
    2:             wrap_evalctx = True
    8:         is_async = lambda args: args[0].environment.is_async
       
   11:     @wraps(normal_filter)
           def wrapper(*args, **kwargs):
               b = is_async(args)
               if wrap_evalctx:
                   args = args[1:]
               if b:
                   return async_filter(*args, **kwargs)
               return normal_filter(*args, **kwargs)
       
   11:     if wrap_evalctx:
    2:         wrapper.evalcontextfilter = True
       
   11:     wrapper.asyncfiltervariant = True
       
   11:     return wrapper
       
       
    1: def asyncfiltervariant(original):
   11:     def decorator(f):
   11:         return dualfilter(original, f)
   11:     return decorator
       
       
    1: @asyncfiltervariant(filters.do_first)
       async def do_first(environment, seq):
           try:
               return await auto_aiter(seq).__anext__()
           except StopAsyncIteration:
               return environment.undefined('No first item, sequence was empty.')
       
       
    1: @asyncfiltervariant(filters.do_groupby)
       async def do_groupby(environment, value, attribute):
           expr = filters.make_attrgetter(environment, attribute)
           return [filters._GroupTuple(key, await auto_to_seq(values))
                   for key, values in filters.groupby(sorted(
                       await auto_to_seq(value), key=expr), expr)]
       
       
    1: @asyncfiltervariant(filters.do_join)
    1: async def do_join(eval_ctx, value, d=u'', attribute=None):
           return filters.do_join(eval_ctx, await auto_to_seq(value), d, attribute)
       
       
    1: @asyncfiltervariant(filters.do_list)
       async def do_list(value):
           return await auto_to_seq(value)
       
       
    1: @asyncfiltervariant(filters.do_reject)
       async def do_reject(*args, **kwargs):
           return async_select_or_reject(args, kwargs, lambda x: not x, False)
       
       
    1: @asyncfiltervariant(filters.do_rejectattr)
       async def do_rejectattr(*args, **kwargs):
           return async_select_or_reject(args, kwargs, lambda x: not x, True)
       
       
    1: @asyncfiltervariant(filters.do_select)
       async def do_select(*args, **kwargs):
           return async_select_or_reject(args, kwargs, lambda x: x, False)
       
       
    1: @asyncfiltervariant(filters.do_selectattr)
       async def do_selectattr(*args, **kwargs):
           return async_select_or_reject(args, kwargs, lambda x: x, True)
       
       
    1: @asyncfiltervariant(filters.do_map)
       async def do_map(*args, **kwargs):
           seq, func = filters.prepare_map(args, kwargs)
           if seq:
               async for item in auto_aiter(seq):
                   yield func(item)
       
       
    1: @asyncfiltervariant(filters.do_sum)
    1: async def do_sum(environment, iterable, attribute=None, start=0):
           rv = start
           if attribute is not None:
               func = filters.make_attrgetter(environment, attribute)
           else:
               func = lambda x: x
           async for item in auto_aiter(iterable):
               rv += func(item)
           return rv
       
       
    1: @asyncfiltervariant(filters.do_slice)
    1: async def do_slice(value, slices, fill_with=None):
           return filters.do_slice(await auto_to_seq(value), slices, fill_with)
       
       
       ASYNC_FILTERS = {
    1:     'first':        do_first,
    1:     'groupby':      do_groupby,
    1:     'join':         do_join,
    1:     'list':         do_list,
           # we intentionally do not support do_last because that would be
           # ridiculous
    1:     'reject':       do_reject,
    1:     'rejectattr':   do_rejectattr,
    1:     'map':          do_map,
    1:     'select':       do_select,
    1:     'selectattr':   do_selectattr,
    1:     'sum':          do_sum,
    1:     'slice':        do_slice,
       }
