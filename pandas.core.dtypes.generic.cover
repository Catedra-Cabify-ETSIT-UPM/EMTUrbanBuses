    1: """ define generic base classes for pandas objects """
       
       
       # define abstract base classes to enable isinstance type checking on our
       # objects
    1: def create_pandas_abc_type(name, attr, comp):
   26:     @classmethod
           def _check(cls, inst):
 5287:         return getattr(inst, attr, "_typ") in comp
       
   26:     dct = dict(__instancecheck__=_check, __subclasscheck__=_check)
   26:     meta = type("ABCBase", (type,), dct)
   26:     return meta(name, tuple(), dct)
       
       
    1: ABCIndex = create_pandas_abc_type("ABCIndex", "_typ", ("index",))
    1: ABCInt64Index = create_pandas_abc_type("ABCInt64Index", "_typ", ("int64index",))
    1: ABCUInt64Index = create_pandas_abc_type("ABCUInt64Index", "_typ", ("uint64index",))
    1: ABCRangeIndex = create_pandas_abc_type("ABCRangeIndex", "_typ", ("rangeindex",))
    1: ABCFloat64Index = create_pandas_abc_type("ABCFloat64Index", "_typ", ("float64index",))
    1: ABCMultiIndex = create_pandas_abc_type("ABCMultiIndex", "_typ", ("multiindex",))
    1: ABCDatetimeIndex = create_pandas_abc_type(
    1:     "ABCDatetimeIndex", "_typ", ("datetimeindex",)
       )
    1: ABCTimedeltaIndex = create_pandas_abc_type(
    1:     "ABCTimedeltaIndex", "_typ", ("timedeltaindex",)
       )
    1: ABCPeriodIndex = create_pandas_abc_type("ABCPeriodIndex", "_typ", ("periodindex",))
    1: ABCCategoricalIndex = create_pandas_abc_type(
    1:     "ABCCategoricalIndex", "_typ", ("categoricalindex",)
       )
    1: ABCIntervalIndex = create_pandas_abc_type(
    1:     "ABCIntervalIndex", "_typ", ("intervalindex",)
       )
    1: ABCIndexClass = create_pandas_abc_type(
    1:     "ABCIndexClass",
    1:     "_typ",
           (
    1:         "index",
               "int64index",
               "rangeindex",
               "float64index",
               "uint64index",
               "multiindex",
               "datetimeindex",
               "timedeltaindex",
               "periodindex",
               "categoricalindex",
               "intervalindex",
           ),
       )
       
    1: ABCSeries = create_pandas_abc_type("ABCSeries", "_typ", ("series",))
    1: ABCDataFrame = create_pandas_abc_type("ABCDataFrame", "_typ", ("dataframe",))
    1: ABCSparseDataFrame = create_pandas_abc_type(
    1:     "ABCSparseDataFrame", "_subtyp", ("sparse_frame",)
       )
    1: ABCSparseSeries = create_pandas_abc_type(
    1:     "ABCSparseSeries", "_subtyp", ("sparse_series", "sparse_time_series")
       )
    1: ABCSparseArray = create_pandas_abc_type(
    1:     "ABCSparseArray", "_subtyp", ("sparse_array", "sparse_series")
       )
    1: ABCCategorical = create_pandas_abc_type("ABCCategorical", "_typ", ("categorical"))
    1: ABCDatetimeArray = create_pandas_abc_type("ABCDatetimeArray", "_typ", ("datetimearray"))
    1: ABCTimedeltaArray = create_pandas_abc_type(
    1:     "ABCTimedeltaArray", "_typ", ("timedeltaarray")
       )
    1: ABCPeriodArray = create_pandas_abc_type("ABCPeriodArray", "_typ", ("periodarray",))
    1: ABCPeriod = create_pandas_abc_type("ABCPeriod", "_typ", ("period",))
    1: ABCDateOffset = create_pandas_abc_type("ABCDateOffset", "_typ", ("dateoffset",))
    1: ABCInterval = create_pandas_abc_type("ABCInterval", "_typ", ("interval",))
    1: ABCExtensionArray = create_pandas_abc_type(
    1:     "ABCExtensionArray",
    1:     "_typ",
    1:     ("extension", "categorical", "periodarray", "datetimearray", "timedeltaarray"),
       )
    1: ABCPandasArray = create_pandas_abc_type("ABCPandasArray", "_typ", ("npy_extension",))
       
       
    2: class _ABCGeneric(type):
    1:     def __instancecheck__(cls, inst):
               return hasattr(inst, "_data")
       
       
    1: ABCGeneric = _ABCGeneric("ABCGeneric", tuple(), {})
