       '''Prototyping of the GEOS C API
       
       See header file: geos-x.y.z/capi/geos_c.h
    1: '''
       
    1: from ctypes import CFUNCTYPE, POINTER, c_void_p, c_char_p, \
           c_size_t, c_byte, c_uint, c_int, c_double, py_object
       
    1: from .errors import UnsupportedGEOSVersionError
       
       
    1: EXCEPTION_HANDLER_FUNCTYPE = CFUNCTYPE(None, c_char_p, c_void_p)
       
       # Derived pointer types
    1: c_size_t_p = POINTER(c_size_t)
       
       
    2: class allocated_c_char_p(c_char_p):
    1:     '''char pointer return type'''
    1:     pass
       
       
    1: def prototype(lgeos, geos_version):
           """Protype functions in geos_c.h for different version of GEOS
       
           Use the GEOS version, not the C API version.
           """
       
    1:     if not geos_version >= (3, 3, 0):
               raise UnsupportedGEOSVersionError(
                   "Shapely requires GEOS version 3.3.0 or newer.")
       
           # Initialization, cleanup, version.
       
    1:     lgeos.initGEOS.restype = None
           lgeos.initGEOS.argtypes = [
    1:         EXCEPTION_HANDLER_FUNCTYPE, EXCEPTION_HANDLER_FUNCTYPE]
       
    1:     lgeos.finishGEOS.restype = None
    1:     lgeos.finishGEOS.argtypes = []
       
    1:     lgeos.GEOSversion.restype = c_char_p
    1:     lgeos.GEOSversion.argtypes = []
       
           # These functions are DEPRECATED.  Please use the new Reader and
           # writer APIS!
       
    1:     lgeos.GEOSGeomFromWKT.restype = c_void_p
    1:     lgeos.GEOSGeomFromWKT.argtypes = [c_char_p]
       
    1:     lgeos.GEOSGeomToWKT.restype = allocated_c_char_p
    1:     lgeos.GEOSGeomToWKT.argtypes = [c_void_p]
       
    1:     lgeos.GEOS_setWKBOutputDims.restype = c_int
    1:     lgeos.GEOS_setWKBOutputDims.argtypes = [c_int]
       
    1:     lgeos.GEOSGeomFromWKB_buf.restype = c_void_p
    1:     lgeos.GEOSGeomFromWKB_buf.argtypes = [c_void_p, c_size_t]
       
    1:     lgeos.GEOSGeomToWKB_buf.restype = allocated_c_char_p
    1:     lgeos.GEOSGeomToWKB_buf.argtypes = [c_void_p, c_size_t_p]
       
           # Coordinate sequence
       
    1:     lgeos.GEOSCoordSeq_create.restype = c_void_p
    1:     lgeos.GEOSCoordSeq_create.argtypes = [c_uint, c_uint]
       
    1:     lgeos.GEOSCoordSeq_clone.restype = c_void_p
    1:     lgeos.GEOSCoordSeq_clone.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGeom_clone.restype = c_void_p
    1:     lgeos.GEOSGeom_clone.argtypes = [c_void_p]
       
    1:     lgeos.GEOSCoordSeq_destroy.restype = None
    1:     lgeos.GEOSCoordSeq_destroy.argtypes = [c_void_p]
       
    1:     lgeos.GEOSCoordSeq_setX.restype = c_int
    1:     lgeos.GEOSCoordSeq_setX.argtypes = [c_void_p, c_uint, c_double]
       
    1:     lgeos.GEOSCoordSeq_setY.restype = c_int
    1:     lgeos.GEOSCoordSeq_setY.argtypes = [c_void_p, c_uint, c_double]
       
    1:     lgeos.GEOSCoordSeq_setZ.restype = c_int
    1:     lgeos.GEOSCoordSeq_setZ.argtypes = [c_void_p, c_uint, c_double]
       
    1:     lgeos.GEOSCoordSeq_setOrdinate.restype = c_int
           lgeos.GEOSCoordSeq_setOrdinate.argtypes = [
    1:         c_void_p, c_uint, c_uint, c_double]
       
    1:     lgeos.GEOSCoordSeq_getX.restype = c_int
    1:     lgeos.GEOSCoordSeq_getX.argtypes = [c_void_p, c_uint, c_void_p]
       
    1:     lgeos.GEOSCoordSeq_getY.restype = c_int
    1:     lgeos.GEOSCoordSeq_getY.argtypes = [c_void_p, c_uint, c_void_p]
       
    1:     lgeos.GEOSCoordSeq_getZ.restype = c_int
    1:     lgeos.GEOSCoordSeq_getZ.argtypes = [c_void_p, c_uint, c_void_p]
       
    1:     lgeos.GEOSCoordSeq_getSize.restype = c_int
    1:     lgeos.GEOSCoordSeq_getSize.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSCoordSeq_getDimensions.restype = c_int
    1:     lgeos.GEOSCoordSeq_getDimensions.argtypes = [c_void_p, c_void_p]
       
           # Linear refeferencing
       
    1:     if geos_version >= (3, 2, 0):
       
    1:         lgeos.GEOSProject.restype = c_double
    1:         lgeos.GEOSProject.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSInterpolate.restype = c_void_p
    1:         lgeos.GEOSInterpolate.argtypes = [c_void_p, c_double]
       
    1:         lgeos.GEOSProjectNormalized.restype = c_double
    1:         lgeos.GEOSProjectNormalized.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSInterpolateNormalized.restype = c_void_p
    1:         lgeos.GEOSInterpolateNormalized.argtypes = [c_void_p, c_double]
       
           # Buffer related
       
    1:     lgeos.GEOSBuffer.restype = c_void_p
    1:     lgeos.GEOSBuffer.argtypes = [c_void_p, c_double, c_int]
       
    1:     if geos_version >= (3, 2, 0):
       
    1:         lgeos.GEOSBufferWithStyle.restype = c_void_p
               lgeos.GEOSBufferWithStyle.argtypes = [
    1:             c_void_p, c_double, c_int, c_int, c_int, c_double]
       
    1:         if geos_version >= (3, 3, 0):
       
    1:             lgeos.GEOSOffsetCurve.restype = c_void_p
                   lgeos.GEOSOffsetCurve.argtypes = [
    1:                 c_void_p, c_double, c_int, c_int, c_double]
       
    1:             lgeos.GEOSBufferParams_create.restype = c_void_p
    1:             lgeos.GEOSBufferParams_create.argtypes = None
       
    1:             lgeos.GEOSBufferParams_setEndCapStyle.restype = c_int
    1:             lgeos.GEOSBufferParams_setEndCapStyle.argtypes = [c_void_p, c_int]
       
    1:             lgeos.GEOSBufferParams_setJoinStyle.restype = c_int
    1:             lgeos.GEOSBufferParams_setJoinStyle.argtypes = [c_void_p, c_int]
       
    1:             lgeos.GEOSBufferParams_setMitreLimit.restype = c_int
    1:             lgeos.GEOSBufferParams_setMitreLimit.argtypes = [c_void_p, c_double]
       
    1:             lgeos.GEOSBufferParams_setQuadrantSegments.restype = c_int
    1:             lgeos.GEOSBufferParams_setQuadrantSegments.argtypes = [c_void_p, c_int]
       
    1:             lgeos.GEOSBufferParams_setSingleSided.restype = c_int
    1:             lgeos.GEOSBufferParams_setSingleSided.argtypes = [c_void_p, c_int]
       
    1:             lgeos.GEOSBufferWithParams.restype = c_void_p
                   lgeos.GEOSBufferWithParams.argtypes = [
    1:                 c_void_p, c_void_p, c_double]
       
               else:
       
                   # deprecated in GEOS 3.3.0 in favour of GEOSOffsetCurve
                   lgeos.GEOSSingleSidedBuffer.restype = c_void_p
                   lgeos.GEOSSingleSidedBuffer.argtypes = [
                       c_void_p, c_double, c_int, c_int, c_double, c_int]
       
           # Geometry constructors
       
    1:     lgeos.GEOSGeom_createPoint.restype = c_void_p
    1:     lgeos.GEOSGeom_createPoint.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGeom_createLinearRing.restype = c_void_p
    1:     lgeos.GEOSGeom_createLinearRing.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGeom_createLineString.restype = c_void_p
    1:     lgeos.GEOSGeom_createLineString.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGeom_createPolygon.restype = c_void_p
    1:     lgeos.GEOSGeom_createPolygon.argtypes = [c_void_p, c_void_p, c_uint]
       
    1:     lgeos.GEOSGeom_createCollection.restype = c_void_p
    1:     lgeos.GEOSGeom_createCollection.argtypes = [c_int, c_void_p, c_uint]
       
    1:     if geos_version >= (3, 3, 0):
    1:         lgeos.GEOSGeom_createEmptyCollection.restype = c_void_p
    1:         lgeos.GEOSGeom_createEmptyCollection.argtypes = [c_int]
       
    1:     lgeos.GEOSGeom_clone.restype = c_void_p
    1:     lgeos.GEOSGeom_clone.argtypes = [c_void_p]
       
           # Memory management
       
    1:     lgeos.GEOSGeom_destroy.restype = None
    1:     lgeos.GEOSGeom_destroy.argtypes = [c_void_p]
       
           # Topology operations
           # Return NULL on exception
       
    1:     lgeos.GEOSEnvelope.restype = c_void_p
    1:     lgeos.GEOSEnvelope.argtypes = [c_void_p]
       
    1:     lgeos.GEOSIntersection.restype = c_void_p
    1:     lgeos.GEOSIntersection.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSConvexHull.restype = c_void_p
    1:     lgeos.GEOSConvexHull.argtypes = [c_void_p]
       
    1:     lgeos.GEOSDifference.restype = c_void_p
    1:     lgeos.GEOSDifference.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSSymDifference.restype = c_void_p
    1:     lgeos.GEOSSymDifference.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSBoundary.restype = c_void_p
    1:     lgeos.GEOSBoundary.argtypes = [c_void_p]
       
    1:     lgeos.GEOSUnion.restype = c_void_p
    1:     lgeos.GEOSUnion.argtypes = [c_void_p, c_void_p]
       
    1:     if geos_version >= (3, 3, 0):
    1:         lgeos.GEOSUnaryUnion.restype = c_void_p
    1:         lgeos.GEOSUnaryUnion.argtypes = [c_void_p]
       
    1:     if geos_version >= (3, 1, 0):
               # deprecated in 3.3.0: use GEOSUnaryUnion instead
    1:         lgeos.GEOSUnionCascaded.restype = c_void_p
    1:         lgeos.GEOSUnionCascaded.argtypes = [c_void_p]
       
    1:     lgeos.GEOSPointOnSurface.restype = c_void_p
    1:     lgeos.GEOSPointOnSurface.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGetCentroid.restype = c_void_p
    1:     lgeos.GEOSGetCentroid.argtypes = [c_void_p]
       
    1:     if geos_version >= (3, 5, 0):
    1:         lgeos.GEOSClipByRect.restype = c_void_p
    1:         lgeos.GEOSClipByRect.argtypes = [c_void_p, c_double, c_double, c_double, c_double]
       
    1:     lgeos.GEOSPolygonize.restype = c_void_p
    1:     lgeos.GEOSPolygonize.argtypes = [c_void_p, c_uint]
       
    1:     if geos_version >= (3, 3, 0):
    1:         lgeos.GEOSPolygonize_full.restype = c_void_p
               lgeos.GEOSPolygonize_full.argtypes = [
    1:             c_void_p, c_void_p, c_void_p, c_void_p]
       
    1:     if geos_version >= (3, 4, 0):
    1:         lgeos.GEOSDelaunayTriangulation.restype = c_void_p
    1:         lgeos.GEOSDelaunayTriangulation.argtypes = [c_void_p, c_double, c_int]
       
    1:     lgeos.GEOSLineMerge.restype = c_void_p
    1:     lgeos.GEOSLineMerge.argtypes = [c_void_p]
       
    1:     lgeos.GEOSSimplify.restype = c_void_p
    1:     lgeos.GEOSSimplify.argtypes = [c_void_p, c_double]
       
    1:     lgeos.GEOSTopologyPreserveSimplify.restype = c_void_p
    1:     lgeos.GEOSTopologyPreserveSimplify.argtypes = [c_void_p, c_double]
       
           # Binary predicates
           # Return 2 on exception, 1 on true, 0 on false
       
    1:     lgeos.GEOSDisjoint.restype = c_byte
    1:     lgeos.GEOSDisjoint.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSTouches.restype = c_byte
    1:     lgeos.GEOSTouches.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSIntersects.restype = c_byte
    1:     lgeos.GEOSIntersects.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSCrosses.restype = c_byte
    1:     lgeos.GEOSCrosses.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSWithin.restype = c_byte
    1:     lgeos.GEOSWithin.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSContains.restype = c_byte
    1:     lgeos.GEOSContains.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSOverlaps.restype = c_byte
    1:     lgeos.GEOSOverlaps.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSCovers.restype = c_byte
    1:     lgeos.GEOSCovers.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSEquals.restype = c_byte
    1:     lgeos.GEOSEquals.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSEqualsExact.restype = c_byte
    1:     lgeos.GEOSEqualsExact.argtypes = [c_void_p, c_void_p, c_double]
       
           # Unary predicate
           # Return 2 on exception, 1 on true, 0 on false
       
    1:     lgeos.GEOSisEmpty.restype = c_byte
    1:     lgeos.GEOSisEmpty.argtypes = [c_void_p]
       
    1:     lgeos.GEOSisValid.restype = c_byte
    1:     lgeos.GEOSisValid.argtypes = [c_void_p]
       
    1:     if geos_version >= (3, 1, 0):
    1:         lgeos.GEOSisValidReason.restype = allocated_c_char_p
    1:         lgeos.GEOSisValidReason.argtypes = [c_void_p]
       
    1:     lgeos.GEOSisSimple.restype = c_byte
    1:     lgeos.GEOSisSimple.argtypes = [c_void_p]
       
    1:     lgeos.GEOSisRing.restype = c_byte
    1:     lgeos.GEOSisRing.argtypes = [c_void_p]
       
    1:     if geos_version >= (3, 3, 0):
    1:         lgeos.GEOSisClosed.restype = c_byte
    1:         lgeos.GEOSisClosed.argtypes = [c_void_p]
       
    1:     lgeos.GEOSHasZ.restype = c_byte
    1:     lgeos.GEOSHasZ.argtypes = [c_void_p]
       
           # Dimensionally Extended 9 Intersection Model related
       
    1:     lgeos.GEOSRelate.restype = allocated_c_char_p
    1:     lgeos.GEOSRelate.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSRelatePattern.restype = c_byte
    1:     lgeos.GEOSRelatePattern.argtypes = [c_void_p, c_void_p, c_char_p]
       
    1:     if geos_version >= (3, 3, 0):
    1:         lgeos.GEOSRelatePatternMatch.restype = c_byte
    1:         lgeos.GEOSRelatePatternMatch.argtypes = [c_char_p, c_char_p]
       
           # Prepared Geometry Binary predicates
           # Return 2 on exception, 1 on true, 0 on false
       
    1:     if geos_version >= (3, 1, 0):
       
    1:         lgeos.GEOSPrepare.restype = c_void_p
    1:         lgeos.GEOSPrepare.argtypes = [c_void_p]
       
    1:         lgeos.GEOSPreparedGeom_destroy.restype = None
    1:         lgeos.GEOSPreparedGeom_destroy.argtypes = [c_void_p]
       
    1:         lgeos.GEOSPreparedDisjoint.restype = c_byte
    1:         lgeos.GEOSPreparedDisjoint.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSPreparedTouches.restype = c_byte
    1:         lgeos.GEOSPreparedTouches.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSPreparedIntersects.restype = c_byte
    1:         lgeos.GEOSPreparedIntersects.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSPreparedCrosses.restype = c_byte
    1:         lgeos.GEOSPreparedCrosses.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSPreparedWithin.restype = c_byte
    1:         lgeos.GEOSPreparedWithin.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSPreparedContains.restype = c_byte
    1:         lgeos.GEOSPreparedContains.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSPreparedContainsProperly.restype = c_byte
    1:         lgeos.GEOSPreparedContainsProperly.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSPreparedOverlaps.restype = c_byte
    1:         lgeos.GEOSPreparedOverlaps.argtypes = [c_void_p, c_void_p]
       
    1:         lgeos.GEOSPreparedCovers.restype = c_byte
    1:         lgeos.GEOSPreparedCovers.argtypes = [c_void_p, c_void_p]
       
           # Geometry info
       
    1:     lgeos.GEOSGeomType.restype = c_char_p
    1:     lgeos.GEOSGeomType.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGeomTypeId.restype = c_int
    1:     lgeos.GEOSGeomTypeId.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGetSRID.restype = c_int
    1:     lgeos.GEOSGetSRID.argtypes = [c_void_p]
       
    1:     lgeos.GEOSSetSRID.restype = None
    1:     lgeos.GEOSSetSRID.argtypes = [c_void_p, c_int]
       
    1:     lgeos.GEOSGetNumGeometries.restype = c_int
    1:     lgeos.GEOSGetNumGeometries.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGetGeometryN.restype = c_void_p
    1:     lgeos.GEOSGetGeometryN.argtypes = [c_void_p, c_int]
       
    1:     lgeos.GEOSGetNumInteriorRings.restype = c_int
    1:     lgeos.GEOSGetNumInteriorRings.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGetInteriorRingN.restype = c_void_p
    1:     lgeos.GEOSGetInteriorRingN.argtypes = [c_void_p, c_int]
       
    1:     lgeos.GEOSGetExteriorRing.restype = c_void_p
    1:     lgeos.GEOSGetExteriorRing.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGetNumCoordinates.restype = c_int
    1:     lgeos.GEOSGetNumCoordinates.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGeom_getCoordSeq.restype = c_void_p
    1:     lgeos.GEOSGeom_getCoordSeq.argtypes = [c_void_p]
       
    1:     lgeos.GEOSGeom_getDimensions.restype = c_int
    1:     lgeos.GEOSGeom_getDimensions.argtypes = [c_void_p]
       
           # Misc functions
       
    1:     lgeos.GEOSArea.restype = c_double
    1:     lgeos.GEOSArea.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSLength.restype = c_int
    1:     lgeos.GEOSLength.argtypes = [c_void_p, c_void_p]
       
    1:     lgeos.GEOSDistance.restype = c_int
    1:     lgeos.GEOSDistance.argtypes = [c_void_p, c_void_p, c_void_p]
       
    1:     if geos_version >= (3, 2, 0):
    1:         lgeos.GEOSHausdorffDistance.restype = c_int
    1:         lgeos.GEOSHausdorffDistance.argtypes = [c_void_p, c_void_p, c_void_p]
       
           # Reader and Writer APIs
       
    1:     lgeos.GEOSWKTReader_create.restype = c_void_p
    1:     lgeos.GEOSWKTReader_create.argtypes = []
       
    1:     lgeos.GEOSWKTReader_destroy.restype = None
    1:     lgeos.GEOSWKTReader_destroy.argtypes = [c_void_p]
       
    1:     lgeos.GEOSWKTReader_read.restype = c_void_p
    1:     lgeos.GEOSWKTReader_read.argtypes = [c_void_p, c_char_p]
       
    1:     lgeos.GEOSWKTWriter_create.restype = c_void_p
    1:     lgeos.GEOSWKTWriter_create.argtypes = []
       
    1:     lgeos.GEOSWKTWriter_destroy.restype = None
    1:     lgeos.GEOSWKTWriter_destroy.argtypes = [c_void_p]
       
    1:     lgeos.GEOSWKTWriter_write.restype = allocated_c_char_p
    1:     lgeos.GEOSWKTWriter_write.argtypes = [c_void_p, c_void_p]
       
    1:     if geos_version >= (3, 3, 0):
       
    1:         lgeos.GEOSWKTWriter_setTrim.restype = None
    1:         lgeos.GEOSWKTWriter_setTrim.argtypes = [c_void_p, c_int]
       
    1:         lgeos.GEOSWKTWriter_setRoundingPrecision.restype = None
    1:         lgeos.GEOSWKTWriter_setRoundingPrecision.argtypes = [c_void_p, c_int]
       
    1:         lgeos.GEOSWKTWriter_setOutputDimension.restype = None
    1:         lgeos.GEOSWKTWriter_setOutputDimension.argtypes = [c_void_p, c_int]
       
    1:         lgeos.GEOSWKTWriter_getOutputDimension.restype = c_int
    1:         lgeos.GEOSWKTWriter_getOutputDimension.argtypes = [c_void_p]
       
    1:         lgeos.GEOSWKTWriter_setOld3D.restype = None
    1:         lgeos.GEOSWKTWriter_setOld3D.argtypes = [c_void_p, c_int]
       
    1:     lgeos.GEOSWKBReader_create.restype = c_void_p
    1:     lgeos.GEOSWKBReader_create.argtypes = []
       
    1:     lgeos.GEOSWKBReader_destroy.restype = None
    1:     lgeos.GEOSWKBReader_destroy.argtypes = [c_void_p]
       
    1:     lgeos.GEOSWKBReader_read.restype = c_void_p
    1:     lgeos.GEOSWKBReader_read.argtypes = [c_void_p, c_char_p, c_size_t]
       
    1:     lgeos.GEOSWKBReader_readHEX.restype = c_void_p
    1:     lgeos.GEOSWKBReader_readHEX.argtypes = [c_void_p, c_char_p, c_size_t]
       
    1:     lgeos.GEOSWKBWriter_create.restype = c_void_p
    1:     lgeos.GEOSWKBWriter_create.argtypes = []
       
    1:     lgeos.GEOSWKBWriter_destroy.restype = None
    1:     lgeos.GEOSWKBWriter_destroy.argtypes = [c_void_p]
       
    1:     lgeos.GEOSWKBWriter_write.restype = allocated_c_char_p
    1:     lgeos.GEOSWKBWriter_write.argtypes = [c_void_p, c_void_p, c_size_t_p]
       
    1:     lgeos.GEOSWKBWriter_writeHEX.restype = allocated_c_char_p
    1:     lgeos.GEOSWKBWriter_writeHEX.argtypes = [c_void_p, c_void_p, c_size_t_p]
       
    1:     lgeos.GEOSWKBWriter_getOutputDimension.restype = c_int
    1:     lgeos.GEOSWKBWriter_getOutputDimension.argtypes = [c_void_p]
       
    1:     lgeos.GEOSWKBWriter_setOutputDimension.restype = None
    1:     lgeos.GEOSWKBWriter_setOutputDimension.argtypes = [c_void_p, c_int]
       
    1:     lgeos.GEOSWKBWriter_getByteOrder.restype = c_int
    1:     lgeos.GEOSWKBWriter_getByteOrder.argtypes = [c_void_p]
       
    1:     lgeos.GEOSWKBWriter_setByteOrder.restype = None
    1:     lgeos.GEOSWKBWriter_setByteOrder.argtypes = [c_void_p, c_int]
       
    1:     lgeos.GEOSWKBWriter_getIncludeSRID.restype = c_int
    1:     lgeos.GEOSWKBWriter_getIncludeSRID.argtypes = [c_void_p]
       
    1:     lgeos.GEOSWKBWriter_setIncludeSRID.restype = None
    1:     lgeos.GEOSWKBWriter_setIncludeSRID.argtypes = [c_void_p, c_int]
       
    1:     if geos_version >= (3, 1, 1):
    1:         lgeos.GEOSFree.restype = None
    1:         lgeos.GEOSFree.argtypes = [c_void_p]
       
    1:     if geos_version >= (3, 3, 0):
    1:         lgeos.GEOSSnap.restype = c_void_p
    1:         lgeos.GEOSSnap.argtypes = [c_void_p, c_void_p, c_double]
       
    1:         lgeos.GEOSSharedPaths.restype = c_void_p
    1:         lgeos.GEOSSharedPaths.argtypes = [c_void_p, c_void_p]
       
    1:     if geos_version >= (3, 4, 0):
    1:         lgeos.GEOSNearestPoints.restype = c_void_p
    1:         lgeos.GEOSNearestPoints.argtypes = [c_void_p, c_void_p]
       
    1:     if geos_version >= (3, 4, 2):
    1:         lgeos.GEOSQueryCallback = CFUNCTYPE(None, c_void_p, c_void_p)
       
               lgeos.GEOSSTRtree_query.argtypes = [
    1:             c_void_p, c_void_p, lgeos.GEOSQueryCallback, py_object]
    1:         lgeos.GEOSSTRtree_query.restype = None
       
    1:         lgeos.GEOSSTRtree_create.argtypes = [c_int]
    1:         lgeos.GEOSSTRtree_create.restype = c_void_p
       
    1:         lgeos.GEOSSTRtree_insert.argtypes = [c_void_p, c_void_p, py_object]
    1:         lgeos.GEOSSTRtree_insert.restype = None
       
    1:         lgeos.GEOSSTRtree_remove.argtypes = [c_void_p, c_void_p, py_object]
    1:         lgeos.GEOSSTRtree_remove.restype = None
       
    1:         lgeos.GEOSSTRtree_destroy.argtypes = [c_void_p]
    1:         lgeos.GEOSSTRtree_destroy.restype = None
       
    1:     if geos_version >= (3, 6, 0):
    1:         lgeos.GEOSDistanceCallback = CFUNCTYPE(c_int, c_void_p, c_void_p, c_void_p, c_void_p)
       
               lgeos.GEOSSTRtree_nearest_generic.argtypes = [
    1:             c_void_p, py_object, c_void_p, lgeos.GEOSDistanceCallback, py_object]
    1:         lgeos.GEOSSTRtree_nearest_generic.restype = c_void_p
