       """
       Geometry factories based on the geo interface
    1: """
       
    1: from .point import Point, asPoint
    1: from .linestring import LineString, asLineString
    1: from .polygon import Polygon, asPolygon
    1: from .multipoint import MultiPoint, asMultiPoint
    1: from .multilinestring import MultiLineString, asMultiLineString
    1: from .multipolygon import MultiPolygon, MultiPolygonAdapter
    1: from .collection import GeometryCollection
       
       
    1: def box(minx, miny, maxx, maxy, ccw=True):
           """Returns a rectangular polygon with configurable normal vector"""
           coords = [(maxx, miny), (maxx, maxy), (minx, maxy), (minx, miny)]
           if not ccw:
               coords = coords[::-1]
           return Polygon(coords)
       
    1: def shape(context):
           """Returns a new, independent geometry with coordinates *copied* from the
           context.
           """
15462:     if hasattr(context, "__geo_interface__"):
               ob = context.__geo_interface__
           else:
15462:         ob = context
15462:     geom_type = ob.get("type").lower()
15462:     if geom_type == "point":
14226:         return Point(ob["coordinates"])
 1236:     elif geom_type == "linestring":
 1236:         return LineString(ob["coordinates"])
           elif geom_type == "polygon":
               if not ob["coordinates"]:
                   return Polygon()
               else:
                   return Polygon(ob["coordinates"][0], ob["coordinates"][1:])
           elif geom_type == "multipoint":
               return MultiPoint(ob["coordinates"])
           elif geom_type == "multilinestring":
               return MultiLineString(ob["coordinates"])
           elif geom_type == "multipolygon":
               return MultiPolygon(ob["coordinates"], context_type='geojson')
           elif geom_type == "geometrycollection":
               geoms = [shape(g) for g in ob.get("geometries", [])]
               return GeometryCollection(geoms)
           else:
               raise ValueError("Unknown geometry type: %s" % geom_type)
       
    1: def asShape(context):
           """Adapts the context to a geometry interface. The coordinates remain
           stored in the context.
           """
           if hasattr(context, "__geo_interface__"):
               ob = context.__geo_interface__
           else:
               ob = context
       
           try:
               geom_type = ob.get("type").lower()
           except AttributeError:
               raise ValueError("Context does not provide geo interface")
       
           if geom_type == "point":
               return asPoint(ob["coordinates"])
           elif geom_type == "linestring":
               return asLineString(ob["coordinates"])
           elif geom_type == "polygon":
               return asPolygon(ob["coordinates"][0], ob["coordinates"][1:])
           elif geom_type == "multipoint":
               return asMultiPoint(ob["coordinates"])
           elif geom_type == "multilinestring":
               return asMultiLineString(ob["coordinates"])
           elif geom_type == "multipolygon":
               return MultiPolygonAdapter(ob["coordinates"], context_type='geojson')
           elif geom_type == "geometrycollection":
               geoms = [asShape(g) for g in ob.get("geometries", [])]
               return GeometryCollection(geoms)
           else:
               raise ValueError("Unknown geometry type: %s" % geom_type)
       
    1: def mapping(ob):
           """Returns a GeoJSON-like mapping"""
           return ob.__geo_interface__
