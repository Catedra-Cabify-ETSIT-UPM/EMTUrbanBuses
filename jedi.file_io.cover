    1: import os
       
    1: from parso import file_io
       
       
    2: class AbstractFolderIO(object):
    1:     def __init__(self, path):
               self.path = path
       
    1:     def list(self):
               raise NotImplementedError
       
    1:     def get_file_io(self, name):
               raise NotImplementedError
       
       
    2: class FolderIO(AbstractFolderIO):
    1:     def list(self):
               return os.listdir(self.path)
       
    1:     def get_file_io(self, name):
               return FileIO(os.path.join(self.path, name))
       
       
    2: class FileIOFolderMixin(object):
    1:     def get_parent_folder(self):
               return FolderIO(os.path.dirname(self.path))
       
       
    2: class ZipFileIO(file_io.KnownContentFileIO, FileIOFolderMixin):
    1:     """For .zip and .egg archives"""
    1:     def __init__(self, path, code, zip_path):
               super(ZipFileIO, self).__init__(path, code)
               self._zip_path = zip_path
       
    1:     def get_last_modified(self):
               try:
                   return os.path.getmtime(self._zip_path)
               except OSError:  # Python 3 would probably only need FileNotFoundError
                   return None
       
       
    2: class FileIO(file_io.FileIO, FileIOFolderMixin):
    1:     pass
       
       
    2: class KnownContentFileIO(file_io.KnownContentFileIO, FileIOFolderMixin):
    1:     pass
