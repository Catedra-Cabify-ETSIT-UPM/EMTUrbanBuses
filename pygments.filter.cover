       # -*- coding: utf-8 -*-
       """
           pygments.filter
           ~~~~~~~~~~~~~~~
       
           Module that implements the default filter.
       
           :copyright: Copyright 2006-2019 by the Pygments team, see AUTHORS.
           :license: BSD, see LICENSE for details.
    1: """
       
       
    1: def apply_filters(stream, filters, lexer=None):
           """
           Use this method to apply an iterable of filters to
           a stream. If lexer is given it's forwarded to the
           filter, otherwise the filter receives `None`.
           """
           def _apply(filter_, stream):
               for token in filter_.filter(lexer, stream):
                   yield token
           for filter_ in filters:
               stream = _apply(filter_, stream)
           return stream
       
       
    1: def simplefilter(f):
           """
           Decorator that converts a function into a filter::
       
               @simplefilter
               def lowercase(self, lexer, stream, options):
                   for ttype, value in stream:
                       yield ttype, value.lower()
           """
           return type(f.__name__, (FunctionFilter,), {
               '__module__': getattr(f, '__module__'),
               '__doc__': f.__doc__,
               'function': f,
           })
       
       
    2: class Filter(object):
           """
           Default filter. Subclass this class or use the `simplefilter`
           decorator to create own filters.
    1:     """
       
    1:     def __init__(self, **options):
               self.options = options
       
    1:     def filter(self, lexer, stream):
               raise NotImplementedError()
       
       
    2: class FunctionFilter(Filter):
           """
           Abstract class used by `simplefilter` to create simple
           function filters on the fly. The `simplefilter` decorator
           automatically creates subclasses of this class for
           functions passed to it.
    1:     """
    1:     function = None
       
    1:     def __init__(self, **options):
               if not hasattr(self, 'function'):
                   raise TypeError('%r used without bound function' %
                                   self.__class__.__name__)
               Filter.__init__(self, **options)
       
    1:     def filter(self, lexer, stream):
               # pylint: disable=not-callable
               for ttype, value in self.function(lexer, stream, self.options):
                   yield ttype, value
