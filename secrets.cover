       """Generate cryptographically strong pseudo-random numbers suitable for
       managing secrets such as account authentication, tokens, and similar.
       
       See PEP 506 for more information.
       https://www.python.org/dev/peps/pep-0506/
       
    1: """
       
    1: __all__ = ['choice', 'randbelow', 'randbits', 'SystemRandom',
    1:            'token_bytes', 'token_hex', 'token_urlsafe',
    1:            'compare_digest',
                  ]
       
       
    1: import base64
    1: import binascii
    1: import os
       
    1: from hmac import compare_digest
    1: from random import SystemRandom
       
    1: _sysrand = SystemRandom()
       
    1: randbits = _sysrand.getrandbits
    1: choice = _sysrand.choice
       
    1: def randbelow(exclusive_upper_bound):
           """Return a random int in the range [0, n)."""
           if exclusive_upper_bound <= 0:
               raise ValueError("Upper bound must be positive.")
           return _sysrand._randbelow(exclusive_upper_bound)
       
    1: DEFAULT_ENTROPY = 32  # number of bytes to return by default
       
    1: def token_bytes(nbytes=None):
           """Return a random byte string containing *nbytes* bytes.
       
           If *nbytes* is ``None`` or not supplied, a reasonable
           default is used.
       
           >>> token_bytes(16)  #doctest:+SKIP
           b'\\xebr\\x17D*t\\xae\\xd4\\xe3S\\xb6\\xe2\\xebP1\\x8b'
       
           """
           if nbytes is None:
               nbytes = DEFAULT_ENTROPY
           return os.urandom(nbytes)
       
    1: def token_hex(nbytes=None):
           """Return a random text string, in hexadecimal.
       
           The string has *nbytes* random bytes, each byte converted to two
           hex digits.  If *nbytes* is ``None`` or not supplied, a reasonable
           default is used.
       
           >>> token_hex(16)  #doctest:+SKIP
           'f9bf78b9a18ce6d46a0cd2b0b86df9da'
       
           """
           return binascii.hexlify(token_bytes(nbytes)).decode('ascii')
       
    1: def token_urlsafe(nbytes=None):
           """Return a random URL-safe text string, in Base64 encoding.
       
           The string has *nbytes* random bytes.  If *nbytes* is ``None``
           or not supplied, a reasonable default is used.
       
           >>> token_urlsafe(16)  #doctest:+SKIP
           'Drmhze6EPcv0fN_81Bj-nA'
       
           """
           tok = token_bytes(nbytes)
           return base64.urlsafe_b64encode(tok).rstrip(b'=').decode('ascii')
