    1: """A simple log mechanism styled after PEP 282."""
       
       # The class here is styled after PEP 282 so that it could later be
       # replaced with a standard Python logging implementation.
       
    1: DEBUG = 1
    1: INFO = 2
    1: WARN = 3
    1: ERROR = 4
    1: FATAL = 5
       
    1: import sys
       
    2: class Log:
       
    1:     def __init__(self, threshold=WARN):
    1:         self.threshold = threshold
       
    1:     def _log(self, level, msg, args):
               if level not in (DEBUG, INFO, WARN, ERROR, FATAL):
                   raise ValueError('%s wrong log level' % str(level))
       
               if level >= self.threshold:
                   if args:
                       msg = msg % args
                   if level in (WARN, ERROR, FATAL):
                       stream = sys.stderr
                   else:
                       stream = sys.stdout
                   try:
                       stream.write('%s\n' % msg)
                   except UnicodeEncodeError:
                       # emulate backslashreplace error handler
                       encoding = stream.encoding
                       msg = msg.encode(encoding, "backslashreplace").decode(encoding)
                       stream.write('%s\n' % msg)
                   stream.flush()
       
    1:     def log(self, level, msg, *args):
               self._log(level, msg, args)
       
    1:     def debug(self, msg, *args):
               self._log(DEBUG, msg, args)
       
    1:     def info(self, msg, *args):
               self._log(INFO, msg, args)
       
    1:     def warn(self, msg, *args):
               self._log(WARN, msg, args)
       
    1:     def error(self, msg, *args):
               self._log(ERROR, msg, args)
       
    1:     def fatal(self, msg, *args):
               self._log(FATAL, msg, args)
       
    1: _global_log = Log()
    1: log = _global_log.log
    1: debug = _global_log.debug
    1: info = _global_log.info
    1: warn = _global_log.warn
    1: error = _global_log.error
    1: fatal = _global_log.fatal
       
    1: def set_threshold(level):
           # return the old threshold for use from tests
           old = _global_log.threshold
           _global_log.threshold = level
           return old
       
    1: def set_verbosity(v):
           if v <= 0:
               set_threshold(WARN)
           elif v == 1:
               set_threshold(INFO)
           elif v >= 2:
               set_threshold(DEBUG)
