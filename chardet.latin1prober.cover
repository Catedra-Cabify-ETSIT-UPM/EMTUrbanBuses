       ######################## BEGIN LICENSE BLOCK ########################
       # The Original Code is Mozilla Universal charset detector code.
       #
       # The Initial Developer of the Original Code is
       # Netscape Communications Corporation.
       # Portions created by the Initial Developer are Copyright (C) 2001
       # the Initial Developer. All Rights Reserved.
       #
       # Contributor(s):
       #   Mark Pilgrim - port to Python
       #   Shy Shalom - original C code
       #
       # This library is free software; you can redistribute it and/or
       # modify it under the terms of the GNU Lesser General Public
       # License as published by the Free Software Foundation; either
       # version 2.1 of the License, or (at your option) any later version.
       #
       # This library is distributed in the hope that it will be useful,
       # but WITHOUT ANY WARRANTY; without even the implied warranty of
       # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
       # Lesser General Public License for more details.
       #
       # You should have received a copy of the GNU Lesser General Public
       # License along with this library; if not, write to the Free Software
       # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
       # 02110-1301  USA
       ######################### END LICENSE BLOCK #########################
       
    1: from .charsetprober import CharSetProber
    1: from .enums import ProbingState
       
    1: FREQ_CAT_NUM = 4
       
    1: UDF = 0  # undefined
    1: OTH = 1  # other
    1: ASC = 2  # ascii capital letter
    1: ASS = 3  # ascii small letter
    1: ACV = 4  # accent capital vowel
    1: ACO = 5  # accent capital other
    1: ASV = 6  # accent small vowel
    1: ASO = 7  # accent small other
    1: CLASS_NUM = 8  # total classes
       
       Latin1_CharToClass = (
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 10 - 17
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 18 - 1F
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 20 - 27
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 28 - 2F
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 30 - 37
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 38 - 3F
    1:     OTH, ASC, ASC, ASC, ASC, ASC, ASC, ASC,   # 40 - 47
    1:     ASC, ASC, ASC, ASC, ASC, ASC, ASC, ASC,   # 48 - 4F
    1:     ASC, ASC, ASC, ASC, ASC, ASC, ASC, ASC,   # 50 - 57
    1:     ASC, ASC, ASC, OTH, OTH, OTH, OTH, OTH,   # 58 - 5F
    1:     OTH, ASS, ASS, ASS, ASS, ASS, ASS, ASS,   # 60 - 67
    1:     ASS, ASS, ASS, ASS, ASS, ASS, ASS, ASS,   # 68 - 6F
    1:     ASS, ASS, ASS, ASS, ASS, ASS, ASS, ASS,   # 70 - 77
    1:     ASS, ASS, ASS, OTH, OTH, OTH, OTH, OTH,   # 78 - 7F
    1:     OTH, UDF, OTH, ASO, OTH, OTH, OTH, OTH,   # 80 - 87
    1:     OTH, OTH, ACO, OTH, ACO, UDF, ACO, UDF,   # 88 - 8F
    1:     UDF, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 90 - 97
    1:     OTH, OTH, ASO, OTH, ASO, UDF, ASO, ACO,   # 98 - 9F
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # A0 - A7
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # A8 - AF
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # B0 - B7
    1:     OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # B8 - BF
    1:     ACV, ACV, ACV, ACV, ACV, ACV, ACO, ACO,   # C0 - C7
    1:     ACV, ACV, ACV, ACV, ACV, ACV, ACV, ACV,   # C8 - CF
    1:     ACO, ACO, ACV, ACV, ACV, ACV, ACV, OTH,   # D0 - D7
    1:     ACV, ACV, ACV, ACV, ACV, ACO, ACO, ACO,   # D8 - DF
    1:     ASV, ASV, ASV, ASV, ASV, ASV, ASO, ASO,   # E0 - E7
    1:     ASV, ASV, ASV, ASV, ASV, ASV, ASV, ASV,   # E8 - EF
    1:     ASO, ASO, ASV, ASV, ASV, ASV, ASV, OTH,   # F0 - F7
    1:     ASV, ASV, ASV, ASV, ASV, ASO, ASO, ASO,   # F8 - FF
       )
       
       # 0 : illegal
       # 1 : very unlikely
       # 2 : normal
       # 3 : very likely
       Latin1ClassModel = (
       # UDF OTH ASC ASS ACV ACO ASV ASO
    1:     0,  0,  0,  0,  0,  0,  0,  0,  # UDF
           0,  3,  3,  3,  3,  3,  3,  3,  # OTH
           0,  3,  3,  3,  3,  3,  3,  3,  # ASC
           0,  3,  3,  3,  1,  1,  3,  3,  # ASS
           0,  3,  3,  3,  1,  2,  1,  2,  # ACV
           0,  3,  3,  3,  3,  3,  3,  3,  # ACO
           0,  3,  1,  3,  1,  1,  1,  3,  # ASV
           0,  3,  1,  3,  1,  1,  3,  3,  # ASO
       )
       
       
    2: class Latin1Prober(CharSetProber):
    1:     def __init__(self):
               super(Latin1Prober, self).__init__()
               self._last_char_class = None
               self._freq_counter = None
               self.reset()
       
    1:     def reset(self):
               self._last_char_class = OTH
               self._freq_counter = [0] * FREQ_CAT_NUM
               CharSetProber.reset(self)
       
    1:     @property
           def charset_name(self):
               return "ISO-8859-1"
       
    1:     @property
           def language(self):
               return ""
       
    1:     def feed(self, byte_str):
               byte_str = self.filter_with_english_letters(byte_str)
               for c in byte_str:
                   char_class = Latin1_CharToClass[c]
                   freq = Latin1ClassModel[(self._last_char_class * CLASS_NUM)
                                           + char_class]
                   if freq == 0:
                       self._state = ProbingState.NOT_ME
                       break
                   self._freq_counter[freq] += 1
                   self._last_char_class = char_class
       
               return self.state
       
    1:     def get_confidence(self):
               if self.state == ProbingState.NOT_ME:
                   return 0.01
       
               total = sum(self._freq_counter)
               if total < 0.01:
                   confidence = 0.0
               else:
                   confidence = ((self._freq_counter[3] - self._freq_counter[1] * 20.0)
                                 / total)
               if confidence < 0.0:
                   confidence = 0.0
               # lower the confidence of latin1 so that other more accurate
               # detector can take priority.
               confidence = confidence * 0.73
               return confidence
