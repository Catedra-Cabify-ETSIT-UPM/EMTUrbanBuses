       # coding: utf-8
    1: """Python bindings for 0MQ."""
       
       # Copyright (C) PyZMQ Developers
       # Distributed under the terms of the Modified BSD License.
       
    1: import atexit
    1: from threading import Lock
       
    1: from zmq.backend import Context as ContextBase
    1: from . import constants
    1: from .attrsettr import AttributeSetter
    1: from .constants import ENOTSUP, ctx_opt_names
    1: from .socket import Socket
    1: from zmq.error import ZMQError
       
       # notice when exiting, to avoid triggering term on exit
    1: _exiting = False
    1: def _notice_atexit():
           global _exiting
           _exiting = True
    1: atexit.register(_notice_atexit)
       
    2: class Context(ContextBase, AttributeSetter):
           """Create a zmq Context
           
           A zmq Context creates sockets via its ``ctx.socket`` method.
    1:     """
    1:     sockopts = None
    1:     _instance = None
    1:     _instance_lock = Lock()
    1:     _shadow = False
           
    1:     def __init__(self, io_threads=1, **kwargs):
               super(Context, self).__init__(io_threads=io_threads, **kwargs)
               if kwargs.get('shadow', False):
                   self._shadow = True
               else:
                   self._shadow = False
               self.sockopts = {}
               
           
    1:     def __del__(self):
               """deleting a Context should terminate it, without trying non-threadsafe destroy"""
               if not self._shadow and not _exiting:
                   self.term()
           
    1:     def __enter__(self):
               return self
           
    1:     def __exit__(self, *args, **kwargs):
               self.term()
           
    1:     def __copy__(self, memo=None):
               """Copying a Context creates a shadow copy"""
               return self.__class__.shadow(self.underlying)
           
    1:     __deepcopy__ = __copy__
           
    1:     @classmethod
           def shadow(cls, address):
               """Shadow an existing libzmq context
               
               address is the integer address of the libzmq context
               or an FFI pointer to it.
               
               .. versionadded:: 14.1
               """
               from zmq.utils.interop import cast_int_addr
               address = cast_int_addr(address)
               return cls(shadow=address)
           
    1:     @classmethod
           def shadow_pyczmq(cls, ctx):
               """Shadow an existing pyczmq context
               
               ctx is the FFI `zctx_t *` pointer
               
               .. versionadded:: 14.1
               """
               from pyczmq import zctx
               from zmq.utils.interop import cast_int_addr
               
               underlying = zctx.underlying(ctx)
               address = cast_int_addr(underlying)
               return cls(shadow=address)
       
           # static method copied from tornado IOLoop.instance
    1:     @classmethod
    1:     def instance(cls, io_threads=1):
               """Returns a global Context instance.
       
               Most single-threaded applications have a single, global Context.
               Use this method instead of passing around Context instances
               throughout your code.
       
               A common pattern for classes that depend on Contexts is to use
               a default argument to enable programs with multiple Contexts
               but not require the argument for simpler applications:
       
                   class MyClass(object):
                       def __init__(self, context=None):
                           self.context = context or Context.instance()
               """
               if cls._instance is None or cls._instance.closed:
                   with cls._instance_lock:
                       if cls._instance is None or cls._instance.closed:
                           cls._instance = cls(io_threads=io_threads)
               return cls._instance
           
           #-------------------------------------------------------------------------
           # Hooks for ctxopt completion
           #-------------------------------------------------------------------------
           
    1:     def __dir__(self):
               keys = dir(self.__class__)
       
               for collection in (
                   ctx_opt_names,
               ):
                   keys.extend(collection)
               return keys
       
           #-------------------------------------------------------------------------
           # Creating Sockets
           #-------------------------------------------------------------------------
       
    1:     @property
           def _socket_class(self):
               return Socket
           
    1:     def socket(self, socket_type, **kwargs):
               """Create a Socket associated with this Context.
       
               Parameters
               ----------
               socket_type : int
                   The socket type, which can be any of the 0MQ socket types:
                   REQ, REP, PUB, SUB, PAIR, DEALER, ROUTER, PULL, PUSH, etc.
       
               kwargs:
                   will be passed to the __init__ method of the socket class.
               """
               if self.closed:
                   raise ZMQError(ENOTSUP)
               s = self._socket_class(self, socket_type, **kwargs)
               for opt, value in self.sockopts.items():
                   try:
                       s.setsockopt(opt, value)
                   except ZMQError:
                       # ignore ZMQErrors, which are likely for socket options
                       # that do not apply to a particular socket type, e.g.
                       # SUBSCRIBE for non-SUB sockets.
                       pass
               return s
           
    1:     def setsockopt(self, opt, value):
               """set default socket options for new sockets created by this Context
               
               .. versionadded:: 13.0
               """
               self.sockopts[opt] = value
           
    1:     def getsockopt(self, opt):
               """get default socket options for new sockets created by this Context
               
               .. versionadded:: 13.0
               """
               return self.sockopts[opt]
           
    1:     def _set_attr_opt(self, name, opt, value):
               """set default sockopts as attributes"""
               if name in constants.ctx_opt_names:
                   return self.set(opt, value)
               else:
                   self.sockopts[opt] = value
           
    1:     def _get_attr_opt(self, name, opt):
               """get default sockopts as attributes"""
               if name in constants.ctx_opt_names:
                   return self.get(opt)
               else:
                   if opt not in self.sockopts:
                       raise AttributeError(name)
                   else:
                       return self.sockopts[opt]
           
    1:     def __delattr__(self, key):
               """delete default sockopts as attributes"""
               key = key.upper()
               try:
                   opt = getattr(constants, key)
               except AttributeError:
                   raise AttributeError("no such socket option: %s" % key)
               else:
                   if opt not in self.sockopts:
                       raise AttributeError(key)
                   else:
                       del self.sockopts[opt]
       
    1: __all__ = ['Context']
