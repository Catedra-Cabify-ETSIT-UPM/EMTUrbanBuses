    1: from __future__ import division, absolute_import, print_function
       
    1: from .info import __doc__
    1: from numpy.version import version as __version__
       
    1: import os
       
       # disables OpenBLAS affinity setting of the main thread that limits
       # python threads or processes to one core
    1: env_added = []
    3: for envkey in ['OPENBLAS_MAIN_FREE', 'GOTOBLAS_MAIN_FREE']:
    2:     if envkey not in os.environ:
    2:         os.environ[envkey] = '1'
    2:         env_added.append(envkey)
       
    1: try:
    1:     from . import multiarray
       except ImportError as exc:
           import sys
           msg = """
       
       IMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!
       
       Importing the numpy c-extensions failed.
       - Try uninstalling and reinstalling numpy.
       - If you have already done that, then:
         1. Check that you expected to use Python%d.%d from "%s",
            and that you have no directories in your PATH or PYTHONPATH that can
            interfere with the Python and numpy version "%s" you're trying to use.
         2. If (1) looks fine, you can open a new issue at
            https://github.com/numpy/numpy/issues.  Please include details on:
            - how you installed Python
            - how you installed numpy
            - your operating system
            - whether or not you have multiple versions of Python installed
            - if you built from source, your compiler versions and ideally a build log
       
       - If you're working with a numpy git repository, try `git clean -xdf`
         (removes all files not under version control) and rebuild numpy.
       
       Note: this error has many possible causes, so please don't comment on
       an existing issue about this - open a new one instead.
       
       Original error was: %s
       """ % (sys.version_info[0], sys.version_info[1], sys.executable,
               __version__, exc)
           raise ImportError(msg)
       finally:
    3:     for envkey in env_added:
    2:         del os.environ[envkey]
    1: del envkey
    1: del env_added
    1: del os
       
    1: from . import umath
       
       # Check that multiarray,umath are pure python modules wrapping
       # _multiarray_umath and not either of the old c-extension modules
    1: if not (hasattr(multiarray, '_multiarray_umath') and
    1:         hasattr(umath, '_multiarray_umath')):
           import sys
           path = sys.modules['numpy'].__path__
           msg = ("Something is wrong with the numpy installation. "
               "While importing we detected an older version of "
               "numpy in {}. One method of fixing this is to repeatedly uninstall "
               "numpy until none is found, then reinstall this version.")
           raise ImportError(msg.format(path))
       
    1: from . import numerictypes as nt
    1: multiarray.set_typeDict(nt.sctypeDict)
    1: from . import numeric
    1: from .numeric import *
    1: from . import fromnumeric
    1: from .fromnumeric import *
    1: from . import defchararray as char
    1: from . import records as rec
    1: from .records import *
    1: from .memmap import *
    1: from .defchararray import chararray
    1: from . import function_base
    1: from .function_base import *
    1: from . import machar
    1: from .machar import *
    1: from . import getlimits
    1: from .getlimits import *
    1: from . import shape_base
    1: from .shape_base import *
    1: from . import einsumfunc
    1: from .einsumfunc import *
    1: del nt
       
    1: from .fromnumeric import amax as max, amin as min, round_ as round
    1: from .numeric import absolute as abs
       
       # do this after everything else, to minimize the chance of this misleadingly
       # appearing in an import-time traceback
    1: from . import _add_newdocs
       # add these for module-freeze analysis (like PyInstaller)
    1: from . import _dtype_ctypes
    1: from . import _internal
    1: from . import _dtype
    1: from . import _methods
       
    1: __all__ = ['char', 'rec', 'memmap']
    1: __all__ += numeric.__all__
    1: __all__ += fromnumeric.__all__
    1: __all__ += rec.__all__
    1: __all__ += ['chararray']
    1: __all__ += function_base.__all__
    1: __all__ += machar.__all__
    1: __all__ += getlimits.__all__
    1: __all__ += shape_base.__all__
    1: __all__ += einsumfunc.__all__
       
       # Make it possible so that ufuncs can be pickled
       #  Here are the loading and unloading functions
       # The name numpy.core._ufunc_reconstruct must be
       #   available for unpickling to work.
    1: def _ufunc_reconstruct(module, name):
           # The `fromlist` kwarg is required to ensure that `mod` points to the
           # inner-most module rather than the parent package when module name is
           # nested. This makes it possible to pickle non-toplevel ufuncs such as
           # scipy.special.expit for instance.
           mod = __import__(module, fromlist=[name])
           return getattr(mod, name)
       
    1: def _ufunc_reduce(func):
           from pickle import whichmodule
           name = func.__name__
           return _ufunc_reconstruct, (whichmodule(func, name), name)
       
       
    1: import sys
    1: if sys.version_info[0] >= 3:
    1:     import copyreg
       else:
           import copy_reg as copyreg
       
    1: copyreg.pickle(ufunc, _ufunc_reduce, _ufunc_reconstruct)
       # Unclutter namespace (must keep _ufunc_reconstruct for unpickling)
    1: del copyreg
    1: del sys
    1: del _ufunc_reduce
       
    1: from numpy._pytesttester import PytestTester
    1: test = PytestTester(__name__)
    1: del PytestTester
