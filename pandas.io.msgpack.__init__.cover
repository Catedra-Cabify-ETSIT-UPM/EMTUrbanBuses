       # coding: utf-8
       
    1: from collections import namedtuple
       
    1: from pandas.io.msgpack.exceptions import *  # noqa
    1: from pandas.io.msgpack._version import version  # noqa
       
       
    2: class ExtType(namedtuple("ExtType", "code data")):
    1:     """ExtType represents ext type in msgpack."""
       
    1:     def __new__(cls, code, data):
               if not isinstance(code, int):
                   raise TypeError("code must be int")
               if not isinstance(data, bytes):
                   raise TypeError("data must be bytes")
               if not 0 <= code <= 127:
                   raise ValueError("code must be 0~127")
               return super().__new__(cls, code, data)
       
       
    1: import os  # noqa
       
    1: from pandas.io.msgpack._packer import Packer  # noqa
    1: from pandas.io.msgpack._unpacker import unpack, unpackb, Unpacker  # noqa
       
       
    1: def pack(o, stream, **kwargs):
           """
           Pack object `o` and write it to `stream`
       
           See :class:`Packer` for options.
           """
           packer = Packer(**kwargs)
           stream.write(packer.pack(o))
       
       
    1: def packb(o, **kwargs):
           """
           Pack object `o` and return packed bytes
       
           See :class:`Packer` for options.
           """
           return Packer(**kwargs).pack(o)
       
       
       # alias for compatibility to simplejson/marshal/pickle.
    1: load = unpack
    1: loads = unpackb
       
    1: dump = pack
    1: dumps = packb
