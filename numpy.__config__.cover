       # This file is generated by numpy's setup.py
       # It contains system_info results at the time of building this package.
    1: __all__ = ["get_info","show"]
       
       
    1: import os
    1: import sys
       
    1: extra_dll_dir = os.path.join(os.path.dirname(__file__), '.libs')
       
    1: if sys.platform == 'win32' and os.path.isdir(extra_dll_dir):
           os.environ.setdefault('PATH', '')
           os.environ['PATH'] += os.pathsep + extra_dll_dir
       
    1: blas_mkl_info={'libraries': ['blas', 'cblas', 'lapack', 'pthread', 'blas', 'cblas', 'lapack'], 'library_dirs': ['/opt/conda/lib'], 'define_macros': [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)], 'include_dirs': ['/opt/conda/include']}
    1: blas_opt_info={'libraries': ['blas', 'cblas', 'lapack', 'pthread', 'blas', 'cblas', 'lapack', 'blas', 'cblas', 'lapack'], 'library_dirs': ['/opt/conda/lib'], 'define_macros': [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)], 'include_dirs': ['/opt/conda/include']}
    1: lapack_mkl_info={'libraries': ['blas', 'cblas', 'lapack', 'pthread', 'blas', 'cblas', 'lapack'], 'library_dirs': ['/opt/conda/lib'], 'define_macros': [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)], 'include_dirs': ['/opt/conda/include']}
    1: lapack_opt_info={'libraries': ['blas', 'cblas', 'lapack', 'pthread', 'blas', 'cblas', 'lapack', 'blas', 'cblas', 'lapack'], 'library_dirs': ['/opt/conda/lib'], 'define_macros': [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)], 'include_dirs': ['/opt/conda/include']}
       
    1: def get_info(name):
           g = globals()
           return g.get(name, g.get(name + "_info", {}))
       
    1: def show():
           for name,info_dict in globals().items():
               if name[0] == "_" or type(info_dict) is not type({}): continue
               print(name + ":")
               if not info_dict:
                   print("  NOT AVAILABLE")
               for k,v in info_dict.items():
                   v = str(v)
                   if k == "sources" and len(v) > 200:
                       v = v[:60] + " ...\n... " + v[-60:]
                   print("    %s = %s" % (k,v))
