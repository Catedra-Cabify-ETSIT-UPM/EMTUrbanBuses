       """
       Cyclical color scales are appropriate for continuous data that has a natural cyclical \
       structure, such as temporal data (hour of day, day of week, day of year, seasons) or
       complex numbers or other phase data.
    1: """
       
    1: from ._swatches import _swatches
       
       
    1: def swatches(template=None):
           return _swatches(__name__, globals(), template)
       
       
    1: swatches.__doc__ = _swatches.__doc__
       
       
    1: def swatches_cyclical(template=None):
           """
           Parameters
           ----------
           template : str or dict or plotly.graph_objects.layout.Template instance
               The figure template name or definition.
       
           Returns
           -------
           fig : graph_objects.Figure containing the displayed image
               A `Figure` object. This figure demonstrates the color scales and
               sequences in this module, as polar bar charts.
           """
           import plotly.graph_objects as go
           from plotly.subplots import make_subplots
           from plotly.express._core import apply_default_cascade
       
           args = dict(template=template)
           apply_default_cascade(args)
       
           rows = 2
           cols = 4
           scales = ["Twilight", "IceFire", "Edge", "Phase", "HSV", "mrybm", "mygbm"]
           fig = make_subplots(
               rows=rows,
               cols=cols,
               subplot_titles=scales,
               specs=[[{"type": "polar"}] * cols] * rows,
           )
       
           for i, scale in enumerate(scales):
               fig.add_trace(
                   go.Barpolar(
                       r=[1] * int(360 / 5),
                       theta=list(range(0, 360, 5)),
                       marker_color=list(range(0, 360, 5)),
                       marker_cmin=0,
                       marker_cmax=360,
                       marker_colorscale=scale,
                       name=scale,
                   ),
                   row=int(i / cols) + 1,
                   col=i % cols + 1,
               )
           fig.update_traces(width=5.2, marker_line_width=0, base=0.5, showlegend=False)
           fig.update_polars(angularaxis_visible=False, radialaxis_visible=False)
           fig.update_layout(title="plotly.colors.cyclical", template=args["template"])
           return fig
       
       
       Twilight = [
    1:     "#e2d9e2",
    1:     "#9ebbc9",
    1:     "#6785be",
    1:     "#5e43a5",
    1:     "#421257",
    1:     "#471340",
    1:     "#8e2c50",
    1:     "#ba6657",
    1:     "#ceac94",
    1:     "#e2d9e2",
       ]
       IceFire = [
    1:     "#000000",
    1:     "#001f4d",
    1:     "#003786",
    1:     "#0e58a8",
    1:     "#217eb8",
    1:     "#30a4ca",
    1:     "#54c8df",
    1:     "#9be4ef",
    1:     "#e1e9d1",
    1:     "#f3d573",
    1:     "#e7b000",
    1:     "#da8200",
    1:     "#c65400",
    1:     "#ac2301",
    1:     "#820000",
    1:     "#4c0000",
    1:     "#000000",
       ]
       Edge = [
    1:     "#313131",
    1:     "#3d019d",
    1:     "#3810dc",
    1:     "#2d47f9",
    1:     "#2593ff",
    1:     "#2adef6",
    1:     "#60fdfa",
    1:     "#aefdff",
    1:     "#f3f3f1",
    1:     "#fffda9",
    1:     "#fafd5b",
    1:     "#f7da29",
    1:     "#ff8e25",
    1:     "#f8432d",
    1:     "#d90d39",
    1:     "#97023d",
    1:     "#313131",
       ]
       Phase = [
    1:     "rgb(167, 119, 12)",
    1:     "rgb(197, 96, 51)",
    1:     "rgb(217, 67, 96)",
    1:     "rgb(221, 38, 163)",
    1:     "rgb(196, 59, 224)",
    1:     "rgb(153, 97, 244)",
    1:     "rgb(95, 127, 228)",
    1:     "rgb(40, 144, 183)",
    1:     "rgb(15, 151, 136)",
    1:     "rgb(39, 153, 79)",
    1:     "rgb(119, 141, 17)",
    1:     "rgb(167, 119, 12)",
       ]
       HSV = [
    1:     "#ff0000",
    1:     "#ffa700",
    1:     "#afff00",
    1:     "#08ff00",
    1:     "#00ff9f",
    1:     "#00b7ff",
    1:     "#0010ff",
    1:     "#9700ff",
    1:     "#ff00bf",
    1:     "#ff0000",
       ]
       mrybm = [
    1:     "#f884f7",
    1:     "#f968c4",
    1:     "#ea4388",
    1:     "#cf244b",
    1:     "#b51a15",
    1:     "#bd4304",
    1:     "#cc6904",
    1:     "#d58f04",
    1:     "#cfaa27",
    1:     "#a19f62",
    1:     "#588a93",
    1:     "#2269c4",
    1:     "#3e3ef0",
    1:     "#6b4ef9",
    1:     "#956bfa",
    1:     "#cd7dfe",
    1:     "#f884f7",
       ]
       mygbm = [
    1:     "#ef55f1",
    1:     "#fb84ce",
    1:     "#fbafa1",
    1:     "#fcd471",
    1:     "#f0ed35",
    1:     "#c6e516",
    1:     "#96d310",
    1:     "#61c10b",
    1:     "#31ac28",
    1:     "#439064",
    1:     "#3d719a",
    1:     "#284ec8",
    1:     "#2e21ea",
    1:     "#6324f5",
    1:     "#9139fa",
    1:     "#c543fa",
    1:     "#ef55f1",
       ]
       
       # Prefix variable names with _ so that they will not be added to the swatches
    1: _contents = dict(globals())
   19: for _k, _cols in _contents.items():
   18:     if _k.startswith("_") or _k.startswith("swatches") or _k.endswith("_r"):
               continue
    7:     globals()[_k + "_r"] = _cols[::-1]
