    1: """Python bindings for 0MQ."""
       
       # Copyright (C) PyZMQ Developers
       # Distributed under the terms of the Modified BSD License.
       
       # load bundled libzmq, if there is one:
    1: def _load_libzmq():
           """load bundled libzmq if there is one"""
    1:     import sys, ctypes, platform, os
    1:     dlopen = hasattr(sys, 'getdlopenflags') # unix-only
           # RTLD flags are added to os in Python 3
           # get values from os because ctypes values are WRONG on pypy
    1:     PYPY = platform.python_implementation().lower() == 'pypy'
           
    1:     if dlopen:
    1:         dlflags = sys.getdlopenflags()
               # set RTLD_GLOBAL, unset RTLD_LOCAL
    1:         flags = ctypes.RTLD_GLOBAL | dlflags
               # ctypes.RTLD_LOCAL is 0 on pypy, which is *wrong*
    1:         flags &= ~ getattr(os, 'RTLD_LOCAL', 4)
               # pypy on darwin needs RTLD_LAZY for some reason
    1:         if PYPY and sys.platform == 'darwin':
                   flags |= getattr(os, 'RTLD_LAZY', 1)
                   flags &= ~ getattr(os, 'RTLD_NOW', 2)
    1:         sys.setdlopenflags(flags)
    1:     try:
    1:         from . import libzmq
    1:     except ImportError:
    1:         pass
           else:
               # store libzmq as zmq._libzmq for backward-compat
               globals()['_libzmq'] = libzmq
               if PYPY:
                   # some versions of pypy (5.3 < ? < 5.8) needs explicit CDLL load for some reason,
                   # otherwise symbols won't be globally available
                   # do this unconditionally because it should be harmless (?)
                   ctypes.CDLL(libzmq.__file__, ctypes.RTLD_GLOBAL)
           finally:
    1:         if dlopen:
    1:             sys.setdlopenflags(dlflags)
       
    1: _load_libzmq()
       
       
       # zmq top-level imports
       
    1: from zmq import backend
    1: from zmq.backend import *
    1: from zmq import sugar
    1: from zmq.sugar import *
       
    1: def get_includes():
           """Return a list of directories to include for linking against pyzmq with cython."""
           from os.path import join, dirname, abspath, pardir, exists
           base = dirname(__file__)
           parent = abspath(join(base, pardir))
           includes = [ parent ] + [ join(parent, base, subdir) for subdir in ('utils',) ]
           if exists(join(parent, base, 'include')):
               includes.append(join(parent, base, 'include'))
           return includes
           
    1: def get_library_dirs():
           """Return a list of directories used to link against pyzmq's bundled libzmq."""
           from os.path import join, dirname, abspath, pardir
           base = dirname(__file__)
           parent = abspath(join(base, pardir))
           return [ join(parent, base) ]
       
    1: COPY_THRESHOLD = 65536
    1: __all__ = ['get_includes', 'COPY_THRESHOLD'] + sugar.__all__ + backend.__all__
