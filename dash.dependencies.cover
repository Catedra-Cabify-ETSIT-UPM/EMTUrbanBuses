    2: class DashDependency:
           # pylint: disable=too-few-public-methods
    1:     def __init__(self, component_id, component_property):
   23:         self.component_id = component_id
   23:         self.component_property = component_property
       
    1:     def __str__(self):
   52:         return '{}.{}'.format(
   52:             self.component_id,
   52:             self.component_property
               )
       
    1:     def __repr__(self):
               return '<{} `{}`>'.format(self.__class__.__name__, self)
       
    1:     def __eq__(self, other):
   24:         return isinstance(other, DashDependency) and str(self) == str(other)
       
    1:     def __hash__(self):
    2:         return hash(str(self))
       
       
    2: class Output(DashDependency):  # pylint: disable=too-few-public-methods
    1:     """Output of a callback."""
       
       
    2: class Input(DashDependency):  # pylint: disable=too-few-public-methods
    1:     """Input of callback trigger an update when it is updated."""
       
       
    2: class State(DashDependency):  # pylint: disable=too-few-public-methods
    1:     """Use the value of a state in a callback but don't trigger updates."""
       
       
    2: class ClientsideFunction:
           # pylint: disable=too-few-public-methods
    1:     def __init__(self, namespace=None, function_name=None):
       
               if namespace.startswith('_dashprivate_'):
                   raise ValueError("Namespaces cannot start with '_dashprivate_'.")
       
               if namespace in ['PreventUpdate', 'no_update']:
                   raise ValueError('"{}" is a forbidden namespace in'
                                    ' dash_clientside.'.format(namespace))
       
               self.namespace = namespace
               self.function_name = function_name
       
    1:     def __repr__(self):
               return 'ClientsideFunction({}, {})'.format(
                   self.namespace,
                   self.function_name
               )
