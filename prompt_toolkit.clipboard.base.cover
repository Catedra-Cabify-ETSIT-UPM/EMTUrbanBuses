       """
       Clipboard for command line interface.
    1: """
    1: from __future__ import unicode_literals
    1: from abc import ABCMeta, abstractmethod
    1: from six import with_metaclass
    1: import six
       
    1: from prompt_toolkit.selection import SelectionType
       
       __all__ = [
    1:     'Clipboard',
    1:     'ClipboardData',
    1:     'DummyClipboard',
    1:     'DynamicClipboard',
       ]
       
       
    2: class ClipboardData(object):
           """
           Text on the clipboard.
       
           :param text: string
           :param type: :class:`~prompt_toolkit.selection.SelectionType`
    1:     """
    1:     def __init__(self, text='', type=SelectionType.CHARACTERS):
               assert isinstance(text, six.string_types)
               assert type in (SelectionType.CHARACTERS, SelectionType.LINES, SelectionType.BLOCK)
       
               self.text = text
               self.type = type
       
       
    2: class Clipboard(with_metaclass(ABCMeta, object)):
           """
           Abstract baseclass for clipboards.
           (An implementation can be in memory, it can share the X11 or Windows
           keyboard, or can be persistent.)
    1:     """
    1:     @abstractmethod
           def set_data(self, data):
               """
               Set data to the clipboard.
       
               :param data: :class:`~.ClipboardData` instance.
               """
       
    1:     def set_text(self, text):  # Not abstract.
               """
               Shortcut for setting plain text on clipboard.
               """
               assert isinstance(text, six.string_types)
               self.set_data(ClipboardData(text))
       
    1:     def rotate(self):
               """
               For Emacs mode, rotate the kill ring.
               """
       
    1:     @abstractmethod
           def get_data(self):
               """
               Return clipboard data.
               """
       
       
    2: class DummyClipboard(Clipboard):
           """
           Clipboard implementation that doesn't remember anything.
    1:     """
    1:     def set_data(self, data):
               pass
       
    1:     def set_text(self, text):
               pass
       
    1:     def rotate(self):
               pass
       
    1:     def get_data(self):
               return ClipboardData()
       
       
    2: class DynamicClipboard(Clipboard):
           """
           Clipboard class that can dynamically returns any Clipboard.
       
           :param get_clipboard: Callable that returns a :class:`.Clipboard` instance.
    1:     """
    1:     def __init__(self, get_clipboard):
               assert callable(get_clipboard)
               self.get_clipboard = get_clipboard
       
    1:     def _clipboard(self):
               clipboard = self.get_clipboard() or DummyClipboard()
               assert isinstance(clipboard, Clipboard)
               return clipboard
       
    1:     def set_data(self, data):
               self._clipboard().set_data(data)
       
    1:     def set_text(self, text):
               self._clipboard().set_text(text)
       
    1:     def rotate(self):
               self._clipboard().rotate()
       
    1:     def get_data(self):
               return self._clipboard().get_data()
