    1: """Implementation of the DOM Level 3 'LS-Load' feature."""
       
    1: import copy
    1: import warnings
    1: import xml.dom
       
    1: from xml.dom.NodeFilter import NodeFilter
       
       
    1: __all__ = ["DOMBuilder", "DOMEntityResolver", "DOMInputSource"]
       
       
    2: class Options:
           """Features object that has variables set for each DOMBuilder feature.
       
           The DOMBuilder class uses an instance of this class to pass settings to
           the ExpatBuilder class.
    1:     """
       
           # Note that the DOMBuilder class in LoadSave constrains which of these
           # values can be set using the DOM Level 3 LoadSave feature.
       
    1:     namespaces = 1
    1:     namespace_declarations = True
    1:     validation = False
    1:     external_parameter_entities = True
    1:     external_general_entities = True
    1:     external_dtd_subset = True
    1:     validate_if_schema = False
    1:     validate = False
    1:     datatype_normalization = False
    1:     create_entity_ref_nodes = True
    1:     entities = True
    1:     whitespace_in_element_content = True
    1:     cdata_sections = True
    1:     comments = True
    1:     charset_overrides_xml_encoding = True
    1:     infoset = False
    1:     supported_mediatypes_only = False
       
    1:     errorHandler = None
    1:     filter = None
       
       
    2: class DOMBuilder:
    1:     entityResolver = None
    1:     errorHandler = None
    1:     filter = None
       
    1:     ACTION_REPLACE = 1
    1:     ACTION_APPEND_AS_CHILDREN = 2
    1:     ACTION_INSERT_AFTER = 3
    1:     ACTION_INSERT_BEFORE = 4
       
    1:     _legal_actions = (ACTION_REPLACE, ACTION_APPEND_AS_CHILDREN,
    1:                       ACTION_INSERT_AFTER, ACTION_INSERT_BEFORE)
       
    1:     def __init__(self):
               self._options = Options()
       
    1:     def _get_entityResolver(self):
               return self.entityResolver
    1:     def _set_entityResolver(self, entityResolver):
               self.entityResolver = entityResolver
       
    1:     def _get_errorHandler(self):
               return self.errorHandler
    1:     def _set_errorHandler(self, errorHandler):
               self.errorHandler = errorHandler
       
    1:     def _get_filter(self):
               return self.filter
    1:     def _set_filter(self, filter):
               self.filter = filter
       
    1:     def setFeature(self, name, state):
               if self.supportsFeature(name):
                   state = state and 1 or 0
                   try:
                       settings = self._settings[(_name_xform(name), state)]
                   except KeyError:
                       raise xml.dom.NotSupportedErr(
                           "unsupported feature: %r" % (name,)) from None
                   else:
                       for name, value in settings:
                           setattr(self._options, name, value)
               else:
                   raise xml.dom.NotFoundErr("unknown feature: " + repr(name))
       
    1:     def supportsFeature(self, name):
               return hasattr(self._options, _name_xform(name))
       
    1:     def canSetFeature(self, name, state):
               key = (_name_xform(name), state and 1 or 0)
               return key in self._settings
       
           # This dictionary maps from (feature,value) to a list of
           # (option,value) pairs that should be set on the Options object.
           # If a (feature,value) setting is not in this dictionary, it is
           # not supported by the DOMBuilder.
           #
           _settings = {
               ("namespace_declarations", 0): [
    1:             ("namespace_declarations", 0)],
               ("namespace_declarations", 1): [
    1:             ("namespace_declarations", 1)],
               ("validation", 0): [
    1:             ("validation", 0)],
               ("external_general_entities", 0): [
    1:             ("external_general_entities", 0)],
               ("external_general_entities", 1): [
    1:             ("external_general_entities", 1)],
               ("external_parameter_entities", 0): [
    1:             ("external_parameter_entities", 0)],
               ("external_parameter_entities", 1): [
    1:             ("external_parameter_entities", 1)],
               ("validate_if_schema", 0): [
    1:             ("validate_if_schema", 0)],
               ("create_entity_ref_nodes", 0): [
    1:             ("create_entity_ref_nodes", 0)],
               ("create_entity_ref_nodes", 1): [
    1:             ("create_entity_ref_nodes", 1)],
               ("entities", 0): [
    1:             ("create_entity_ref_nodes", 0),
    1:             ("entities", 0)],
               ("entities", 1): [
    1:             ("entities", 1)],
               ("whitespace_in_element_content", 0): [
    1:             ("whitespace_in_element_content", 0)],
               ("whitespace_in_element_content", 1): [
    1:             ("whitespace_in_element_content", 1)],
               ("cdata_sections", 0): [
    1:             ("cdata_sections", 0)],
               ("cdata_sections", 1): [
    1:             ("cdata_sections", 1)],
               ("comments", 0): [
    1:             ("comments", 0)],
               ("comments", 1): [
    1:             ("comments", 1)],
               ("charset_overrides_xml_encoding", 0): [
    1:             ("charset_overrides_xml_encoding", 0)],
               ("charset_overrides_xml_encoding", 1): [
    1:             ("charset_overrides_xml_encoding", 1)],
    1:         ("infoset", 0): [],
               ("infoset", 1): [
    1:             ("namespace_declarations", 0),
    1:             ("validate_if_schema", 0),
    1:             ("create_entity_ref_nodes", 0),
    1:             ("entities", 0),
    1:             ("cdata_sections", 0),
    1:             ("datatype_normalization", 1),
    1:             ("whitespace_in_element_content", 1),
    1:             ("comments", 1),
    1:             ("charset_overrides_xml_encoding", 1)],
               ("supported_mediatypes_only", 0): [
    1:             ("supported_mediatypes_only", 0)],
               ("namespaces", 0): [
    1:             ("namespaces", 0)],
               ("namespaces", 1): [
    1:             ("namespaces", 1)],
           }
       
    1:     def getFeature(self, name):
               xname = _name_xform(name)
               try:
                   return getattr(self._options, xname)
               except AttributeError:
                   if name == "infoset":
                       options = self._options
                       return (options.datatype_normalization
                               and options.whitespace_in_element_content
                               and options.comments
                               and options.charset_overrides_xml_encoding
                               and not (options.namespace_declarations
                                        or options.validate_if_schema
                                        or options.create_entity_ref_nodes
                                        or options.entities
                                        or options.cdata_sections))
                   raise xml.dom.NotFoundErr("feature %s not known" % repr(name))
       
    1:     def parseURI(self, uri):
               if self.entityResolver:
                   input = self.entityResolver.resolveEntity(None, uri)
               else:
                   input = DOMEntityResolver().resolveEntity(None, uri)
               return self.parse(input)
       
    1:     def parse(self, input):
               options = copy.copy(self._options)
               options.filter = self.filter
               options.errorHandler = self.errorHandler
               fp = input.byteStream
               if fp is None and options.systemId:
                   import urllib.request
                   fp = urllib.request.urlopen(input.systemId)
               return self._parse_bytestream(fp, options)
       
    1:     def parseWithContext(self, input, cnode, action):
               if action not in self._legal_actions:
                   raise ValueError("not a legal action")
               raise NotImplementedError("Haven't written this yet...")
       
    1:     def _parse_bytestream(self, stream, options):
               import xml.dom.expatbuilder
               builder = xml.dom.expatbuilder.makeBuilder(options)
               return builder.parseFile(stream)
       
       
    1: def _name_xform(name):
           return name.lower().replace('-', '_')
       
       
    2: class DOMEntityResolver(object):
    1:     __slots__ = '_opener',
       
    1:     def resolveEntity(self, publicId, systemId):
               assert systemId is not None
               source = DOMInputSource()
               source.publicId = publicId
               source.systemId = systemId
               source.byteStream = self._get_opener().open(systemId)
       
               # determine the encoding if the transport provided it
               source.encoding = self._guess_media_encoding(source)
       
               # determine the base URI is we can
               import posixpath, urllib.parse
               parts = urllib.parse.urlparse(systemId)
               scheme, netloc, path, params, query, fragment = parts
               # XXX should we check the scheme here as well?
               if path and not path.endswith("/"):
                   path = posixpath.dirname(path) + "/"
                   parts = scheme, netloc, path, params, query, fragment
                   source.baseURI = urllib.parse.urlunparse(parts)
       
               return source
       
    1:     def _get_opener(self):
               try:
                   return self._opener
               except AttributeError:
                   self._opener = self._create_opener()
                   return self._opener
       
    1:     def _create_opener(self):
               import urllib.request
               return urllib.request.build_opener()
       
    1:     def _guess_media_encoding(self, source):
               info = source.byteStream.info()
               if "Content-Type" in info:
                   for param in info.getplist():
                       if param.startswith("charset="):
                           return param.split("=", 1)[1].lower()
       
       
    2: class DOMInputSource(object):
    1:     __slots__ = ('byteStream', 'characterStream', 'stringData',
                        'encoding', 'publicId', 'systemId', 'baseURI')
       
    1:     def __init__(self):
               self.byteStream = None
               self.characterStream = None
               self.stringData = None
               self.encoding = None
               self.publicId = None
               self.systemId = None
               self.baseURI = None
       
    1:     def _get_byteStream(self):
               return self.byteStream
    1:     def _set_byteStream(self, byteStream):
               self.byteStream = byteStream
       
    1:     def _get_characterStream(self):
               return self.characterStream
    1:     def _set_characterStream(self, characterStream):
               self.characterStream = characterStream
       
    1:     def _get_stringData(self):
               return self.stringData
    1:     def _set_stringData(self, data):
               self.stringData = data
       
    1:     def _get_encoding(self):
               return self.encoding
    1:     def _set_encoding(self, encoding):
               self.encoding = encoding
       
    1:     def _get_publicId(self):
               return self.publicId
    1:     def _set_publicId(self, publicId):
               self.publicId = publicId
       
    1:     def _get_systemId(self):
               return self.systemId
    1:     def _set_systemId(self, systemId):
               self.systemId = systemId
       
    1:     def _get_baseURI(self):
               return self.baseURI
    1:     def _set_baseURI(self, uri):
               self.baseURI = uri
       
       
    2: class DOMBuilderFilter:
           """Element filter which can be used to tailor construction of
           a DOM instance.
    1:     """
       
           # There's really no need for this class; concrete implementations
           # should just implement the endElement() and startElement()
           # methods as appropriate.  Using this makes it easy to only
           # implement one of them.
       
    1:     FILTER_ACCEPT = 1
    1:     FILTER_REJECT = 2
    1:     FILTER_SKIP = 3
    1:     FILTER_INTERRUPT = 4
       
    1:     whatToShow = NodeFilter.SHOW_ALL
       
    1:     def _get_whatToShow(self):
               return self.whatToShow
       
    1:     def acceptNode(self, element):
               return self.FILTER_ACCEPT
       
    1:     def startContainer(self, element):
               return self.FILTER_ACCEPT
       
    1: del NodeFilter
       
       
    2: class DocumentLS:
    1:     """Mixin to create documents that conform to the load/save spec."""
       
    1:     async_ = False
       
    1:     def _get_async(self):
               return False
       
    1:     def _set_async(self, flag):
               if flag:
                   raise xml.dom.NotSupportedErr(
                       "asynchronous document loading is not supported")
       
    1:     def abort(self):
               # What does it mean to "clear" a document?  Does the
               # documentElement disappear?
               raise NotImplementedError(
                   "haven't figured out what this means yet")
       
    1:     def load(self, uri):
               raise NotImplementedError("haven't written this yet")
       
    1:     def loadXML(self, source):
               raise NotImplementedError("haven't written this yet")
       
    1:     def saveXML(self, snode):
               if snode is None:
                   snode = self
               elif snode.ownerDocument is not self:
                   raise xml.dom.WrongDocumentErr()
               return snode.toxml()
       
       
    2: class DOMImplementationLS:
    1:     MODE_SYNCHRONOUS = 1
    1:     MODE_ASYNCHRONOUS = 2
       
    1:     def createDOMBuilder(self, mode, schemaType):
               if schemaType is not None:
                   raise xml.dom.NotSupportedErr(
                       "schemaType not yet supported")
               if mode == self.MODE_SYNCHRONOUS:
                   return DOMBuilder()
               if mode == self.MODE_ASYNCHRONOUS:
                   raise xml.dom.NotSupportedErr(
                       "asynchronous builders are not supported")
               raise ValueError("unknown value for mode")
       
    1:     def createDOMWriter(self):
               raise NotImplementedError(
                   "the writer interface hasn't been written yet!")
       
    1:     def createDOMInputSource(self):
               return DOMInputSource()
