    1: from contextlib import contextmanager
       
    1: from parso._compatibility import use_metaclass
       
       
    2: class _NormalizerMeta(type):
    1:     def __new__(cls, name, bases, dct):
    4:         new_cls = type.__new__(cls, name, bases, dct)
    4:         new_cls.rule_value_classes = {}
    4:         new_cls.rule_type_classes = {}
    4:         return new_cls
       
       
    2: class Normalizer(use_metaclass(_NormalizerMeta)):
    1:     def __init__(self, grammar, config):
               self.grammar = grammar
               self._config = config
               self.issues = []
       
               self._rule_type_instances = self._instantiate_rules('rule_type_classes')
               self._rule_value_instances = self._instantiate_rules('rule_value_classes')
       
    1:     def _instantiate_rules(self, attr):
               dct = {}
               for base in type(self).mro():
                   rules_map = getattr(base, attr, {})
                   for type_, rule_classes in rules_map.items():
                       new = [rule_cls(self) for rule_cls in rule_classes]
                       dct.setdefault(type_, []).extend(new)
               return dct
       
    1:     def walk(self, node):
               self.initialize(node)
               value = self.visit(node)
               self.finalize()
               return value
       
    1:     def visit(self, node):
               try:
                   children = node.children
               except AttributeError:
                   return self.visit_leaf(node)
               else:
                   with self.visit_node(node):
                       return ''.join(self.visit(child) for child in children)
       
    1:     @contextmanager
           def visit_node(self, node):
               self._check_type_rules(node)
               yield
       
    1:     def _check_type_rules(self, node):
               for rule in self._rule_type_instances.get(node.type, []):
                   rule.feed_node(node)
       
    1:     def visit_leaf(self, leaf):
               self._check_type_rules(leaf)
       
               for rule in self._rule_value_instances.get(leaf.value, []):
                   rule.feed_node(leaf)
       
               return leaf.prefix + leaf.value
       
    1:     def initialize(self, node):
               pass
       
    1:     def finalize(self):
               pass
       
    1:     def add_issue(self, node, code, message):
               issue = Issue(node, code, message)
               if issue not in self.issues:
                   self.issues.append(issue)
               return True
       
    1:     @classmethod
           def register_rule(cls, **kwargs):
               """
               Use it as a class decorator::
       
                   normalizer = Normalizer('grammar', 'config')
                   @normalizer.register_rule(value='foo')
                   class MyRule(Rule):
                       error_code = 42
               """
   32:         return cls._register_rule(**kwargs)
       
    1:     @classmethod
    1:     def _register_rule(cls, value=None, values=(), type=None, types=()):
   32:         values = list(values)
   32:         types = list(types)
   32:         if value is not None:
    8:             values.append(value)
   32:         if type is not None:
   23:             types.append(type)
       
   32:         if not values and not types:
                   raise ValueError("You must register at least something.")
       
   32:         def decorator(rule_cls):
   40:             for v in values:
    8:                 cls.rule_value_classes.setdefault(v, []).append(rule_cls)
   58:             for t in types:
   26:                 cls.rule_type_classes.setdefault(t, []).append(rule_cls)
   32:             return rule_cls
       
   32:         return decorator
       
       
    2: class NormalizerConfig(object):
    1:     normalizer_class = Normalizer
       
    1:     def create_normalizer(self, grammar):
               if self.normalizer_class is None:
                   return None
       
               return self.normalizer_class(grammar, self)
       
       
    2: class Issue(object):
    1:     def __init__(self, node, code, message):
               self._node = node
               self.code = code
               """
               An integer code that stands for the type of error.
               """
               self.message = message
               """
               A message (string) for the issue.
               """
               self.start_pos = node.start_pos
               """
               The start position position of the error as a tuple (line, column). As
               always in |parso| the first line is 1 and the first column 0.
               """
       
    1:     def __eq__(self, other):
               return self.start_pos == other.start_pos and self.code == other.code
       
    1:     def __ne__(self, other):
               return not self.__eq__(other)
       
    1:     def __hash__(self):
               return hash((self.code, self.start_pos))
       
    1:     def __repr__(self):
               return '<%s: %s>' % (self.__class__.__name__, self.code)
       
       
    2: class Rule(object):
    1:     code = None
    1:     message = None
       
    1:     def __init__(self, normalizer):
               self._normalizer = normalizer
       
    1:     def is_issue(self, node):
               raise NotImplementedError()
       
    1:     def get_node(self, node):
               return node
       
    1:     def _get_message(self, message):
               if message is None:
                   message = self.message
                   if message is None:
                       raise ValueError("The message on the class is not set.")
               return message
       
    1:     def add_issue(self, node, code=None, message=None):
               if code is None:
                   code = self.code
                   if code is None:
                       raise ValueError("The error code on the class is not set.")
       
               message = self._get_message(message)
       
               self._normalizer.add_issue(node, code, message)
       
    1:     def feed_node(self, node):
               if self.is_issue(node):
                   issue_node = self.get_node(node)
                   self.add_issue(issue_node)
