    1: from datetime import timedelta
    1: import weakref
    1: from collections import OrderedDict
       
       
    2: class _TzSingleton(type):
    1:     def __init__(cls, *args, **kwargs):
    1:         cls.__instance = None
    1:         super(_TzSingleton, cls).__init__(*args, **kwargs)
       
    1:     def __call__(cls):
    1:         if cls.__instance is None:
    1:             cls.__instance = super(_TzSingleton, cls).__call__()
    1:         return cls.__instance
       
       
    2: class _TzFactory(type):
    1:     def instance(cls, *args, **kwargs):
               """Alternate constructor that returns a fresh instance"""
               return type.__call__(cls, *args, **kwargs)
       
       
    2: class _TzOffsetFactory(_TzFactory):
    1:     def __init__(cls, *args, **kwargs):
    1:         cls.__instances = weakref.WeakValueDictionary()
    1:         cls.__strong_cache = OrderedDict()
    1:         cls.__strong_cache_size = 8
       
    1:     def __call__(cls, name, offset):
               if isinstance(offset, timedelta):
                   key = (name, offset.total_seconds())
               else:
                   key = (name, offset)
       
               instance = cls.__instances.get(key, None)
               if instance is None:
                   instance = cls.__instances.setdefault(key,
                                                         cls.instance(name, offset))
       
               cls.__strong_cache[key] = cls.__strong_cache.pop(key, instance)
       
               # Remove an item if the strong cache is overpopulated
               # TODO: Maybe this should be under a lock?
               if len(cls.__strong_cache) > cls.__strong_cache_size:
                   cls.__strong_cache.popitem(last=False)
       
               return instance
       
       
    2: class _TzStrFactory(_TzFactory):
    1:     def __init__(cls, *args, **kwargs):
    1:         cls.__instances = weakref.WeakValueDictionary()
    1:         cls.__strong_cache = OrderedDict()
    1:         cls.__strong_cache_size = 8
       
    1:     def __call__(cls, s, posix_offset=False):
               key = (s, posix_offset)
               instance = cls.__instances.get(key, None)
       
               if instance is None:
                   instance = cls.__instances.setdefault(key,
                       cls.instance(s, posix_offset))
       
               cls.__strong_cache[key] = cls.__strong_cache.pop(key, instance)
       
       
               # Remove an item if the strong cache is overpopulated
               # TODO: Maybe this should be under a lock?
               if len(cls.__strong_cache) > cls.__strong_cache_size:
                   cls.__strong_cache.popitem(last=False)
       
               return instance
       
