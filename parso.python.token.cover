    1: from __future__ import absolute_import
       
       
    2: class TokenType(object):
    1:     def __init__(self, name, contains_syntax=False):
   13:         self.name = name
   13:         self.contains_syntax = contains_syntax
       
    1:     def __repr__(self):
               return '%s(%s)' % (self.__class__.__name__, self.name)
       
       
    2: class TokenTypes(object):
           """
           Basically an enum, but Python 2 doesn't have enums in the standard library.
    1:     """
    1:     def __init__(self, names, contains_syntax):
   14:         for name in names:
   13:             setattr(self, name, TokenType(name, contains_syntax=name in contains_syntax))
       
       
    1: PythonTokenTypes = TokenTypes((
    1:     'STRING', 'NUMBER', 'NAME', 'ERRORTOKEN', 'NEWLINE', 'INDENT', 'DEDENT',
           'ERROR_DEDENT', 'FSTRING_STRING', 'FSTRING_START', 'FSTRING_END', 'OP',
           'ENDMARKER'),
    1:     contains_syntax=('NAME', 'OP'),
       )
