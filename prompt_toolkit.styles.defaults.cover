       """
       The default styling.
    1: """
    1: from __future__ import unicode_literals, absolute_import
    1: from .style import Style, merge_styles
    1: from .base import ANSI_COLOR_NAMES
    1: from .named_colors import NAMED_COLORS
    1: from prompt_toolkit.cache import memoized
       
       __all__ = [
    1:     'default_ui_style',
    1:     'default_pygments_style',
       ]
       
       #: Default styling. Mapping from classnames to their style definition.
       PROMPT_TOOLKIT_STYLE = [
           # Highlighting of search matches in document.
    1:     ('search',                             'bg:ansibrightyellow ansiblack'),
    1:     ('search.current',                     ''),
       
           # Incremental search.
    1:     ('incsearch',                          ''),
    1:     ('incsearch.current',                  'reverse'),
       
           # Highlighting of select text in document.
    1:     ('selected',                                'reverse'),
       
    1:     ('cursor-column',                           'bg:#dddddd'),
    1:     ('cursor-line',                             'underline'),
    1:     ('color-column',                            'bg:#ccaacc'),
       
           # Highlighting of matching brackets.
    1:     ('matching-bracket',                        ''),
    1:     ('matching-bracket.other',                  '#000000 bg:#aacccc'),
    1:     ('matching-bracket.cursor',                 '#ff8888 bg:#880000'),
       
           # Styling of other cursors, in case of block editing.
    1:     ('multiple-cursors',                        '#000000 bg:#ccccaa'),
       
           # Line numbers.
    1:     ('line-number',                             '#888888'),
    1:     ('line-number.current',                     'bold'),
    1:     ('tilde',                                   '#8888ff'),
       
           # Default prompt.
    1:     ('prompt',                                  ''),
    1:     ('prompt.arg',                              'noinherit'),
    1:     ('prompt.arg.text',                         ''),
    1:     ('prompt.search',                           'noinherit'),
    1:     ('prompt.search.text',                      ''),
       
           # Search toolbar.
    1:     ('search-toolbar',                          'bold'),
    1:     ('search-toolbar.text',                     'nobold'),
       
           # System toolbar
    1:     ('system-toolbar',                          'bold'),
    1:     ('system-toolbar.text',                     'nobold'),
       
           # "arg" toolbar.
    1:     ('arg-toolbar',                             'bold'),
    1:     ('arg-toolbar.text',                        'nobold'),
       
           # Validation toolbar.
    1:     ('validation-toolbar',                      'bg:#550000 #ffffff'),
    1:     ('window-too-small',                        'bg:#550000 #ffffff'),
       
           # Completions toolbar.
    1:     ('completion-toolbar',                     'bg:#bbbbbb #000000'),
    1:     ('completion-toolbar.arrow',               'bg:#bbbbbb #000000 bold'),
    1:     ('completion-toolbar.completion',          'bg:#bbbbbb #000000'),
    1:     ('completion-toolbar.completion.current',  'bg:#444444 #ffffff'),
       
           # Completions menu.
    1:     ('completion-menu',                         'bg:#bbbbbb #000000'),
    1:     ('completion-menu.completion',              ''),
    1:     ('completion-menu.completion.current',      'bg:#888888 #ffffff'),
    1:     ('completion-menu.meta.completion',         'bg:#999999 #000000'),
    1:     ('completion-menu.meta.completion.current', 'bg:#aaaaaa #000000'),
    1:     ('completion-menu.multi-column-meta',       'bg:#aaaaaa #000000'),
       
           # Fuzzy matches in completion menu (for FuzzyCompleter).
    1:     ('completion-menu.completion fuzzymatch.outside',          'fg:#444444'),
    1:     ('completion-menu.completion fuzzymatch.inside',           'bold'),
    1:     ('completion-menu.completion fuzzymatch.inside.character', 'underline'),
    1:     ('completion-menu.completion.current fuzzymatch.outside',  'fg:default'),
    1:     ('completion-menu.completion.current fuzzymatch.inside',   'nobold'),
       
           # Styling of readline-like completions.
    1:     ('readline-like-completions',                                        ''),
    1:     ('readline-like-completions.completion',                             ''),
    1:     ('readline-like-completions.completion fuzzymatch.outside',          '#888888'),
    1:     ('readline-like-completions.completion fuzzymatch.inside',           ''),
    1:     ('readline-like-completions.completion fuzzymatch.inside.character', 'underline'),
       
           # Scrollbars.
    1:     ('scrollbar.background',                     'bg:#aaaaaa'),
    1:     ('scrollbar.button',                         'bg:#444444'),
    1:     ('scrollbar.arrow',                          'noinherit bold'),
       
           # Start/end of scrollbars. Adding 'underline' here provides a nice little
           # detail to the progress bar, but it doesn't look good on all terminals.
           # ('scrollbar.start',                          'underline #ffffff'),
           # ('scrollbar.end',                            'underline #000000'),
       
           # Auto suggestion text.
    1:     ('auto-suggestion',                         '#666666'),
       
           # Trailing whitespace and tabs.
    1:     ('trailing-whitespace',                     '#999999'),
    1:     ('tab',                                     '#999999'),
       
           # When Control-C/D has been pressed. Grayed.
    1:     ('aborting',  '#888888 bg:default noreverse noitalic nounderline noblink'),
    1:     ('exiting',   '#888888 bg:default noreverse noitalic nounderline noblink'),
       
           # Entering a Vi digraph.
    1:     ('digraph',                                 '#4444ff'),
       
           # Control characters, like ^C, ^X.
    1:     ('control-character',                       'ansiblue'),
       
           # Non-breaking space.
    1:     ('nbsp',                                    'underline ansiyellow'),
       
           # Default styling of HTML elements.
    1:     ('i',                                       'italic'),
    1:     ('u',                                       'underline'),
    1:     ('b',                                       'bold'),
    1:     ('em',                                      'italic'),
    1:     ('strong',                                  'bold'),
    1:     ('hidden',                                  'hidden'),
       
           # It should be possible to use the style names in HTML.
           # <reverse>...</reverse>  or <noreverse>...</noreverse>.
    1:     ('italic',                                  'italic'),
    1:     ('underline',                               'underline'),
    1:     ('bold',                                    'bold'),
    1:     ('reverse',                                 'reverse'),
    1:     ('noitalic',                                'noitalic'),
    1:     ('nounderline',                             'nounderline'),
    1:     ('nobold',                                  'nobold'),
    1:     ('noreverse',                               'noreverse'),
       
           # Prompt bottom toolbar
    1:     ('bottom-toolbar',                          'reverse'),
       ]
       
       
       # Style that will turn for instance the class 'red' into 'red'.
       COLORS_STYLE = [
   19:     (name, 'fg:' + name) for name in ANSI_COLOR_NAMES
       ] + [
  150:     (name.lower(), 'fg:' + name) for name in NAMED_COLORS
       ]
       
       
       WIDGETS_STYLE = [
           # Dialog windows.
    1:     ('dialog',                                  'bg:#4444ff'),
    1:     ('dialog.body',                             'bg:#ffffff #000000'),
    1:     ('dialog.body text-area',                    'bg:#cccccc'),
    1:     ('dialog.body text-area last-line',          'underline'),
       
    1:     ('dialog frame.label',                      '#ff0000 bold'),
       
           # Scrollbars in dialogs.
    1:     ('dialog.body scrollbar.background',        ''),
    1:     ('dialog.body scrollbar.button',            'bg:#000000'),
    1:     ('dialog.body scrollbar.arrow',             ''),
    1:     ('dialog.body scrollbar.start',             'nounderline'),
    1:     ('dialog.body scrollbar.end',               'nounderline'),
       
           # Buttons.
    1:     ('button',                                  ''),
    1:     ('button.arrow',                            'bold'),
    1:     ('button.focused',                          'bg:#aa0000 #ffffff'),
       
           # Menu bars.
    1:     ('menu-bar',                                'bg:#aaaaaa #000000'),
    1:     ('menu-bar.selected-item',                  'bg:#ffffff #000000'),
    1:     ('menu',                                    'bg:#888888 #ffffff'),
    1:     ('menu.border',                             '#aaaaaa'),
    1:     ('menu.border shadow',                      '#444444'),
       
           # Shadows.
    1:     ('dialog shadow',                           'bg:#000088'),
    1:     ('dialog.body shadow',                      'bg:#aaaaaa'),
       
    1:     ('progress-bar',                             'bg:#000088'),
    1:     ('progress-bar.used',                        'bg:#ff0000'),
       ]
       
       
       # The default Pygments style, include this by default in case a Pygments lexer
       # is used.
       PYGMENTS_DEFAULT_STYLE = {
    1:     'pygments.whitespace':                "#bbbbbb",
    1:     'pygments.comment':                   "italic #408080",
    1:     'pygments.comment.preproc':           "noitalic #bc7a00",
       
    1:     'pygments.keyword':                   "bold #008000",
    1:     'pygments.keyword.pseudo':            "nobold",
    1:     'pygments.keyword.type':              "nobold #b00040",
       
    1:     'pygments.operator':                  "#666666",
    1:     'pygments.operator.word':             "bold #aa22ff",
       
    1:     'pygments.name.builtin':              "#008000",
    1:     'pygments.name.function':             "#0000ff",
    1:     'pygments.name.class':                "bold #0000ff",
    1:     'pygments.name.namespace':            "bold #0000ff",
    1:     'pygments.name.exception':            "bold #d2413a",
    1:     'pygments.name.variable':             "#19177c",
    1:     'pygments.name.constant':             "#880000",
    1:     'pygments.name.label':                "#a0a000",
    1:     'pygments.name.entity':               "bold #999999",
    1:     'pygments.name.attribute':            "#7d9029",
    1:     'pygments.name.tag':                  "bold #008000",
    1:     'pygments.name.decorator':            "#aa22ff",
       
           # Note: In Pygments, Token.String is an alias for Token.Literal.String,
           #       and Token.Number as an alias for Token.Literal.Number.
    1:     'pygments.literal.string':            "#ba2121",
    1:     'pygments.literal.string.doc':        "italic",
    1:     'pygments.literal.string.interpol':   "bold #bb6688",
    1:     'pygments.literal.string.escape':     "bold #bb6622",
    1:     'pygments.literal.string.regex':      "#bb6688",
    1:     'pygments.literal.string.symbol':     "#19177c",
    1:     'pygments.literal.string.other':      "#008000",
    1:     'pygments.literal.number':            "#666666",
       
    1:     'pygments.generic.heading':           "bold #000080",
    1:     'pygments.generic.subheading':        "bold #800080",
    1:     'pygments.generic.deleted':           "#a00000",
    1:     'pygments.generic.inserted':          "#00a000",
    1:     'pygments.generic.error':             "#ff0000",
    1:     'pygments.generic.emph':              "italic",
    1:     'pygments.generic.strong':            "bold",
    1:     'pygments.generic.prompt':            "bold #000080",
    1:     'pygments.generic.output':            "#888",
    1:     'pygments.generic.traceback':         "#04d",
       
    1:     'pygments.error':                     "border:#ff0000",
       }
       
       
    1: @memoized()
       def default_ui_style():
           """
           Create a default `Style` object.
           """
           return merge_styles([
               Style(PROMPT_TOOLKIT_STYLE),
               Style(COLORS_STYLE),
               Style(WIDGETS_STYLE),
           ])
       
       
    1: @memoized()
       def default_pygments_style():
           """
           Create a `Style` object that contains the default Pygments style.
           """
           return Style.from_dict(PYGMENTS_DEFAULT_STYLE)
