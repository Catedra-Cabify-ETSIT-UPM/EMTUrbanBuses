       # -*- coding: utf-8 -*-
       """
       Color schemes for exception handling code in IPython.
    1: """
       
    1: import os
    1: import warnings
       
       #*****************************************************************************
       #       Copyright (C) 2005-2006 Fernando Perez <fperez@colorado.edu>
       #
       #  Distributed under the terms of the BSD License.  The full license is in
       #  the file COPYING, distributed as part of this software.
       #*****************************************************************************
       
    1: from IPython.utils.coloransi import ColorSchemeTable, TermColors, ColorScheme
       
    1: def exception_colors():
           """Return a color table with fields for exception reporting.
       
           The table is an instance of ColorSchemeTable with schemes added for
           'Neutral', 'Linux', 'LightBG' and 'NoColor' and fields for exception handling filled
           in.
       
           Examples:
       
           >>> ec = exception_colors()
           >>> ec.active_scheme_name
           ''
           >>> print(ec.active_colors)
           None
       
           Now we activate a color scheme:
           >>> ec.set_active_scheme('NoColor')
           >>> ec.active_scheme_name
           'NoColor'
           >>> sorted(ec.active_colors.keys())
           ['Normal', 'caret', 'em', 'excName', 'filename', 'filenameEm', 'line',
           'lineno', 'linenoEm', 'name', 'nameEm', 'normalEm', 'topline', 'vName',
           'val', 'valEm']
           """
       
    1:     ex_colors = ColorSchemeTable()
       
           # Populate it with color schemes
    1:     C = TermColors # shorthand and local lookup
    1:     ex_colors.add_scheme(ColorScheme(
    1:         'NoColor',
               # The color to be used for the top line
    1:         topline = C.NoColor,
       
               # The colors to be used in the traceback
    1:         filename = C.NoColor,
    1:         lineno = C.NoColor,
    1:         name = C.NoColor,
    1:         vName = C.NoColor,
    1:         val = C.NoColor,
    1:         em = C.NoColor,
       
               # Emphasized colors for the last frame of the traceback
    1:         normalEm = C.NoColor,
    1:         filenameEm = C.NoColor,
    1:         linenoEm = C.NoColor,
    1:         nameEm = C.NoColor,
    1:         valEm = C.NoColor,
       
               # Colors for printing the exception
    1:         excName = C.NoColor,
    1:         line = C.NoColor,
    1:         caret = C.NoColor,
    1:         Normal = C.NoColor
               ))
       
           # make some schemes as instances so we can copy them for modification easily
    1:     ex_colors.add_scheme(ColorScheme(
    1:         'Linux',
               # The color to be used for the top line
    1:         topline = C.LightRed,
       
               # The colors to be used in the traceback
    1:         filename = C.Green,
    1:         lineno = C.Green,
    1:         name = C.Purple,
    1:         vName = C.Cyan,
    1:         val = C.Green,
    1:         em = C.LightCyan,
       
               # Emphasized colors for the last frame of the traceback
    1:         normalEm = C.LightCyan,
    1:         filenameEm = C.LightGreen,
    1:         linenoEm = C.LightGreen,
    1:         nameEm = C.LightPurple,
    1:         valEm = C.LightBlue,
       
               # Colors for printing the exception
    1:         excName = C.LightRed,
    1:         line = C.Yellow,
    1:         caret = C.White,
    1:         Normal = C.Normal
               ))
       
           # For light backgrounds, swap dark/light colors
    1:     ex_colors.add_scheme(ColorScheme(
    1:         'LightBG',
               # The color to be used for the top line
    1:         topline = C.Red,
       
               # The colors to be used in the traceback
    1:         filename = C.LightGreen,
    1:         lineno = C.LightGreen,
    1:         name = C.LightPurple,
    1:         vName = C.Cyan,
    1:         val = C.LightGreen,
    1:         em = C.Cyan,
       
               # Emphasized colors for the last frame of the traceback
    1:         normalEm = C.Cyan,
    1:         filenameEm = C.Green,
    1:         linenoEm = C.Green,
    1:         nameEm = C.Purple,
    1:         valEm = C.Blue,
       
               # Colors for printing the exception
    1:         excName = C.Red,
               #line = C.Brown,  # brown often is displayed as yellow
    1:         line = C.Red,
    1:         caret = C.Normal,
    1:         Normal = C.Normal,
               ))
       
    1:     ex_colors.add_scheme(ColorScheme(
    1:         'Neutral',
               # The color to be used for the top line
    1:         topline = C.Red,
       
               # The colors to be used in the traceback
    1:         filename = C.LightGreen,
    1:         lineno = C.LightGreen,
    1:         name = C.LightPurple,
    1:         vName = C.Cyan,
    1:         val = C.LightGreen,
    1:         em = C.Cyan,
       
               # Emphasized colors for the last frame of the traceback
    1:         normalEm = C.Cyan,
    1:         filenameEm = C.Green,
    1:         linenoEm = C.Green,
    1:         nameEm = C.Purple,
    1:         valEm = C.Blue,
       
               # Colors for printing the exception
    1:         excName = C.Red,
               #line = C.Brown,  # brown often is displayed as yellow
    1:         line = C.Red,
    1:         caret = C.Normal,
    1:         Normal = C.Normal,
               ))
       
           # Hack: the 'neutral' colours are not very visible on a dark background on
           # Windows. Since Windows command prompts have a dark background by default, and
           # relatively few users are likely to alter that, we will use the 'Linux' colours,
           # designed for a dark background, as the default on Windows.
    1:     if os.name == "nt":
               ex_colors.add_scheme(ex_colors['Linux'].copy('Neutral'))
       
    1:     return ex_colors
       
    2: class Deprec(object):
       
    1:     def __init__(self, wrapped_obj):
    1:         self.wrapped=wrapped_obj
       
    1:     def __getattr__(self, name):
               val = getattr(self.wrapped, name)
               warnings.warn("Using ExceptionColors global is deprecated and will be removed in IPython 6.0",
                       DeprecationWarning, stacklevel=2)
               # using getattr after warnings break ipydoctest in weird way for 3.5
               return val
       
       # For backwards compatibility, keep around a single global object.  Note that
       # this should NOT be used, the factory function should be used instead, since
       # these objects are stateful and it's very easy to get strange bugs if any code
       # modifies the module-level object's state.
    1: ExceptionColors = Deprec(exception_colors())
