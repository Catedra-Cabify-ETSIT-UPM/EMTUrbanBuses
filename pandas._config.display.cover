       """
       Unopinionated display configuration.
    1: """
    1: import locale
    1: import sys
       
    1: from pandas._config import config as cf
       
       # -----------------------------------------------------------------------------
       # Global formatting options
    1: _initial_defencoding = None
       
       
    1: def detect_console_encoding():
           """
           Try to find the most capable encoding supported by the console.
           slightly modified from the way IPython handles the same issue.
           """
           global _initial_defencoding
       
    1:     encoding = None
    1:     try:
    1:         encoding = sys.stdout.encoding or sys.stdin.encoding
           except (AttributeError, IOError):
               pass
       
           # try again for something better
    1:     if not encoding or "ascii" in encoding.lower():
               try:
                   encoding = locale.getpreferredencoding()
               except Exception:
                   pass
       
           # when all else fails. this will usually be "ascii"
    1:     if not encoding or "ascii" in encoding.lower():
               encoding = sys.getdefaultencoding()
       
           # GH#3360, save the reported defencoding at import time
           # MPL backends may change it. Make available for debugging.
    1:     if not _initial_defencoding:
    1:         _initial_defencoding = sys.getdefaultencoding()
       
    1:     return encoding
       
       
       pc_encoding_doc = """
       : str/unicode
           Defaults to the detected encoding of the console.
           Specifies the encoding to be used for strings returned by to_string,
           these are generally strings meant to be displayed on the console.
    1: """
       
    1: with cf.config_prefix("display"):
    1:     cf.register_option(
    1:         "encoding", detect_console_encoding(), pc_encoding_doc, validator=cf.is_text
           )
