    1: from __future__ import absolute_import
    1: import socket
    1: from .wait import NoWayToWaitForSocketError, wait_for_read
    1: from ..contrib import _appengine_environ
       
       
    1: def is_connection_dropped(conn):  # Platform-specific
           """
           Returns True if the connection is dropped and should be closed.
       
           :param conn:
               :class:`httplib.HTTPConnection` object.
       
           Note: For platforms like AppEngine, this will always return ``False`` to
           let the platform handle connection recycling transparently for us.
           """
           sock = getattr(conn, 'sock', False)
           if sock is False:  # Platform-specific: AppEngine
               return False
           if sock is None:  # Connection already closed (such as by httplib).
               return True
           try:
               # Returns True if readable, which here means it's been dropped
               return wait_for_read(sock, timeout=0.0)
           except NoWayToWaitForSocketError:  # Platform-specific: AppEngine
               return False
       
       
       # This function is copied from socket.py in the Python 2.7 standard
       # library test suite. Added to its signature is only `socket_options`.
       # One additional modification is that we avoid binding to IPv6 servers
       # discovered in DNS if the system doesn't have IPv6 functionality.
    1: def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
    1:                       source_address=None, socket_options=None):
           """Connect to *address* and return the socket object.
       
           Convenience function.  Connect to *address* (a 2-tuple ``(host,
           port)``) and return the socket object.  Passing the optional
           *timeout* parameter will set the timeout on the socket instance
           before attempting to connect.  If no *timeout* is supplied, the
           global default timeout setting returned by :func:`getdefaulttimeout`
           is used.  If *source_address* is set it must be a tuple of (host, port)
           for the socket to bind as a source address before making the connection.
           An host of '' or port 0 tells the OS to use the default.
           """
       
    1:     host, port = address
    1:     if host.startswith('['):
               host = host.strip('[]')
    1:     err = None
       
           # Using the value from allowed_gai_family() in the context of getaddrinfo lets
           # us select whether to work with IPv4 DNS records, IPv6 records, or both.
           # The original create_connection function always returns all records.
    1:     family = allowed_gai_family()
       
    1:     for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
    1:         af, socktype, proto, canonname, sa = res
    1:         sock = None
    1:         try:
    1:             sock = socket.socket(af, socktype, proto)
       
                   # If provided, set socket level options before connecting.
    1:             _set_socket_options(sock, socket_options)
       
    1:             if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
    1:                 sock.settimeout(timeout)
    1:             if source_address:
                       sock.bind(source_address)
    1:             sock.connect(sa)
    1:             return sock
       
               except socket.error as e:
                   err = e
                   if sock is not None:
                       sock.close()
                       sock = None
       
           if err is not None:
               raise err
       
           raise socket.error("getaddrinfo returns an empty list")
       
       
    1: def _set_socket_options(sock, options):
    1:     if options is None:
               return
       
    2:     for opt in options:
    1:         sock.setsockopt(*opt)
       
       
    1: def allowed_gai_family():
           """This function is designed to work in the context of
           getaddrinfo, where family=socket.AF_UNSPEC is the default and
           will perform a DNS search for both IPv6 and IPv4 records."""
       
    1:     family = socket.AF_INET
    1:     if HAS_IPV6:
    1:         family = socket.AF_UNSPEC
    1:     return family
       
       
    1: def _has_ipv6(host):
           """ Returns True if the system can bind an IPv6 address. """
    1:     sock = None
    1:     has_ipv6 = False
       
           # App Engine doesn't support IPV6 sockets and actually has a quota on the
           # number of sockets that can be used, so just early out here instead of
           # creating a socket needlessly.
           # See https://github.com/urllib3/urllib3/issues/1446
    1:     if _appengine_environ.is_appengine_sandbox():
               return False
       
    1:     if socket.has_ipv6:
               # has_ipv6 returns true if cPython was compiled with IPv6 support.
               # It does not tell us if the system has IPv6 support enabled. To
               # determine that we must bind to an IPv6 address.
               # https://github.com/shazow/urllib3/pull/611
               # https://bugs.python.org/issue658327
    1:         try:
    1:             sock = socket.socket(socket.AF_INET6)
    1:             sock.bind((host, 0))
    1:             has_ipv6 = True
               except Exception:
                   pass
       
    1:     if sock:
    1:         sock.close()
    1:     return has_ipv6
       
       
    1: HAS_IPV6 = _has_ipv6('::1')
