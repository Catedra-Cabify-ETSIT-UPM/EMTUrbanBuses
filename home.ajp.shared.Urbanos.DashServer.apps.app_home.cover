    1: import dash_core_components as dcc
    1: import dash_html_components as html
    1: from dash.dependencies import Input, Output
       
    1: import pandas as pd
    1: import geopandas as gpd
    1: import json
       
    1: import plotly.graph_objects as go
    1: from shapely.geometry import shape
    1: from shapely.geometry import Point, LineString
    1: from shapely import wkt
    1: import fiona
    1: import branca.colormap as cm
       
    1: import datetime
    1: from collections import Counter
       
    1: from app import app
       
       # CARGAMOS LOS DATOS
    1: stops = gpd.read_file('M6Data/stops.json')
    1: route_lines = gpd.read_file('M6Data/route_lines.json')
    1: with open('M6Data/line_stops_dict.json', 'r') as f:
    1:     line_stops_dict = json.load(f)
           
    1: layout = html.Div(className = '', children = [
       
    1:     html.Div(className = 'box', children = [
    1:         html.H1('Desired Lines Map',className = 'title is-3'),
    1:         html.H2('Blue = From A to B, Red = From B to A',className = 'subtitle is-5'),
    1:         html.H3('To plot everything, select "All"',className = 'subtitle is-6'),
    1:         html.Span('Add line Ids: ', className = 'tag is-light is-large'),
    1:         dcc.Dropdown(
    1:             id="lineIds-select",
  208:             options=[{"label": i, "value": i} for i in list(line_stops_dict.keys()) + ['All']],
    1:             value='1',
    1:             searchable=True,
    1:             multi=True
               ),
    1:         html.Div(className='box',id='lines-graph')
           ])
       ])
       
       #Token and styles for the mapbox api
    1: mapbox_access_token = 'pk.eyJ1IjoiYWxlanAxOTk4IiwiYSI6ImNrNnFwMmM0dDE2OHYzZXFwazZiZTdmbGcifQ.k5qPtvMgar7i9cbQx1fP0w'
    1: style_day = 'mapbox://styles/alejp1998/ck6z9mohb25ni1iod4sqvqa0d'
    1: style_night = 'mapbox://styles/alejp1998/ck6z9mohb25ni1iod4sqvqa0d'
       
       # CALLBACKS
       
       # CALLBACK 1 - Requested Lines Plotting
    1: @app.callback(Output(component_id = 'lines-graph',component_property = 'children'),
    1:               [Input(component_id = 'lineIds-select',component_property = 'value')])
       def update_lines_graph(lineIds_value):
           '''
           Function that returns a graph with the lines requested and its stops
       
               Parameters
               ---
               input_lineIds_value: string
                   The lines whose stops and trayetories we are going to plot
           '''
           try:
               lineIds = lineIds_value
               showAll = False
               if type(lineIds) is list:
                   if 'All' in lineIds :
                       showAll = True
               else :
                   if lineIds=='All' :
                       showAll = True
               
               if showAll :
                   stops_of_lines = stops['stop_code'].tolist()
                   stops_selected = stops
                   lines_selected = route_lines       
               else: 
                   stops_of_lines = []
                   for lineId in lineIds :
                       if line_stops_dict[lineId] != None :
                           if line_stops_dict[lineId]['1'] != None :
                               stops_of_lines = stops_of_lines + line_stops_dict[lineId]['1']['stops']
                           if line_stops_dict[lineId]['2'] != None :
                               stops_of_lines = stops_of_lines + line_stops_dict[lineId]['2']['stops']
       
                   stops_of_lines = list(set(stops_of_lines))
                   stops_selected = stops.loc[stops['stop_code'].isin(stops_of_lines)]
       
                   if type(lineIds) is list:
                       lines_selected = route_lines.loc[route_lines['line_id'].isin(lineIds)]
                   else :
                       lines_selected = route_lines.loc[route_lines['line_id']==lineIds]
               
               #We set the center of the map
               center_x = lines_selected.centroid.x.mean()
               center_y = lines_selected.centroid.y.mean()
               #Style depending on hour
               now = datetime.datetime.now()
               if (datetime.time(6,0,0) <= now.time() <= datetime.time(23,30,0)) :
                   style = style_day
               else :
                   style = style_night
               
               #We create the figure object
               fig = go.Figure()
               #Add the stops to the figure
               fig.add_trace(go.Scattermapbox(
                   lat=stops_selected['geometry'].y,
                   lon=stops_selected['geometry'].x,
                   mode='markers',
                   marker=go.scattermapbox.Marker(
                       size=10,
                       color='green',
                       opacity=0.7
                   ),
                   text=stops_selected['stop_code'],
                   hoverinfo='text'
               ))
               #Add lines to the figure
               for index, row in lines_selected.iterrows():
                   line = row['geometry']
                   x_coords = []
                   y_coords = []
                   for coords in list(line.coords) :
                       x_coords.append(coords[0])
                       y_coords.append(coords[1])
                   
                   if row['direction'] == '1' :
                       color = 'blue'
                   else :
                       color = 'red'
                   fig.add_trace(go.Scattermapbox(
                       lat=y_coords,
                       lon=x_coords,
                       mode='lines',
                       line=dict(width=2, color=color),
                       text='LÃ­nea : {}-{}'.format(row['line_id'],row['direction']),
                       hoverinfo='text'
                   ))
               #And set the figure layout
               fig.update_layout(
                   title='LINES AND STOPS SELECTED MAP',
                   height=500,
                   margin=dict(r=0, l=0, t=0, b=0),
                   hovermode='closest',
                   showlegend=False,
                   mapbox=dict(
                       accesstoken=mapbox_access_token,
                       bearing=0,
                       center=dict(
                           lat=center_y,
                           lon=center_x
                       ),
                       pitch=0,
                       zoom=13,
                       style=style
                   )
               )
               
               #And finally we return the graph element
               if len(stops_of_lines)==0 :
                   return 'Please select one or multiple line ids from the list'
               else :
                   return [
                       html.H2(
                           'Selected lines map',
                           className = 'subtitle is-4'
                       ),
                       dcc.Loading(type = 'graph', children = [
                           dcc.Graph(
                               id = 'graph',
                               figure = fig
                           )
                       ]),
                       html.H2(
                           'Number of different stops involved : {}'.format(len(stops_of_lines)),
                           className = 'subtitle is-5'
                       )
                   ]
           except :
               #If there is an error we ask for a valid line id
               return 'Please select one or multiple line ids from the list'
               
               
               
               
                   
