       """Machine limits for Float32 and Float64 and (long double) if available...
       
    1: """
    1: from __future__ import division, absolute_import, print_function
       
    1: __all__ = ['finfo', 'iinfo']
       
    1: import warnings
       
    1: from .machar import MachAr
    1: from .overrides import set_module
    1: from . import numeric
    1: from . import numerictypes as ntypes
    1: from .numeric import array, inf
    1: from .umath import log10, exp2
    1: from . import umath
       
       
    1: def _fr0(a):
           """fix rank-0 --> rank-1"""
   30:     if a.ndim == 0:
   30:         a = a.copy()
   30:         a.shape = (1,)
   30:     return a
       
       
    1: def _fr1(a):
           """fix rank > 0 --> rank-0"""
   30:     if a.size == 1:
   30:         a = a.copy()
   30:         a.shape = ()
   30:     return a
       
    2: class MachArLike(object):
    1:     """ Object to simulate MachAr instance """
       
    1:     def __init__(self,
                        ftype,
                        **kwargs):
    6:         params = _MACHAR_PARAMS[ftype]
   42:         float_conv = lambda v: array([v], ftype)
   36:         float_to_float = lambda v : _fr1(float_conv(v))
   36:         float_to_str = lambda v: (params['fmt'] % array(_fr0(v)[0], ftype))
       
    6:         self.title = params['title']
               # Parameter types same as for discovered MachAr object.
    6:         self.epsilon = self.eps = float_to_float(kwargs.pop('eps'))
    6:         self.epsneg = float_to_float(kwargs.pop('epsneg'))
    6:         self.xmax = self.huge = float_to_float(kwargs.pop('huge'))
    6:         self.xmin = self.tiny = float_to_float(kwargs.pop('tiny'))
    6:         self.ibeta = params['itype'](kwargs.pop('ibeta'))
    6:         self.__dict__.update(kwargs)
    6:         self.precision = int(-log10(self.eps))
    6:         self.resolution = float_to_float(float_conv(10) ** (-self.precision))
    6:         self._str_eps = float_to_str(self.eps)
    6:         self._str_epsneg = float_to_str(self.epsneg)
    6:         self._str_xmin = float_to_str(self.xmin)
    6:         self._str_xmax = float_to_str(self.xmax)
    6:         self._str_resolution = float_to_str(self.resolution)
       
       _convert_to_float = {
    1:     ntypes.csingle: ntypes.single,
    1:     ntypes.complex_: ntypes.float_,
    1:     ntypes.clongfloat: ntypes.longfloat
           }
       
       # Parameters for creating MachAr / MachAr-like objects
    1: _title_fmt = 'numpy {} precision floating point number'
       _MACHAR_PARAMS = {
    1:     ntypes.double: dict(
    1:         itype = ntypes.int64,
    1:         fmt = '%24.16e',
    1:         title = _title_fmt.format('double')),
    1:     ntypes.single: dict(
    1:         itype = ntypes.int32,
    1:         fmt = '%15.7e',
    1:         title = _title_fmt.format('single')),
    1:     ntypes.longdouble: dict(
    1:         itype = ntypes.longlong,
    1:         fmt = '%s',
    1:         title = _title_fmt.format('long double')),
    1:     ntypes.half: dict(
    1:         itype = ntypes.int16,
    1:         fmt = '%12.5e',
    1:         title = _title_fmt.format('half'))}
       
       # Key to identify the floating point type.  Key is result of
       # ftype('-0.1').newbyteorder('<').tobytes()
       # See:
       # https://perl5.git.perl.org/perl.git/blob/3118d7d684b56cbeb702af874f4326683c45f045:/Configure
    1: _KNOWN_TYPES = {}
    1: def _register_type(machar, bytepat):
    8:     _KNOWN_TYPES[bytepat] = machar
    1: _float_ma = {}
       
    1: def _register_known_types():
           # Known parameters for float16
           # See docstring of MachAr class for description of parameters.
    1:     f16 = ntypes.float16
    1:     float16_ma = MachArLike(f16,
    1:                             machep=-10,
    1:                             negep=-11,
    1:                             minexp=-14,
    1:                             maxexp=16,
    1:                             it=10,
    1:                             iexp=5,
    1:                             ibeta=2,
    1:                             irnd=5,
    1:                             ngrd=0,
    1:                             eps=exp2(f16(-10)),
    1:                             epsneg=exp2(f16(-11)),
    1:                             huge=f16(65504),
    1:                             tiny=f16(2 ** -14))
    1:     _register_type(float16_ma, b'f\xae')
    1:     _float_ma[16] = float16_ma
       
           # Known parameters for float32
    1:     f32 = ntypes.float32
    1:     float32_ma = MachArLike(f32,
    1:                             machep=-23,
    1:                             negep=-24,
    1:                             minexp=-126,
    1:                             maxexp=128,
    1:                             it=23,
    1:                             iexp=8,
    1:                             ibeta=2,
    1:                             irnd=5,
    1:                             ngrd=0,
    1:                             eps=exp2(f32(-23)),
    1:                             epsneg=exp2(f32(-24)),
    1:                             huge=f32((1 - 2 ** -24) * 2**128),
    1:                             tiny=exp2(f32(-126)))
    1:     _register_type(float32_ma, b'\xcd\xcc\xcc\xbd')
    1:     _float_ma[32] = float32_ma
       
           # Known parameters for float64
    1:     f64 = ntypes.float64
    1:     epsneg_f64 = 2.0 ** -53.0
    1:     tiny_f64 = 2.0 ** -1022.0
    1:     float64_ma = MachArLike(f64,
    1:                             machep=-52,
    1:                             negep=-53,
    1:                             minexp=-1022,
    1:                             maxexp=1024,
    1:                             it=52,
    1:                             iexp=11,
    1:                             ibeta=2,
    1:                             irnd=5,
    1:                             ngrd=0,
    1:                             eps=2.0 ** -52.0,
    1:                             epsneg=epsneg_f64,
    1:                             huge=(1.0 - epsneg_f64) / tiny_f64 * f64(4),
    1:                             tiny=tiny_f64)
    1:     _register_type(float64_ma, b'\x9a\x99\x99\x99\x99\x99\xb9\xbf')
    1:     _float_ma[64] = float64_ma
       
           # Known parameters for IEEE 754 128-bit binary float
    1:     ld = ntypes.longdouble
    1:     epsneg_f128 = exp2(ld(-113))
    1:     tiny_f128 = exp2(ld(-16382))
           # Ignore runtime error when this is not f128
    1:     with numeric.errstate(all='ignore'):
    1:         huge_f128 = (ld(1) - epsneg_f128) / tiny_f128 * ld(4)
    1:     float128_ma = MachArLike(ld,
    1:                              machep=-112,
    1:                              negep=-113,
    1:                              minexp=-16382,
    1:                              maxexp=16384,
    1:                              it=112,
    1:                              iexp=15,
    1:                              ibeta=2,
    1:                              irnd=5,
    1:                              ngrd=0,
    1:                              eps=exp2(ld(-112)),
    1:                              epsneg=epsneg_f128,
    1:                              huge=huge_f128,
    1:                              tiny=tiny_f128)
           # IEEE 754 128-bit binary float
    1:     _register_type(float128_ma,
    1:         b'\x9a\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\xfb\xbf')
    1:     _register_type(float128_ma,
    1:         b'\x9a\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\xfb\xbf')
    1:     _float_ma[128] = float128_ma
       
           # Known parameters for float80 (Intel 80-bit extended precision)
    1:     epsneg_f80 = exp2(ld(-64))
    1:     tiny_f80 = exp2(ld(-16382))
           # Ignore runtime error when this is not f80
    1:     with numeric.errstate(all='ignore'):
    1:         huge_f80 = (ld(1) - epsneg_f80) / tiny_f80 * ld(4)
    1:     float80_ma = MachArLike(ld,
    1:                             machep=-63,
    1:                             negep=-64,
    1:                             minexp=-16382,
    1:                             maxexp=16384,
    1:                             it=63,
    1:                             iexp=15,
    1:                             ibeta=2,
    1:                             irnd=5,
    1:                             ngrd=0,
    1:                             eps=exp2(ld(-63)),
    1:                             epsneg=epsneg_f80,
    1:                             huge=huge_f80,
    1:                             tiny=tiny_f80)
           # float80, first 10 bytes containing actual storage
    1:     _register_type(float80_ma, b'\xcd\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xfb\xbf')
    1:     _float_ma[80] = float80_ma
       
           # Guessed / known parameters for double double; see:
           # https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format#Double-double_arithmetic
           # These numbers have the same exponent range as float64, but extended number of
           # digits in the significand.
           huge_dd = (umath.nextafter(ld(inf), ld(0))
    1:                 if hasattr(umath, 'nextafter')  # Missing on some platforms?
                       else float64_ma.huge)
    1:     float_dd_ma = MachArLike(ld,
    1:                               machep=-105,
    1:                               negep=-106,
    1:                               minexp=-1022,
    1:                               maxexp=1024,
    1:                               it=105,
    1:                               iexp=11,
    1:                               ibeta=2,
    1:                               irnd=5,
    1:                               ngrd=0,
    1:                               eps=exp2(ld(-105)),
    1:                               epsneg= exp2(ld(-106)),
    1:                               huge=huge_dd,
    1:                               tiny=exp2(ld(-1022)))
           # double double; low, high order (e.g. PPC 64)
    1:     _register_type(float_dd_ma,
    1:         b'\x9a\x99\x99\x99\x99\x99Y<\x9a\x99\x99\x99\x99\x99\xb9\xbf')
           # double double; high, low order (e.g. PPC 64 le)
    1:     _register_type(float_dd_ma,
    1:         b'\x9a\x99\x99\x99\x99\x99\xb9\xbf\x9a\x99\x99\x99\x99\x99Y<')
    1:     _float_ma['dd'] = float_dd_ma
       
       
    1: def _get_machar(ftype):
           """ Get MachAr instance or MachAr-like instance
       
           Get parameters for floating point type, by first trying signatures of
           various known floating point types, then, if none match, attempting to
           identify parameters by analysis.
       
           Parameters
           ----------
           ftype : class
               Numpy floating point type class (e.g. ``np.float64``)
       
           Returns
           -------
           ma_like : instance of :class:`MachAr` or :class:`MachArLike`
               Object giving floating point parameters for `ftype`.
       
           Warns
           -----
           UserWarning
               If the binary signature of the float type is not in the dictionary of
               known float types.
           """
           params = _MACHAR_PARAMS.get(ftype)
           if params is None:
               raise ValueError(repr(ftype))
           # Detect known / suspected types
           key = ftype('-0.1').newbyteorder('<').tobytes()
           ma_like = _KNOWN_TYPES.get(key)
           # Could be 80 bit == 10 byte extended precision, where last bytes can be
           # random garbage.  Try comparing first 10 bytes to pattern.
           if ma_like is None and ftype == ntypes.longdouble:
               ma_like = _KNOWN_TYPES.get(key[:10])
           if ma_like is not None:
               return ma_like
           # Fall back to parameter discovery
           warnings.warn(
               'Signature {} for {} does not match any known type: '
               'falling back to type probe function'.format(key, ftype),
               UserWarning, stacklevel=2)
           return _discovered_machar(ftype)
       
       
    1: def _discovered_machar(ftype):
           """ Create MachAr instance with found information on float types
           """
           params = _MACHAR_PARAMS[ftype]
           return MachAr(lambda v: array([v], ftype),
                         lambda v:_fr0(v.astype(params['itype']))[0],
                         lambda v:array(_fr0(v)[0], ftype),
                         lambda v: params['fmt'] % array(_fr0(v)[0], ftype),
                         params['title'])
       
       
    2: @set_module('numpy')
    1: class finfo(object):
           """
           finfo(dtype)
       
           Machine limits for floating point types.
       
           Attributes
           ----------
           bits : int
               The number of bits occupied by the type.
           eps : float
               The smallest representable positive number such that
               ``1.0 + eps != 1.0``.  Type of `eps` is an appropriate floating
               point type.
           epsneg : floating point number of the appropriate type
               The smallest representable positive number such that
               ``1.0 - epsneg != 1.0``.
           iexp : int
               The number of bits in the exponent portion of the floating point
               representation.
           machar : MachAr
               The object which calculated these parameters and holds more
               detailed information.
           machep : int
               The exponent that yields `eps`.
           max : floating point number of the appropriate type
               The largest representable number.
           maxexp : int
               The smallest positive power of the base (2) that causes overflow.
           min : floating point number of the appropriate type
               The smallest representable number, typically ``-max``.
           minexp : int
               The most negative power of the base (2) consistent with there
               being no leading 0's in the mantissa.
           negep : int
               The exponent that yields `epsneg`.
           nexp : int
               The number of bits in the exponent including its sign and bias.
           nmant : int
               The number of bits in the mantissa.
           precision : int
               The approximate number of decimal digits to which this kind of
               float is precise.
           resolution : floating point number of the appropriate type
               The approximate decimal resolution of this type, i.e.,
               ``10**-precision``.
           tiny : float
               The smallest positive usable number.  Type of `tiny` is an
               appropriate floating point type.
       
           Parameters
           ----------
           dtype : float, dtype, or instance
               Kind of floating point data-type about which to get information.
       
           See Also
           --------
           MachAr : The implementation of the tests that produce this information.
           iinfo : The equivalent for integer data types.
       
           Notes
           -----
           For developers of NumPy: do not instantiate this at the module level.
           The initial calculation of these parameters is expensive and negatively
           impacts import times.  These objects are cached, so calling ``finfo()``
           repeatedly inside your functions is not a problem.
       
    1:     """
       
    1:     _finfo_cache = {}
       
    1:     def __new__(cls, dtype):
               try:
                   dtype = numeric.dtype(dtype)
               except TypeError:
                   # In case a float instance was given
                   dtype = numeric.dtype(type(dtype))
       
               obj = cls._finfo_cache.get(dtype, None)
               if obj is not None:
                   return obj
               dtypes = [dtype]
               newdtype = numeric.obj2sctype(dtype)
               if newdtype is not dtype:
                   dtypes.append(newdtype)
                   dtype = newdtype
               if not issubclass(dtype, numeric.inexact):
                   raise ValueError("data type %r not inexact" % (dtype))
               obj = cls._finfo_cache.get(dtype, None)
               if obj is not None:
                   return obj
               if not issubclass(dtype, numeric.floating):
                   newdtype = _convert_to_float[dtype]
                   if newdtype is not dtype:
                       dtypes.append(newdtype)
                       dtype = newdtype
               obj = cls._finfo_cache.get(dtype, None)
               if obj is not None:
                   return obj
               obj = object.__new__(cls)._init(dtype)
               for dt in dtypes:
                   cls._finfo_cache[dt] = obj
               return obj
       
    1:     def _init(self, dtype):
               self.dtype = numeric.dtype(dtype)
               machar = _get_machar(dtype)
       
               for word in ['precision', 'iexp',
                            'maxexp', 'minexp', 'negep',
                            'machep']:
                   setattr(self, word, getattr(machar, word))
               for word in ['tiny', 'resolution', 'epsneg']:
                   setattr(self, word, getattr(machar, word).flat[0])
               self.bits = self.dtype.itemsize * 8
               self.max = machar.huge.flat[0]
               self.min = -self.max
               self.eps = machar.eps.flat[0]
               self.nexp = machar.iexp
               self.nmant = machar.it
               self.machar = machar
               self._str_tiny = machar._str_xmin.strip()
               self._str_max = machar._str_xmax.strip()
               self._str_epsneg = machar._str_epsneg.strip()
               self._str_eps = machar._str_eps.strip()
               self._str_resolution = machar._str_resolution.strip()
               return self
       
    1:     def __str__(self):
               fmt = (
                   'Machine parameters for %(dtype)s\n'
                   '---------------------------------------------------------------\n'
                   'precision = %(precision)3s   resolution = %(_str_resolution)s\n'
                   'machep = %(machep)6s   eps =        %(_str_eps)s\n'
                   'negep =  %(negep)6s   epsneg =     %(_str_epsneg)s\n'
                   'minexp = %(minexp)6s   tiny =       %(_str_tiny)s\n'
                   'maxexp = %(maxexp)6s   max =        %(_str_max)s\n'
                   'nexp =   %(nexp)6s   min =        -max\n'
                   '---------------------------------------------------------------\n'
                   )
               return fmt % self.__dict__
       
    1:     def __repr__(self):
               c = self.__class__.__name__
               d = self.__dict__.copy()
               d['klass'] = c
               return (("%(klass)s(resolution=%(resolution)s, min=-%(_str_max)s,"
                        " max=%(_str_max)s, dtype=%(dtype)s)") % d)
       
       
    2: @set_module('numpy')
    1: class iinfo(object):
           """
           iinfo(type)
       
           Machine limits for integer types.
       
           Attributes
           ----------
           bits : int
               The number of bits occupied by the type.
           min : int
               The smallest integer expressible by the type.
           max : int
               The largest integer expressible by the type.
       
           Parameters
           ----------
           int_type : integer type, dtype, or instance
               The kind of integer data type to get information about.
       
           See Also
           --------
           finfo : The equivalent for floating point data types.
       
           Examples
           --------
           With types:
       
           >>> ii16 = np.iinfo(np.int16)
           >>> ii16.min
           -32768
           >>> ii16.max
           32767
           >>> ii32 = np.iinfo(np.int32)
           >>> ii32.min
           -2147483648
           >>> ii32.max
           2147483647
       
           With instances:
       
           >>> ii32 = np.iinfo(np.int32(10))
           >>> ii32.min
           -2147483648
           >>> ii32.max
           2147483647
       
    1:     """
       
    1:     _min_vals = {}
    1:     _max_vals = {}
       
    1:     def __init__(self, int_type):
   24:         try:
   24:             self.dtype = numeric.dtype(int_type)
               except TypeError:
                   self.dtype = numeric.dtype(type(int_type))
   24:         self.kind = self.dtype.kind
   24:         self.bits = self.dtype.itemsize * 8
   24:         self.key = "%s%d" % (self.kind, self.bits)
   24:         if self.kind not in 'iu':
                   raise ValueError("Invalid integer data type %r." % (self.kind,))
       
    1:     @property
           def min(self):
               """Minimum value of given dtype."""
    5:         if self.kind == 'u':
                   return 0
               else:
    5:             try:
    5:                 val = iinfo._min_vals[self.key]
    4:             except KeyError:
    4:                 val = int(-(1 << (self.bits-1)))
    4:                 iinfo._min_vals[self.key] = val
    5:             return val
       
    1:     @property
           def max(self):
               """Maximum value of given dtype."""
   17:         try:
   17:             val = iinfo._max_vals[self.key]
    8:         except KeyError:
    8:             if self.kind == 'u':
    4:                 val = int((1 << self.bits) - 1)
                   else:
    4:                 val = int((1 << (self.bits-1)) - 1)
    8:             iinfo._max_vals[self.key] = val
   17:         return val
       
    1:     def __str__(self):
               """String representation."""
               fmt = (
                   'Machine parameters for %(dtype)s\n'
                   '---------------------------------------------------------------\n'
                   'min = %(min)s\n'
                   'max = %(max)s\n'
                   '---------------------------------------------------------------\n'
                   )
               return fmt % {'dtype': self.dtype, 'min': self.min, 'max': self.max}
       
    1:     def __repr__(self):
               return "%s(min=%s, max=%s, dtype=%s)" % (self.__class__.__name__,
                                           self.min, self.max, self.dtype)
       
