    1: import abc
    1: import inspect
    1: import sys
    1: from future.utils import with_metaclass
       
    1: from .._utils import patch_collections_abc
       
    1: MutableSequence = patch_collections_abc("MutableSequence")
       
       
       # pylint: disable=no-init,too-few-public-methods
    2: class ComponentRegistry:
    1:     """Holds a registry of the namespaces used by components."""
       
    1:     registry = set()
       
    1:     @classmethod
           def get_resources(cls, resource_name):
               resources = []
       
               for module_name in cls.registry:
                   module = sys.modules[module_name]
                   resources.extend(getattr(module, resource_name, []))
       
               return resources
       
       
    2: class ComponentMeta(abc.ABCMeta):
       
           # pylint: disable=arguments-differ
    1:     def __new__(mcs, name, bases, attributes):
  155:         component = abc.ABCMeta.__new__(mcs, name, bases, attributes)
  155:         module = attributes["__module__"].split(".")[0]
  155:         if name == "Component" or module == "builtins":
                   # Don't do the base component
                   # and the components loaded dynamically by load_component
                   # as it doesn't have the namespace.
    1:             return component
       
  154:         ComponentRegistry.registry.add(module)
       
  154:         return component
       
       
    1: def is_number(s):
           try:
               float(s)
               return True
           except ValueError:
               return False
       
       
    1: def _check_if_has_indexable_children(item):
           if not hasattr(item, "children") or (
               not isinstance(item.children, Component)
               and not isinstance(item.children, (tuple, MutableSequence))
           ):
       
               raise KeyError
       
       
    2: class Component(with_metaclass(ComponentMeta, object)):
    2:     class _UNDEFINED(object):
    1:         def __repr__(self):
                   return "undefined"
       
    1:         def __str__(self):
                   return "undefined"
       
    1:     UNDEFINED = _UNDEFINED()
       
    2:     class _REQUIRED(object):
    1:         def __repr__(self):
                   return "required"
       
    1:         def __str__(self):
                   return "required"
       
    1:     REQUIRED = _REQUIRED()
       
    1:     def __init__(self, **kwargs):
               # pylint: disable=super-init-not-called
  198:         for k, v in list(kwargs.items()):
                   # pylint: disable=no-member
  144:             k_in_propnames = k in self._prop_names
  144:             k_in_wildcards = any(
  466:                 [k.startswith(w) for w in self._valid_wildcard_attributes]
                   )
                   # e.g. "The dash_core_components.Dropdown component (version 1.6.0)
                   # with the ID "my-dropdown"
  144:             try:
  144:                 error_string_prefix = 'The `{}.{}` component (version {}){}'.format(
  144:                     self._namespace,
  144:                     self._type,
  144:                     getattr(__import__(self._namespace), '__version__', 'unknown'),
                           ' with the ID "{}"'.format(kwargs['id'])
  144:                     if 'id' in kwargs else ''
                       )
                   except ImportError:
                       # Our tests create mock components with libraries that
                       # aren't importable
                       error_string_prefix = 'The `{}` component{}'.format(
                           self._type,
                           ' with the ID "{}"'.format(kwargs['id'])
                           if 'id' in kwargs else ''
                       )
       
  144:             if not k_in_propnames and not k_in_wildcards:
                       raise TypeError(
                           "{} received an unexpected keyword argument: `{}`".format(
                               error_string_prefix, k
                           ) + "\nAllowed arguments: {}".format(                        # pylint: disable=no-member
                               ", ".join(sorted(self._prop_names))
                           )
                       )
       
  144:             if k != "children" and isinstance(v, Component):
                       raise TypeError(
                           error_string_prefix +
                           " detected a Component for a prop other than `children`\n" +
                           "Did you forget to wrap multiple `children` in an array?\n" +
                           "Prop {} has value {}\n".format(k, repr(v))
                       )
       
  144:             setattr(self, k, v)
       
    1:     def to_plotly_json(self):
               # Add normal properties
               props = {
                   p: getattr(self, p)
                   for p in self._prop_names  # pylint: disable=no-member
                   if hasattr(self, p)
               }
               # Add the wildcard properties data-* and aria-*
               props.update(
                   {
                       k: getattr(self, k)
                       for k in self.__dict__
                       if any(
                           k.startswith(w)
                           # pylint:disable=no-member
                           for w in self._valid_wildcard_attributes
                       )
                   }
               )
               as_json = {
                   "props": props,
                   "type": self._type,  # pylint: disable=no-member
                   "namespace": self._namespace,  # pylint: disable=no-member
               }
       
               return as_json
       
           # pylint: disable=too-many-branches, too-many-return-statements
           # pylint: disable=redefined-builtin, inconsistent-return-statements
    1:     def _get_set_or_delete(self, id, operation, new_item=None):
               _check_if_has_indexable_children(self)
       
               # pylint: disable=access-member-before-definition,
               # pylint: disable=attribute-defined-outside-init
               if isinstance(self.children, Component):
                   if getattr(self.children, "id", None) is not None:
                       # Woohoo! It's the item that we're looking for
                       if self.children.id == id:
                           if operation == "get":
                               return self.children
                           elif operation == "set":
                               self.children = new_item
                               return
                           elif operation == "delete":
                               self.children = None
                               return
       
                   # Recursively dig into its subtree
                   try:
                       if operation == "get":
                           return self.children.__getitem__(id)
                       elif operation == "set":
                           self.children.__setitem__(id, new_item)
                           return
                       elif operation == "delete":
                           self.children.__delitem__(id)
                           return
                   except KeyError:
                       pass
       
               # if children is like a list
               if isinstance(self.children, (tuple, MutableSequence)):
                   for i, item in enumerate(self.children):
                       # If the item itself is the one we're looking for
                       if getattr(item, "id", None) == id:
                           if operation == "get":
                               return item
                           elif operation == "set":
                               self.children[i] = new_item
                               return
                           elif operation == "delete":
                               del self.children[i]
                               return
       
                       # Otherwise, recursively dig into that item's subtree
                       # Make sure it's not like a string
                       elif isinstance(item, Component):
                           try:
                               if operation == "get":
                                   return item.__getitem__(id)
                               elif operation == "set":
                                   item.__setitem__(id, new_item)
                                   return
                               elif operation == "delete":
                                   item.__delitem__(id)
                                   return
                           except KeyError:
                               pass
       
               # The end of our branch
               # If we were in a list, then this exception will get caught
               raise KeyError(id)
       
           # Magic methods for a mapping interface:
           # - __getitem__
           # - __setitem__
           # - __delitem__
           # - __iter__
           # - __len__
       
    1:     def __getitem__(self, id):  # pylint: disable=redefined-builtin
               """Recursively find the element with the given ID through the tree of
               children."""
       
               # A component's children can be undefined, a string, another component,
               # or a list of components.
               return self._get_set_or_delete(id, "get")
       
    1:     def __setitem__(self, id, item):  # pylint: disable=redefined-builtin
               """Set an element by its ID."""
               return self._get_set_or_delete(id, "set", item)
       
    1:     def __delitem__(self, id):  # pylint: disable=redefined-builtin
               """Delete items by ID in the tree of children."""
               return self._get_set_or_delete(id, "delete")
       
    1:     def _traverse(self):
               """Yield each item in the tree."""
               for t in self._traverse_with_paths():
                   yield t[1]
       
    1:     def _traverse_with_paths(self):
               """Yield each item with its path in the tree."""
               children = getattr(self, "children", None)
               children_type = type(children).__name__
               children_id = (
                   "(id={:s})".format(children.id)
                   if getattr(children, "id", False)
                   else ""
               )
               children_string = children_type + " " + children_id
       
               # children is just a component
               if isinstance(children, Component):
                   yield "[*] " + children_string, children
                   # pylint: disable=protected-access
                   for p, t in children._traverse_with_paths():
                       yield "\n".join(["[*] " + children_string, p]), t
       
               # children is a list of components
               elif isinstance(children, (tuple, MutableSequence)):
                   for idx, i in enumerate(children):
                       list_path = "[{:d}] {:s} {}".format(
                           idx,
                           type(i).__name__,
                           "(id={:s})".format(i.id)
                           if getattr(i, "id", False)
                           else "",
                       )
                       yield list_path, i
       
                       if isinstance(i, Component):
                           # pylint: disable=protected-access
                           for p, t in i._traverse_with_paths():
                               yield "\n".join([list_path, p]), t
       
    1:     def __iter__(self):
               """Yield IDs in the tree of children."""
               for t in self._traverse():
                   if isinstance(t, Component) and getattr(t, "id", None) is not None:
       
                       yield t.id
       
    1:     def __len__(self):
               """Return the number of items in the tree."""
               # TODO - Should we return the number of items that have IDs
               # or just the number of items?
               # The number of items is more intuitive but returning the number
               # of IDs matches __iter__ better.
               length = 0
               if getattr(self, "children", None) is None:
                   length = 0
               elif isinstance(self.children, Component):
                   length = 1
                   length += len(self.children)
               elif isinstance(self.children, (tuple, MutableSequence)):
                   for c in self.children:
                       length += 1
                       if isinstance(c, Component):
                           length += len(c)
               else:
                   # string or number
                   length = 1
               return length
       
    1:     def __repr__(self):
               # pylint: disable=no-member
               props_with_values = [
                   c for c in self._prop_names if getattr(self, c, None) is not None
               ] + [
                   c
                   for c in self.__dict__
                   if any(
                       c.startswith(wc_attr)
                       for wc_attr in self._valid_wildcard_attributes
                   )
               ]
               if any(p != "children" for p in props_with_values):
                   props_string = ", ".join(
                       "{prop}={value}".format(prop=p, value=repr(getattr(self, p)))
                       for p in props_with_values
                   )
               else:
                   props_string = repr(getattr(self, "children", None))
               return "{type}({props_string})".format(
                   type=self._type, props_string=props_string
               )
       
       
    1: def _explicitize_args(func):
           # Python 2
  154:     if hasattr(func, "func_code"):
               varnames = func.func_code.co_varnames
           # Python 3
           else:
  154:         varnames = func.__code__.co_varnames
       
  154:     def wrapper(*args, **kwargs):
   54:         if "_explicit_args" in kwargs.keys():
                   raise Exception("Variable _explicit_args should not be set.")
   54:         kwargs["_explicit_args"] = list(
  228:             set(list(varnames[: len(args)]) + [k for k, _ in kwargs.items()])
               )
   54:         if "self" in kwargs["_explicit_args"]:
   54:             kwargs["_explicit_args"].remove("self")
   54:         return func(*args, **kwargs)
       
           # If Python 3, we can set the function signature to be correct
  154:     if hasattr(inspect, "signature"):
               # pylint: disable=no-member
  154:         new_sig = inspect.signature(wrapper).replace(
  154:             parameters=inspect.signature(func).parameters.values()
               )
  154:         wrapper.__signature__ = new_sig
  154:     return wrapper
