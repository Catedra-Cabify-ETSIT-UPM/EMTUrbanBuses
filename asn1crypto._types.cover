       # coding: utf-8
    1: from __future__ import unicode_literals, division, absolute_import, print_function
       
    1: import inspect
    1: import sys
       
       
    1: if sys.version_info < (3,):
           str_cls = unicode  # noqa
           byte_cls = str
           int_types = (int, long)  # noqa
       
           def bytes_to_list(byte_string):
               return [ord(b) for b in byte_string]
       
           chr_cls = chr
       
       else:
    1:     str_cls = str
    1:     byte_cls = bytes
    1:     int_types = int
       
    1:     bytes_to_list = list
       
    1:     def chr_cls(num):
               return bytes([num])
       
       
    1: def type_name(value):
           """
           Returns a user-readable name for the type of an object
       
           :param value:
               A value to get the type name of
       
           :return:
               A unicode string of the object's type name
           """
       
           if inspect.isclass(value):
               cls = value
           else:
               cls = value.__class__
           if cls.__module__ in set(['builtins', '__builtin__']):
               return cls.__name__
           return '%s.%s' % (cls.__module__, cls.__name__)
