    1: """Implementation of __array_function__ overrides from NEP-18."""
    1: import collections
    1: import functools
    1: import os
    1: import textwrap
       
    1: from numpy.core._multiarray_umath import (
           add_docstring, implement_array_function, _get_implementing_args)
    1: from numpy.compat._inspect import getargspec
       
       
    1: ARRAY_FUNCTION_ENABLED = bool(
    1:     int(os.environ.get('NUMPY_EXPERIMENTAL_ARRAY_FUNCTION', 1)))
       
       
    1: add_docstring(
    1:     implement_array_function,
           """
           Implement a function with checks for __array_function__ overrides.
       
           All arguments are required, and can only be passed by position.
       
           Arguments
           ---------
           implementation : function
               Function that implements the operation on NumPy array without
               overrides when called like ``implementation(*args, **kwargs)``.
           public_api : function
               Function exposed by NumPy's public API originally called like
               ``public_api(*args, **kwargs)`` on which arguments are now being
               checked.
           relevant_args : iterable
               Iterable of arguments to check for __array_function__ methods.
           args : tuple
               Arbitrary positional arguments originally passed into ``public_api``.
           kwargs : dict
               Arbitrary keyword arguments originally passed into ``public_api``.
       
           Returns
           -------
           Result from calling ``implementation()`` or an ``__array_function__``
           method, as appropriate.
       
           Raises
           ------
           TypeError : if no implementation is found.
    1:     """)
       
       
       # exposed for testing purposes; used internally by implement_array_function
    1: add_docstring(
    1:     _get_implementing_args,
           """
           Collect arguments on which to call __array_function__.
       
           Parameters
           ----------
           relevant_args : iterable of array-like
               Iterable of possibly array-like arguments to check for
               __array_function__ methods.
       
           Returns
           -------
           Sequence of arguments with __array_function__ methods, in the order in
           which they should be called.
    1:     """)
       
       
    1: ArgSpec = collections.namedtuple('ArgSpec', 'args varargs keywords defaults')
       
       
    1: def verify_matching_signatures(implementation, dispatcher):
           """Verify that a dispatcher function has the right signature."""
  287:     implementation_spec = ArgSpec(*getargspec(implementation))
  287:     dispatcher_spec = ArgSpec(*getargspec(dispatcher))
       
  287:     if (implementation_spec.args != dispatcher_spec.args or
  287:             implementation_spec.varargs != dispatcher_spec.varargs or
  287:             implementation_spec.keywords != dispatcher_spec.keywords or
  287:             (bool(implementation_spec.defaults) !=
  287:              bool(dispatcher_spec.defaults)) or
  287:             (implementation_spec.defaults is not None and
  174:              len(implementation_spec.defaults) !=
  174:              len(dispatcher_spec.defaults))):
               raise RuntimeError('implementation and dispatcher for %s have '
                                  'different function signatures' % implementation)
       
  287:     if implementation_spec.defaults is not None:
  174:         if dispatcher_spec.defaults != (None,) * len(dispatcher_spec.defaults):
                   raise RuntimeError('dispatcher functions can only use None for '
                                      'default argument values')
       
       
    1: def set_module(module):
           """Decorator for overriding __module__ on a function or class.
       
           Example usage::
       
               @set_module('numpy')
               def example():
                   pass
       
               assert example.__module__ == 'numpy'
           """
   84:     def decorator(func):
   84:         if module is not None:
   84:             func.__module__ = module
   84:         return func
   84:     return decorator
       
       
       def array_function_dispatch(dispatcher, module=None, verify=True,
    1:                             docs_from_dispatcher=False):
           """Decorator for adding dispatch with the __array_function__ protocol.
       
           See NEP-18 for example usage.
       
           Parameters
           ----------
           dispatcher : callable
               Function that when called like ``dispatcher(*args, **kwargs)`` with
               arguments from the NumPy function call returns an iterable of
               array-like arguments to check for ``__array_function__``.
           module : str, optional
               __module__ attribute to set on new function, e.g., ``module='numpy'``.
               By default, module is copied from the decorated function.
           verify : bool, optional
               If True, verify the that the signature of the dispatcher and decorated
               function signatures match exactly: all required and optional arguments
               should appear in order with the same names, but the default values for
               all optional arguments should be ``None``. Only disable verification
               if the dispatcher's signature needs to deviate for some particular
               reason, e.g., because the function has a signature like
               ``func(*args, **kwargs)``.
           docs_from_dispatcher : bool, optional
               If True, copy docs from the dispatcher function onto the dispatched
               function, rather than from the implementation. This is useful for
               functions defined in C, which otherwise don't have docstrings.
       
           Returns
           -------
           Function suitable for decorating the implementation of a NumPy function.
           """
       
  317:     if not ARRAY_FUNCTION_ENABLED:
               def decorator(implementation):
                   if docs_from_dispatcher:
                       add_docstring(implementation, dispatcher.__doc__)
                   if module is not None:
                       implementation.__module__ = module
                   return implementation
               return decorator
       
  317:     def decorator(implementation):
  317:         if verify:
  287:             verify_matching_signatures(implementation, dispatcher)
       
  317:         if docs_from_dispatcher:
   23:             add_docstring(implementation, dispatcher.__doc__)
       
               # Equivalently, we could define this function directly instead of using
               # exec. This version has the advantage of giving the helper function a
               # more interpettable name. Otherwise, the original function does not
               # show up at all in many cases, e.g., if it's written in C or if the
               # dispatcher gets an invalid keyword argument.
  317:         source = textwrap.dedent("""
               @functools.wraps(implementation)
               def {name}(*args, **kwargs):
                   relevant_args = dispatcher(*args, **kwargs)
                   return implement_array_function(
                       implementation, {name}, relevant_args, args, kwargs)
  317:         """).format(name=implementation.__name__)
       
  317:         source_object = compile(
  317:             source, filename='<__array_function__ internals>', mode='exec')
               scope = {
  317:             'implementation': implementation,
  317:             'dispatcher': dispatcher,
  317:             'functools': functools,
  317:             'implement_array_function': implement_array_function,
               }
  317:         exec(source_object, scope)
       
  317:         public_api = scope[implementation.__name__]
       
  317:         if module is not None:
  308:             public_api.__module__ = module
       
  317:         public_api._implementation = implementation
       
  317:         return public_api
       
  317:     return decorator
       
       
       def array_function_from_dispatcher(
    1:         implementation, module=None, verify=True, docs_from_dispatcher=True):
           """Like array_function_dispatcher, but with function arguments flipped."""
       
   23:     def decorator(dispatcher):
   23:         return array_function_dispatch(
   23:             dispatcher, module, verify=verify,
   23:             docs_from_dispatcher=docs_from_dispatcher)(implementation)
   23:     return decorator
