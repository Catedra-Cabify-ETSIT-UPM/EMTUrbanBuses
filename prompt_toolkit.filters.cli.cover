    1: from __future__ import unicode_literals
       
       # For backwards-compatibility. keep this file.
       # (Many people are going to have key bindings that rely on this file.)
    1: from .app import *
       
       __all__ = [
           # Old names.
    1:     'HasArg',
    1:     'HasCompletions',
    1:     'HasFocus',
    1:     'HasSelection',
    1:     'HasValidationError',
    1:     'IsDone',
    1:     'IsReadOnly',
    1:     'IsMultiline',
    1:     'RendererHeightIsKnown',
    1:     'InEditingMode',
    1:     'InPasteMode',
       
    1:     'ViMode',
    1:     'ViNavigationMode',
    1:     'ViInsertMode',
    1:     'ViInsertMultipleMode',
    1:     'ViReplaceMode',
    1:     'ViSelectionMode',
    1:     'ViWaitingForTextObjectMode',
    1:     'ViDigraphMode',
       
    1:     'EmacsMode',
    1:     'EmacsInsertMode',
    1:     'EmacsSelectionMode',
       
    1:     'IsSearching',
    1:     'HasSearch',
    1:     'ControlIsSearchable',
       ]
       
       # Keep the original classnames for backwards compatibility.
    1: HasValidationError = lambda: has_validation_error
    1: HasArg = lambda: has_arg
    1: IsDone = lambda: is_done
    1: RendererHeightIsKnown = lambda: renderer_height_is_known
    1: ViNavigationMode = lambda: vi_navigation_mode
    1: InPasteMode = lambda: in_paste_mode
    1: EmacsMode = lambda: emacs_mode
    1: EmacsInsertMode = lambda: emacs_insert_mode
    1: ViMode = lambda: vi_mode
    1: IsSearching = lambda: is_searching
    1: HasSearch = lambda: is_searching
    1: ControlIsSearchable = lambda: control_is_searchable
    1: EmacsSelectionMode = lambda: emacs_selection_mode
    1: ViDigraphMode = lambda: vi_digraph_mode
    1: ViWaitingForTextObjectMode = lambda: vi_waiting_for_text_object_mode
    1: ViSelectionMode = lambda: vi_selection_mode
    1: ViReplaceMode = lambda: vi_replace_mode
    1: ViInsertMultipleMode = lambda: vi_insert_multiple_mode
    1: ViInsertMode = lambda: vi_insert_mode
    1: HasSelection = lambda: has_selection
    1: HasCompletions = lambda: has_completions
    1: IsReadOnly = lambda: is_read_only
    1: IsMultiline = lambda: is_multiline
       
    1: HasFocus = has_focus  # No lambda here! (Has_focus is callable that returns a callable.)
    1: InEditingMode = in_editing_mode
