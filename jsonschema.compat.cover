       """
       Python 2/3 compatibility helpers.
       
       Note: This module is *not* public API.
    1: """
    1: import contextlib
    1: import operator
    1: import sys
       
       
    1: try:
    1:     from collections.abc import MutableMapping, Sequence  # noqa
       except ImportError:
           from collections import MutableMapping, Sequence  # noqa
       
    1: PY3 = sys.version_info[0] >= 3
       
    1: if PY3:
    1:     zip = zip
    1:     from functools import lru_cache
    1:     from io import StringIO as NativeIO
    1:     from urllib.parse import (
               unquote, urljoin, urlunsplit, SplitResult, urlsplit as _urlsplit
           )
    1:     from urllib.request import pathname2url, urlopen
    1:     str_types = str,
    1:     int_types = int,
    1:     iteritems = operator.methodcaller("items")
       else:
           from itertools import izip as zip  # noqa
           from io import BytesIO as NativeIO
           from urlparse import (
               urljoin, urlunsplit, SplitResult, urlsplit as _urlsplit # noqa
           )
           from urllib import pathname2url, unquote  # noqa
           import urllib2  # noqa
           def urlopen(*args, **kwargs):
               return contextlib.closing(urllib2.urlopen(*args, **kwargs))
       
           str_types = basestring
           int_types = int, long
           iteritems = operator.methodcaller("iteritems")
       
           from functools32 import lru_cache
       
       
       # On python < 3.3 fragments are not handled properly with unknown schemes
    1: def urlsplit(url):
    4:     scheme, netloc, path, query, fragment = _urlsplit(url)
    4:     if "#" in path:
               path, fragment = path.split("#", 1)
    4:     return SplitResult(scheme, netloc, path, query, fragment)
       
       
    1: def urldefrag(url):
           if "#" in url:
               s, n, p, q, frag = urlsplit(url)
               defrag = urlunsplit((s, n, p, q, ""))
           else:
               defrag = url
               frag = ""
           return defrag, frag
       
       
       # flake8: noqa
