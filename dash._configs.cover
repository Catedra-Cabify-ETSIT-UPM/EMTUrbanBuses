    1: import os
       
       # noinspection PyCompatibility
    1: from . import exceptions
    1: from ._utils import AttributeDict
       
       
    1: def load_dash_env_vars():
   25:     return AttributeDict(
  525:         {
                   var: os.getenv(var, os.getenv(var.lower()))
  475:             for var in (
   25:                 'DASH_APP_NAME',
                       'DASH_URL_BASE_PATHNAME',
                       'DASH_ROUTES_PATHNAME_PREFIX',
                       'DASH_REQUESTS_PATHNAME_PREFIX',
                       'DASH_SUPPRESS_CALLBACK_EXCEPTIONS',
                       'DASH_ASSETS_EXTERNAL_PATH',
                       'DASH_INCLUDE_ASSETS_FILES',
                       'DASH_COMPONENTS_CACHE_MAX_AGE',
                       'DASH_INCLUDE_ASSETS_FILES',
                       'DASH_SERVE_DEV_BUNDLES',
                       'DASH_DEBUG',
                       'DASH_UI',
                       'DASH_PROPS_CHECK',
                       'DASH_HOT_RELOAD',
                       'DASH_HOT_RELOAD_INTERVAL',
                       'DASH_HOT_RELOAD_WATCH_INTERVAL',
                       'DASH_HOT_RELOAD_MAX_RETRY',
                       'DASH_SILENCE_ROUTES_LOGGING',
                       'DASH_PRUNE_ERRORS',
                   )
               }
           )
       
       
    1: DASH_ENV_VARS = load_dash_env_vars()
       
       
    1: def get_combined_config(name, val, default=None):
           """Consolidate the config with priority from high to low provided init
           value > OS environ > default."""
       
   24:     if val is not None:
    1:         return val
       
   23:     env = load_dash_env_vars().get('DASH_{}'.format(name.upper()))
   23:     if env is None:
   23:         return default
       
           return env.lower() == 'true' if env.lower() in {'true', 'false'} \
               else env
       
       
       def pathname_configs(
               url_base_pathname=None,
               routes_pathname_prefix=None,
    1:         requests_pathname_prefix=None):
           _pathname_config_error_message = '''
           {} This is ambiguous.
           To fix this, set `routes_pathname_prefix` instead of `url_base_pathname`.
       
           Note that `requests_pathname_prefix` is the prefix for the AJAX calls that
           originate from the client (the web browser) and `routes_pathname_prefix` is
           the prefix for the API routes on the backend (this flask server).
           `url_base_pathname` will set `requests_pathname_prefix` and
           `routes_pathname_prefix` to the same value.
           If you need these to be different values then you should set
           `requests_pathname_prefix` and `routes_pathname_prefix`,
           not `url_base_pathname`.
    1:     '''
    1:     url_base_pathname = get_combined_config(
    1:         'url_base_pathname', url_base_pathname)
       
    1:     routes_pathname_prefix = get_combined_config(
    1:         'routes_pathname_prefix', routes_pathname_prefix)
       
    1:     requests_pathname_prefix = get_combined_config(
    1:         'requests_pathname_prefix', requests_pathname_prefix)
       
    1:     if url_base_pathname is not None and requests_pathname_prefix is not None:
               raise exceptions.InvalidConfig(
                   _pathname_config_error_message.format(
                       'You supplied `url_base_pathname` and '
                       '`requests_pathname_prefix`.'
                   )
               )
       
    1:     if url_base_pathname is not None and routes_pathname_prefix is not None:
               raise exceptions.InvalidConfig(
                   _pathname_config_error_message.format(
                       'You supplied `url_base_pathname` and '
                       '`routes_pathname_prefix`.')
               )
       
    1:     if url_base_pathname is not None and routes_pathname_prefix is None:
               routes_pathname_prefix = url_base_pathname
    1:     elif routes_pathname_prefix is None:
    1:         routes_pathname_prefix = '/'
       
    1:     if not routes_pathname_prefix.startswith('/'):
               raise exceptions.InvalidConfig(
                   '`routes_pathname_prefix` needs to start with `/`')
    1:     if not routes_pathname_prefix.endswith('/'):
               raise exceptions.InvalidConfig(
                   '`routes_pathname_prefix` needs to end with `/`')
       
    1:     app_name = load_dash_env_vars().DASH_APP_NAME
       
    1:     if not requests_pathname_prefix and app_name:
               requests_pathname_prefix = '/' + app_name + routes_pathname_prefix
    1:     elif requests_pathname_prefix is None:
    1:         requests_pathname_prefix = routes_pathname_prefix
       
    1:     if not requests_pathname_prefix.startswith('/'):
               raise exceptions.InvalidConfig(
                   '`requests_pathname_prefix` needs to start with `/`')
    1:     if not requests_pathname_prefix.endswith(routes_pathname_prefix):
               raise exceptions.InvalidConfig(
                   '`requests_pathname_prefix` needs to ends with '
                   '`routes_pathname_prefix`.'
               )
       
    1:     return url_base_pathname, routes_pathname_prefix, requests_pathname_prefix
