       # Copyright (c) Jupyter Development Team.
       # Distributed under the terms of the Modified BSD License.
       
    1: """Contains the DOMWidget class"""
       
    1: from traitlets import Unicode
    1: from .widget import Widget, widget_serialization
    1: from .trait_types import InstanceDict, TypedTuple
    1: from .widget_layout import Layout
    1: from .widget_style import Style
       
       
    2: class DOMWidget(Widget):
    1:     """Widget that can be inserted into the DOM"""
       
    1:     _model_name = Unicode('DOMWidgetModel').tag(sync=True)
    1:     _dom_classes = TypedTuple(trait=Unicode(), help="CSS classes applied to widget DOM element").tag(sync=True)
    1:     layout = InstanceDict(Layout).tag(sync=True, **widget_serialization)
       
    1:     def add_class(self, className):
               """
               Adds a class to the top level element of the widget.
       
               Doesn't add the class if it already exists.
               """
               if className not in self._dom_classes:
                   self._dom_classes = list(self._dom_classes) + [className]
               return self
       
    1:     def remove_class(self, className):
               """
               Removes a class from the top level element of the widget.
       
               Doesn't remove the class if it doesn't exist.
               """
               if className in self._dom_classes:
                   self._dom_classes = [c for c in self._dom_classes if c != className]
               return self
       
    1:     def _repr_keys(self):
               for key in super(DOMWidget, self)._repr_keys():
                   # Exclude layout if it had the default value
                   if key == 'layout':
                       value = getattr(self, key)
                       if repr(value) == '%s()' % value.__class__.__name__:
                           continue
                   yield key
               # We also need to include _dom_classes in repr for reproducibility
               if self._dom_classes:
                   yield '_dom_classes'
