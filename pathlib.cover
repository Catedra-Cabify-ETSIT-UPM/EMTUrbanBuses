    1: import fnmatch
    1: import functools
    1: import io
    1: import ntpath
    1: import os
    1: import posixpath
    1: import re
    1: import sys
    1: from _collections_abc import Sequence
    1: from errno import EINVAL, ENOENT, ENOTDIR, EBADF
    1: from operator import attrgetter
    1: from stat import S_ISDIR, S_ISLNK, S_ISREG, S_ISSOCK, S_ISBLK, S_ISCHR, S_ISFIFO
    1: from urllib.parse import quote_from_bytes as urlquote_from_bytes
       
       
    1: supports_symlinks = True
    1: if os.name == 'nt':
           import nt
           if sys.getwindowsversion()[:2] >= (6, 0):
               from nt import _getfinalpathname
           else:
               supports_symlinks = False
               _getfinalpathname = None
       else:
    1:     nt = None
       
       
       __all__ = [
    1:     "PurePath", "PurePosixPath", "PureWindowsPath",
    1:     "Path", "PosixPath", "WindowsPath",
           ]
       
       #
       # Internals
       #
       
       # EBADF - guard agains macOS `stat` throwing EBADF
    1: _IGNORED_ERROS = (ENOENT, ENOTDIR, EBADF)
       
       _IGNORED_WINERRORS = (
    1:     21,  # ERROR_NOT_READY - drive exists but is not accessible
       )
       
    1: def _ignore_error(exception):
           return (getattr(exception, 'errno', None) in _IGNORED_ERROS or
                   getattr(exception, 'winerror', None) in _IGNORED_WINERRORS)
       
       
    1: def _is_wildcard_pattern(pat):
           # Whether this pattern needs actual matching using fnmatch, or can
           # be looked up directly as a file.
           return "*" in pat or "?" in pat or "[" in pat
       
       
    2: class _Flavour(object):
           """A flavour implements a particular (platform-specific) set of path
    1:     semantics."""
       
    1:     def __init__(self):
    2:         self.join = self.sep.join
       
    1:     def parse_parts(self, parts):
   22:         parsed = []
   22:         sep = self.sep
   22:         altsep = self.altsep
   22:         drv = root = ''
   22:         it = reversed(parts)
   34:         for part in it:
   23:             if not part:
                       continue
   23:             if altsep:
                       part = part.replace(altsep, sep)
   23:             drv, root, rel = self.splitroot(part)
   23:             if sep in rel:
   43:                 for x in reversed(rel.split(sep)):
   31:                     if x and x != '.':
   31:                         parsed.append(sys.intern(x))
                   else:
   11:                 if rel and rel != '.':
   10:                     parsed.append(sys.intern(rel))
   23:             if drv or root:
   11:                 if not drv:
                           # If no drive is present, try to find one in the previous
                           # parts. This makes the result of parsing e.g.
                           # ("C:", "/", "a") reasonably intuitive.
   11:                     for part in it:
                               if not part:
                                   continue
                               if altsep:
                                   part = part.replace(altsep, sep)
                               drv = self.splitroot(part)[0]
                               if drv:
                                   break
   11:                 break
   22:         if drv or root:
   11:             parsed.append(drv + root)
   22:         parsed.reverse()
   22:         return drv, root, parsed
       
    1:     def join_parsed_parts(self, drv, root, parts, drv2, root2, parts2):
               """
               Join the two paths represented by the respective
               (drive, root, parts) tuples.  Return a new (drive, root, parts) tuple.
               """
    4:         if root2:
                   if not drv2 and drv:
                       return drv, root2, [drv + root2] + parts2[1:]
    4:         elif drv2:
                   if drv2 == drv or self.casefold(drv2) == self.casefold(drv):
                       # Same drive => second path is relative to the first
                       return drv, root, parts + parts2[1:]
               else:
                   # Second path is non-anchored (common case)
    4:             return drv, root, parts + parts2
               return drv2, root2, parts2
       
       
    2: class _WindowsFlavour(_Flavour):
           # Reference for Windows paths can be found at
           # http://msdn.microsoft.com/en-us/library/aa365247%28v=vs.85%29.aspx
       
    1:     sep = '\\'
    1:     altsep = '/'
    1:     has_drv = True
    1:     pathmod = ntpath
       
    1:     is_supported = (os.name == 'nt')
       
    1:     drive_letters = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
    1:     ext_namespace_prefix = '\\\\?\\'
       
           reserved_names = (
               {'CON', 'PRN', 'AUX', 'NUL'} |
   11:         {'COM%d' % i for i in range(1, 10)} |
   11:         {'LPT%d' % i for i in range(1, 10)}
               )
       
           # Interesting findings about extended paths:
           # - '\\?\c:\a', '//?/c:\a' and '//?/c:/a' are all supported
           #   but '\\?\c:/a' is not
           # - extended paths are always absolute; "relative" extended paths will
           #   fail.
       
    1:     def splitroot(self, part, sep=sep):
               first = part[0:1]
               second = part[1:2]
               if (second == sep and first == sep):
                   # XXX extended paths should also disable the collapsing of "."
                   # components (according to MSDN docs).
                   prefix, part = self._split_extended_path(part)
                   first = part[0:1]
                   second = part[1:2]
               else:
                   prefix = ''
               third = part[2:3]
               if (second == sep and first == sep and third != sep):
                   # is a UNC path:
                   # vvvvvvvvvvvvvvvvvvvvv root
                   # \\machine\mountpoint\directory\etc\...
                   #            directory ^^^^^^^^^^^^^^
                   index = part.find(sep, 2)
                   if index != -1:
                       index2 = part.find(sep, index + 1)
                       # a UNC path can't have two slashes in a row
                       # (after the initial two)
                       if index2 != index + 1:
                           if index2 == -1:
                               index2 = len(part)
                           if prefix:
                               return prefix + part[1:index2], sep, part[index2+1:]
                           else:
                               return part[:index2], sep, part[index2+1:]
               drv = root = ''
               if second == ':' and first in self.drive_letters:
                   drv = part[:2]
                   part = part[2:]
                   first = third
               if first == sep:
                   root = first
                   part = part.lstrip(sep)
               return prefix + drv, root, part
       
    1:     def casefold(self, s):
               return s.lower()
       
    1:     def casefold_parts(self, parts):
               return [p.lower() for p in parts]
       
    1:     def resolve(self, path, strict=False):
               s = str(path)
               if not s:
                   return os.getcwd()
               previous_s = None
               if _getfinalpathname is not None:
                   if strict:
                       return self._ext_to_normal(_getfinalpathname(s))
                   else:
                       tail_parts = []  # End of the path after the first one not found
                       while True:
                           try:
                               s = self._ext_to_normal(_getfinalpathname(s))
                           except FileNotFoundError:
                               previous_s = s
                               s, tail = os.path.split(s)
                               tail_parts.append(tail)
                               if previous_s == s:
                                   return path
                           else:
                               return os.path.join(s, *reversed(tail_parts))
               # Means fallback on absolute
               return None
       
    1:     def _split_extended_path(self, s, ext_prefix=ext_namespace_prefix):
               prefix = ''
               if s.startswith(ext_prefix):
                   prefix = s[:4]
                   s = s[4:]
                   if s.startswith('UNC\\'):
                       prefix += s[:3]
                       s = '\\' + s[3:]
               return prefix, s
       
    1:     def _ext_to_normal(self, s):
               # Turn back an extended path into a normal DOS-like path
               return self._split_extended_path(s)[1]
       
    1:     def is_reserved(self, parts):
               # NOTE: the rules for reserved names seem somewhat complicated
               # (e.g. r"..\NUL" is reserved but not r"foo\NUL").
               # We err on the side of caution and return True for paths which are
               # not considered reserved by Windows.
               if not parts:
                   return False
               if parts[0].startswith('\\\\'):
                   # UNC paths are never reserved
                   return False
               return parts[-1].partition('.')[0].upper() in self.reserved_names
       
    1:     def make_uri(self, path):
               # Under Windows, file URIs use the UTF-8 encoding.
               drive = path.drive
               if len(drive) == 2 and drive[1] == ':':
                   # It's a path on a local drive => 'file:///c:/a/b'
                   rest = path.as_posix()[2:].lstrip('/')
                   return 'file:///%s/%s' % (
                       drive, urlquote_from_bytes(rest.encode('utf-8')))
               else:
                   # It's a path on a network drive => 'file://host/share/a/b'
                   return 'file:' + urlquote_from_bytes(path.as_posix().encode('utf-8'))
       
    1:     def gethomedir(self, username):
               if 'HOME' in os.environ:
                   userhome = os.environ['HOME']
               elif 'USERPROFILE' in os.environ:
                   userhome = os.environ['USERPROFILE']
               elif 'HOMEPATH' in os.environ:
                   try:
                       drv = os.environ['HOMEDRIVE']
                   except KeyError:
                       drv = ''
                   userhome = drv + os.environ['HOMEPATH']
               else:
                   raise RuntimeError("Can't determine home directory")
       
               if username:
                   # Try to guess user home directory.  By default all users
                   # directories are located in the same place and are named by
                   # corresponding usernames.  If current user home directory points
                   # to nonstandard place, this guess is likely wrong.
                   if os.environ['USERNAME'] != username:
                       drv, root, parts = self.parse_parts((userhome,))
                       if parts[-1] != os.environ['USERNAME']:
                           raise RuntimeError("Can't determine home directory "
                                              "for %r" % username)
                       parts[-1] = username
                       if drv or root:
                           userhome = drv + root + self.join(parts[1:])
                       else:
                           userhome = self.join(parts)
               return userhome
       
    2: class _PosixFlavour(_Flavour):
    1:     sep = '/'
    1:     altsep = ''
    1:     has_drv = False
    1:     pathmod = posixpath
       
    1:     is_supported = (os.name != 'nt')
       
    1:     def splitroot(self, part, sep=sep):
   23:         if part and part[0] == sep:
   11:             stripped_part = part.lstrip(sep)
                   # According to POSIX path resolution:
                   # http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11
                   # "A pathname that begins with two successive slashes may be
                   # interpreted in an implementation-defined manner, although more
                   # than two leading slashes shall be treated as a single slash".
   11:             if len(part) - len(stripped_part) == 2:
                       return '', sep * 2, stripped_part
                   else:
   11:                 return '', sep, stripped_part
               else:
   12:             return '', '', part
       
    1:     def casefold(self, s):
               return s
       
    1:     def casefold_parts(self, parts):
               return parts
       
    1:     def resolve(self, path, strict=False):
               sep = self.sep
               accessor = path._accessor
               seen = {}
               def _resolve(path, rest):
                   if rest.startswith(sep):
                       path = ''
       
                   for name in rest.split(sep):
                       if not name or name == '.':
                           # current dir
                           continue
                       if name == '..':
                           # parent dir
                           path, _, _ = path.rpartition(sep)
                           continue
                       newpath = path + sep + name
                       if newpath in seen:
                           # Already seen this path
                           path = seen[newpath]
                           if path is not None:
                               # use cached value
                               continue
                           # The symlink is not resolved, so we must have a symlink loop.
                           raise RuntimeError("Symlink loop from %r" % newpath)
                       # Resolve the symbolic link
                       try:
                           target = accessor.readlink(newpath)
                       except OSError as e:
                           if e.errno != EINVAL and strict:
                               raise
                           # Not a symlink, or non-strict mode. We just leave the path
                           # untouched.
                           path = newpath
                       else:
                           seen[newpath] = None # not resolved symlink
                           path = _resolve(path, target)
                           seen[newpath] = path # resolved symlink
       
                   return path
               # NOTE: according to POSIX, getcwd() cannot contain path components
               # which are symlinks.
               base = '' if path.is_absolute() else os.getcwd()
               return _resolve(base, str(path)) or sep
       
    1:     def is_reserved(self, parts):
               return False
       
    1:     def make_uri(self, path):
               # We represent the path using the local filesystem encoding,
               # for portability to other applications.
               bpath = bytes(path)
               return 'file://' + urlquote_from_bytes(bpath)
       
    1:     def gethomedir(self, username):
    6:         if not username:
    6:             try:
    6:                 return os.environ['HOME']
                   except KeyError:
                       import pwd
                       return pwd.getpwuid(os.getuid()).pw_dir
               else:
                   import pwd
                   try:
                       return pwd.getpwnam(username).pw_dir
                   except KeyError:
                       raise RuntimeError("Can't determine home directory "
                                          "for %r" % username)
       
       
    1: _windows_flavour = _WindowsFlavour()
    1: _posix_flavour = _PosixFlavour()
       
       
    2: class _Accessor:
           """An accessor implements a particular (system-specific or not) way of
    1:     accessing paths on the filesystem."""
       
       
    2: class _NormalAccessor(_Accessor):
       
    1:     stat = os.stat
       
    1:     lstat = os.lstat
       
    1:     open = os.open
       
    1:     listdir = os.listdir
       
    1:     scandir = os.scandir
       
    1:     chmod = os.chmod
       
    1:     if hasattr(os, "lchmod"):
               lchmod = os.lchmod
           else:
    1:         def lchmod(self, pathobj, mode):
                   raise NotImplementedError("lchmod() not available on this system")
       
    1:     mkdir = os.mkdir
       
    1:     unlink = os.unlink
       
    1:     rmdir = os.rmdir
       
    1:     rename = os.rename
       
    1:     replace = os.replace
       
    1:     if nt:
               if supports_symlinks:
                   symlink = os.symlink
               else:
                   def symlink(a, b, target_is_directory):
                       raise NotImplementedError("symlink() not available on this system")
           else:
               # Under POSIX, os.symlink() takes two args
    1:         @staticmethod
               def symlink(a, b, target_is_directory):
                   return os.symlink(a, b)
       
    1:     utime = os.utime
       
           # Helper for resolve()
    1:     def readlink(self, path):
               return os.readlink(path)
       
       
    1: _normal_accessor = _NormalAccessor()
       
       
       #
       # Globbing helpers
       #
       
    1: def _make_selector(pattern_parts):
           pat = pattern_parts[0]
           child_parts = pattern_parts[1:]
           if pat == '**':
               cls = _RecursiveWildcardSelector
           elif '**' in pat:
               raise ValueError("Invalid pattern: '**' can only be an entire path component")
           elif _is_wildcard_pattern(pat):
               cls = _WildcardSelector
           else:
               cls = _PreciseSelector
           return cls(pat, child_parts)
       
    1: if hasattr(functools, "lru_cache"):
    1:     _make_selector = functools.lru_cache()(_make_selector)
       
       
    2: class _Selector:
           """A selector matches a specific glob pattern part against the children
    1:     of a given path."""
       
    1:     def __init__(self, child_parts):
               self.child_parts = child_parts
               if child_parts:
                   self.successor = _make_selector(child_parts)
                   self.dironly = True
               else:
                   self.successor = _TerminatingSelector()
                   self.dironly = False
       
    1:     def select_from(self, parent_path):
               """Iterate over all child paths of `parent_path` matched by this
               selector.  This can contain parent_path itself."""
               path_cls = type(parent_path)
               is_dir = path_cls.is_dir
               exists = path_cls.exists
               scandir = parent_path._accessor.scandir
               if not is_dir(parent_path):
                   return iter([])
               return self._select_from(parent_path, is_dir, exists, scandir)
       
       
    2: class _TerminatingSelector:
       
    1:     def _select_from(self, parent_path, is_dir, exists, scandir):
               yield parent_path
       
       
    2: class _PreciseSelector(_Selector):
       
    1:     def __init__(self, name, child_parts):
               self.name = name
               _Selector.__init__(self, child_parts)
       
    1:     def _select_from(self, parent_path, is_dir, exists, scandir):
               try:
                   path = parent_path._make_child_relpath(self.name)
                   if (is_dir if self.dironly else exists)(path):
                       for p in self.successor._select_from(path, is_dir, exists, scandir):
                           yield p
               except PermissionError:
                   return
       
       
    2: class _WildcardSelector(_Selector):
       
    1:     def __init__(self, pat, child_parts):
               self.pat = re.compile(fnmatch.translate(pat))
               _Selector.__init__(self, child_parts)
       
    1:     def _select_from(self, parent_path, is_dir, exists, scandir):
               try:
                   cf = parent_path._flavour.casefold
                   entries = list(scandir(parent_path))
                   for entry in entries:
                       if not self.dironly or entry.is_dir():
                           name = entry.name
                           casefolded = cf(name)
                           if self.pat.match(casefolded):
                               path = parent_path._make_child_relpath(name)
                               for p in self.successor._select_from(path, is_dir, exists, scandir):
                                   yield p
               except PermissionError:
                   return
       
       
       
    2: class _RecursiveWildcardSelector(_Selector):
       
    1:     def __init__(self, pat, child_parts):
               _Selector.__init__(self, child_parts)
       
    1:     def _iterate_directories(self, parent_path, is_dir, scandir):
               yield parent_path
               try:
                   entries = list(scandir(parent_path))
                   for entry in entries:
                       entry_is_dir = False
                       try:
                           entry_is_dir = entry.is_dir()
                       except OSError as e:
                           if not _ignore_error(e):
                               raise
                       if entry_is_dir and not entry.is_symlink():
                           path = parent_path._make_child_relpath(entry.name)
                           for p in self._iterate_directories(path, is_dir, scandir):
                               yield p
               except PermissionError:
                   return
       
    1:     def _select_from(self, parent_path, is_dir, exists, scandir):
               try:
                   yielded = set()
                   try:
                       successor_select = self.successor._select_from
                       for starting_point in self._iterate_directories(parent_path, is_dir, scandir):
                           for p in successor_select(starting_point, is_dir, exists, scandir):
                               if p not in yielded:
                                   yield p
                                   yielded.add(p)
                   finally:
                       yielded.clear()
               except PermissionError:
                   return
       
       
       #
       # Public API
       #
       
    2: class _PathParents(Sequence):
           """This object provides sequence-like access to the logical ancestors
    1:     of a path.  Don't try to construct it yourself."""
    1:     __slots__ = ('_pathcls', '_drv', '_root', '_parts')
       
    1:     def __init__(self, path):
               # We don't store the instance to avoid reference cycles
               self._pathcls = type(path)
               self._drv = path._drv
               self._root = path._root
               self._parts = path._parts
       
    1:     def __len__(self):
               if self._drv or self._root:
                   return len(self._parts) - 1
               else:
                   return len(self._parts)
       
    1:     def __getitem__(self, idx):
               if idx < 0 or idx >= len(self):
                   raise IndexError(idx)
               return self._pathcls._from_parsed_parts(self._drv, self._root,
                                                       self._parts[:-idx - 1])
       
    1:     def __repr__(self):
               return "<{}.parents>".format(self._pathcls.__name__)
       
       
    2: class PurePath(object):
           """Base class for manipulating paths without I/O.
       
           PurePath represents a filesystem path and offers operations which
           don't imply any actual filesystem I/O.  Depending on your system,
           instantiating a PurePath will return either a PurePosixPath or a
           PureWindowsPath object.  You can also instantiate either of these classes
           directly, regardless of your system.
    1:     """
           __slots__ = (
    1:         '_drv', '_root', '_parts',
               '_str', '_hash', '_pparts', '_cached_cparts',
           )
       
    1:     def __new__(cls, *args):
               """Construct a PurePath from one or several strings and or existing
               PurePath objects.  The strings and path objects are combined so as
               to yield a canonicalized path, which is incorporated into the
               new PurePath object.
               """
               if cls is PurePath:
                   cls = PureWindowsPath if os.name == 'nt' else PurePosixPath
               return cls._from_parts(args)
       
    1:     def __reduce__(self):
               # Using the parts tuple helps share interned path parts
               # when pickling related paths.
               return (self.__class__, tuple(self._parts))
       
    1:     @classmethod
           def _parse_args(cls, args):
               # This is useful when you don't want to create an instance, just
               # canonicalize some constructor arguments.
   21:         parts = []
   39:         for a in args:
   18:             if isinstance(a, PurePath):
    1:                 parts += a._parts
                   else:
   17:                 a = os.fspath(a)
   17:                 if isinstance(a, str):
                           # Force-cast str subclasses to str (issue #21127)
   17:                     parts.append(str(a))
                       else:
                           raise TypeError(
                               "argument should be a str object or an os.PathLike "
                               "object returning str, not %r"
                               % type(a))
   21:         return cls._flavour.parse_parts(parts)
       
    1:     @classmethod
    1:     def _from_parts(cls, args, init=True):
               # We need to call _parse_args on the instance, so as to get the
               # right flavour.
   17:         self = object.__new__(cls)
   17:         drv, root, parts = self._parse_args(args)
   17:         self._drv = drv
   17:         self._root = root
   17:         self._parts = parts
   17:         if init:
                   self._init()
   17:         return self
       
    1:     @classmethod
    1:     def _from_parsed_parts(cls, drv, root, parts, init=True):
    5:         self = object.__new__(cls)
    5:         self._drv = drv
    5:         self._root = root
    5:         self._parts = parts
    5:         if init:
    5:             self._init()
    5:         return self
       
    1:     @classmethod
           def _format_parsed_parts(cls, drv, root, parts):
   10:         if drv or root:
   10:             return drv + root + cls._flavour.join(parts[1:])
               else:
                   return cls._flavour.join(parts)
       
    1:     def _init(self):
               # Overridden in concrete Path
               pass
       
    1:     def _make_child(self, args):
    4:         drv, root, parts = self._parse_args(args)
    4:         drv, root, parts = self._flavour.join_parsed_parts(
    4:             self._drv, self._root, self._parts, drv, root, parts)
    4:         return self._from_parsed_parts(drv, root, parts)
       
    1:     def __str__(self):
               """Return the string representation of the path, suitable for
               passing to system calls."""
   19:         try:
   19:             return self._str
   10:         except AttributeError:
   10:             self._str = self._format_parsed_parts(self._drv, self._root,
   10:                                                   self._parts) or '.'
   10:             return self._str
       
    1:     def __fspath__(self):
    7:         return str(self)
       
    1:     def as_posix(self):
               """Return the string representation of the path with forward (/)
               slashes."""
               f = self._flavour
               return str(self).replace(f.sep, '/')
       
    1:     def __bytes__(self):
               """Return the bytes representation of the path.  This is only
               recommended to use under Unix."""
               return os.fsencode(self)
       
    1:     def __repr__(self):
               return "{}({!r})".format(self.__class__.__name__, self.as_posix())
       
    1:     def as_uri(self):
               """Return the path as a 'file' URI."""
               if not self.is_absolute():
                   raise ValueError("relative path can't be expressed as a file URI")
               return self._flavour.make_uri(self)
       
    1:     @property
           def _cparts(self):
               # Cached casefolded parts, for hashing and comparison
               try:
                   return self._cached_cparts
               except AttributeError:
                   self._cached_cparts = self._flavour.casefold_parts(self._parts)
                   return self._cached_cparts
       
    1:     def __eq__(self, other):
               if not isinstance(other, PurePath):
                   return NotImplemented
               return self._cparts == other._cparts and self._flavour is other._flavour
       
    1:     def __hash__(self):
               try:
                   return self._hash
               except AttributeError:
                   self._hash = hash(tuple(self._cparts))
                   return self._hash
       
    1:     def __lt__(self, other):
               if not isinstance(other, PurePath) or self._flavour is not other._flavour:
                   return NotImplemented
               return self._cparts < other._cparts
       
    1:     def __le__(self, other):
               if not isinstance(other, PurePath) or self._flavour is not other._flavour:
                   return NotImplemented
               return self._cparts <= other._cparts
       
    1:     def __gt__(self, other):
               if not isinstance(other, PurePath) or self._flavour is not other._flavour:
                   return NotImplemented
               return self._cparts > other._cparts
       
    1:     def __ge__(self, other):
               if not isinstance(other, PurePath) or self._flavour is not other._flavour:
                   return NotImplemented
               return self._cparts >= other._cparts
       
    1:     drive = property(attrgetter('_drv'),
    1:                      doc="""The drive prefix (letter or UNC path), if any.""")
       
    1:     root = property(attrgetter('_root'),
    1:                     doc="""The root of the path, if any.""")
       
    1:     @property
           def anchor(self):
               """The concatenation of the drive and root, or ''."""
               anchor = self._drv + self._root
               return anchor
       
    1:     @property
           def name(self):
               """The final path component, if any."""
    1:         parts = self._parts
    1:         if len(parts) == (1 if (self._drv or self._root) else 0):
                   return ''
    1:         return parts[-1]
       
    1:     @property
           def suffix(self):
               """The final component's last suffix, if any."""
               name = self.name
               i = name.rfind('.')
               if 0 < i < len(name) - 1:
                   return name[i:]
               else:
                   return ''
       
    1:     @property
           def suffixes(self):
               """A list of the final component's suffixes, if any."""
               name = self.name
               if name.endswith('.'):
                   return []
               name = name.lstrip('.')
               return ['.' + suffix for suffix in name.split('.')[1:]]
       
    1:     @property
           def stem(self):
               """The final path component, minus its last suffix."""
               name = self.name
               i = name.rfind('.')
               if 0 < i < len(name) - 1:
                   return name[:i]
               else:
                   return name
       
    1:     def with_name(self, name):
               """Return a new path with the file name changed."""
    1:         if not self.name:
                   raise ValueError("%r has an empty name" % (self,))
    1:         drv, root, parts = self._flavour.parse_parts((name,))
    1:         if (not name or name[-1] in [self._flavour.sep, self._flavour.altsep]
    1:             or drv or root or len(parts) != 1):
                   raise ValueError("Invalid name %r" % (name))
    1:         return self._from_parsed_parts(self._drv, self._root,
    1:                                        self._parts[:-1] + [name])
       
    1:     def with_suffix(self, suffix):
               """Return a new path with the file suffix changed.  If the path
               has no suffix, add given suffix.  If the given suffix is an empty
               string, remove the suffix from the path.
               """
               f = self._flavour
               if f.sep in suffix or f.altsep and f.altsep in suffix:
                   raise ValueError("Invalid suffix %r" % (suffix,))
               if suffix and not suffix.startswith('.') or suffix == '.':
                   raise ValueError("Invalid suffix %r" % (suffix))
               name = self.name
               if not name:
                   raise ValueError("%r has an empty name" % (self,))
               old_suffix = self.suffix
               if not old_suffix:
                   name = name + suffix
               else:
                   name = name[:-len(old_suffix)] + suffix
               return self._from_parsed_parts(self._drv, self._root,
                                              self._parts[:-1] + [name])
       
    1:     def relative_to(self, *other):
               """Return the relative path to another path identified by the passed
               arguments.  If the operation is not possible (because this is not
               a subpath of the other path), raise ValueError.
               """
               # For the purpose of this method, drive and root are considered
               # separate parts, i.e.:
               #   Path('c:/').relative_to('c:')  gives Path('/')
               #   Path('c:/').relative_to('/')   raise ValueError
               if not other:
                   raise TypeError("need at least one argument")
               parts = self._parts
               drv = self._drv
               root = self._root
               if root:
                   abs_parts = [drv, root] + parts[1:]
               else:
                   abs_parts = parts
               to_drv, to_root, to_parts = self._parse_args(other)
               if to_root:
                   to_abs_parts = [to_drv, to_root] + to_parts[1:]
               else:
                   to_abs_parts = to_parts
               n = len(to_abs_parts)
               cf = self._flavour.casefold_parts
               if (root or drv) if n == 0 else cf(abs_parts[:n]) != cf(to_abs_parts):
                   formatted = self._format_parsed_parts(to_drv, to_root, to_parts)
                   raise ValueError("{!r} does not start with {!r}"
                                    .format(str(self), str(formatted)))
               return self._from_parsed_parts('', root if n == 1 else '',
                                              abs_parts[n:])
       
    1:     @property
           def parts(self):
               """An object providing sequence-like access to the
               components in the filesystem path."""
               # We cache the tuple to avoid building a new one each time .parts
               # is accessed.  XXX is this necessary?
               try:
                   return self._pparts
               except AttributeError:
                   self._pparts = tuple(self._parts)
                   return self._pparts
       
    1:     def joinpath(self, *args):
               """Combine this path with one or several arguments, and return a
               new path representing either a subpath (if all arguments are relative
               paths) or a totally different path (if one of the arguments is
               anchored).
               """
               return self._make_child(args)
       
    1:     def __truediv__(self, key):
    4:         return self._make_child((key,))
       
    1:     def __rtruediv__(self, key):
               return self._from_parts([key] + self._parts)
       
    1:     @property
           def parent(self):
               """The logical parent of the path."""
               drv = self._drv
               root = self._root
               parts = self._parts
               if len(parts) == 1 and (drv or root):
                   return self
               return self._from_parsed_parts(drv, root, parts[:-1])
       
    1:     @property
           def parents(self):
               """A sequence of this path's logical parents."""
               return _PathParents(self)
       
    1:     def is_absolute(self):
               """True if the path is absolute (has both a root and, if applicable,
               a drive)."""
               if not self._root:
                   return False
               return not self._flavour.has_drv or bool(self._drv)
       
    1:     def is_reserved(self):
               """Return True if the path contains one of the special names reserved
               by the system, if any."""
               return self._flavour.is_reserved(self._parts)
       
    1:     def match(self, path_pattern):
               """
               Return True if this path matches the given pattern.
               """
               cf = self._flavour.casefold
               path_pattern = cf(path_pattern)
               drv, root, pat_parts = self._flavour.parse_parts((path_pattern,))
               if not pat_parts:
                   raise ValueError("empty pattern")
               if drv and drv != cf(self._drv):
                   return False
               if root and root != cf(self._root):
                   return False
               parts = self._cparts
               if drv or root:
                   if len(pat_parts) != len(parts):
                       return False
                   pat_parts = pat_parts[1:]
               elif len(pat_parts) > len(parts):
                   return False
               for part, pat in zip(reversed(parts), reversed(pat_parts)):
                   if not fnmatch.fnmatchcase(part, pat):
                       return False
               return True
       
       # Can't subclass os.PathLike from PurePath and keep the constructor
       # optimizations in PurePath._parse_args().
    1: os.PathLike.register(PurePath)
       
       
    2: class PurePosixPath(PurePath):
           """PurePath subclass for non-Windows systems.
       
           On a POSIX system, instantiating a PurePath should return this object.
           However, you can also instantiate it directly on any system.
    1:     """
    1:     _flavour = _posix_flavour
    1:     __slots__ = ()
       
       
    2: class PureWindowsPath(PurePath):
           """PurePath subclass for Windows systems.
       
           On a Windows system, instantiating a PurePath should return this object.
           However, you can also instantiate it directly on any system.
    1:     """
    1:     _flavour = _windows_flavour
    1:     __slots__ = ()
       
       
       # Filesystem-accessing classes
       
       
    2: class Path(PurePath):
           """PurePath subclass that can make system calls.
       
           Path represents a filesystem path but unlike PurePath, also offers
           methods to do system calls on path objects. Depending on your system,
           instantiating a Path will return either a PosixPath or a WindowsPath
           object. You can also instantiate a PosixPath or WindowsPath directly,
           but cannot instantiate a WindowsPath on a POSIX system or vice versa.
    1:     """
           __slots__ = (
    1:         '_accessor',
               '_closed',
           )
       
    1:     def __new__(cls, *args, **kwargs):
   17:         if cls is Path:
   17:             cls = WindowsPath if os.name == 'nt' else PosixPath
   17:         self = cls._from_parts(args, init=False)
   17:         if not self._flavour.is_supported:
                   raise NotImplementedError("cannot instantiate %r on your system"
                                             % (cls.__name__,))
   17:         self._init()
   17:         return self
       
           def _init(self,
                     # Private non-constructor arguments
    1:               template=None,
                     ):
   22:         self._closed = False
   22:         if template is not None:
                   self._accessor = template._accessor
               else:
   22:             self._accessor = _normal_accessor
       
    1:     def _make_child_relpath(self, part):
               # This is an optimization used for dir walking.  `part` must be
               # a single part relative to this path.
               parts = self._parts + [part]
               return self._from_parsed_parts(self._drv, self._root, parts)
       
    1:     def __enter__(self):
               if self._closed:
                   self._raise_closed()
               return self
       
    1:     def __exit__(self, t, v, tb):
               self._closed = True
       
    1:     def _raise_closed(self):
               raise ValueError("I/O operation on closed path")
       
    1:     def _opener(self, name, flags, mode=0o666):
               # A stub for the opener argument to built-in open()
               return self._accessor.open(self, flags, mode)
       
    1:     def _raw_open(self, flags, mode=0o777):
               """
               Open the file pointed by this path and return a file descriptor,
               as os.open() does.
               """
               if self._closed:
                   self._raise_closed()
               return self._accessor.open(self, flags, mode)
       
           # Public API
       
    1:     @classmethod
           def cwd(cls):
               """Return a new path pointing to the current working directory
               (as returned by os.getcwd()).
               """
               return cls(os.getcwd())
       
    1:     @classmethod
           def home(cls):
               """Return a new path pointing to the user's home directory (as
               returned by os.path.expanduser('~')).
               """
    6:         return cls(cls()._flavour.gethomedir(None))
       
    1:     def samefile(self, other_path):
               """Return whether other_path is the same or not as this file
               (as returned by os.path.samefile()).
               """
               st = self.stat()
               try:
                   other_st = other_path.stat()
               except AttributeError:
                   other_st = os.stat(other_path)
               return os.path.samestat(st, other_st)
       
    1:     def iterdir(self):
               """Iterate over the files in this directory.  Does not yield any
               result for the special paths '.' and '..'.
               """
               if self._closed:
                   self._raise_closed()
               for name in self._accessor.listdir(self):
                   if name in {'.', '..'}:
                       # Yielding a path object for these makes little sense
                       continue
                   yield self._make_child_relpath(name)
                   if self._closed:
                       self._raise_closed()
       
    1:     def glob(self, pattern):
               """Iterate over this subtree and yield all existing files (of any
               kind, including directories) matching the given relative pattern.
               """
               if not pattern:
                   raise ValueError("Unacceptable pattern: {!r}".format(pattern))
               pattern = self._flavour.casefold(pattern)
               drv, root, pattern_parts = self._flavour.parse_parts((pattern,))
               if drv or root:
                   raise NotImplementedError("Non-relative patterns are unsupported")
               selector = _make_selector(tuple(pattern_parts))
               for p in selector.select_from(self):
                   yield p
       
    1:     def rglob(self, pattern):
               """Recursively yield all existing files (of any kind, including
               directories) matching the given relative pattern, anywhere in
               this subtree.
               """
               pattern = self._flavour.casefold(pattern)
               drv, root, pattern_parts = self._flavour.parse_parts((pattern,))
               if drv or root:
                   raise NotImplementedError("Non-relative patterns are unsupported")
               selector = _make_selector(("**",) + tuple(pattern_parts))
               for p in selector.select_from(self):
                   yield p
       
    1:     def absolute(self):
               """Return an absolute version of this path.  This function works
               even if the path doesn't point to anything.
       
               No normalization is done, i.e. all '.' and '..' will be kept along.
               Use resolve() to get the canonical path to a file.
               """
               # XXX untested yet!
               if self._closed:
                   self._raise_closed()
               if self.is_absolute():
                   return self
               # FIXME this must defer to the specific flavour (and, under Windows,
               # use nt._getfullpathname())
               obj = self._from_parts([os.getcwd()] + self._parts, init=False)
               obj._init(template=self)
               return obj
       
    1:     def resolve(self, strict=False):
               """
               Make the path absolute, resolving all symlinks on the way and also
               normalizing it (for example turning slashes into backslashes under
               Windows).
               """
               if self._closed:
                   self._raise_closed()
               s = self._flavour.resolve(self, strict=strict)
               if s is None:
                   # No symlink resolution => for consistency, raise an error if
                   # the path doesn't exist or is forbidden
                   self.stat()
                   s = str(self.absolute())
               # Now we have no symlinks in the path, it's safe to normalize it.
               normed = self._flavour.pathmod.normpath(s)
               obj = self._from_parts((normed,), init=False)
               obj._init(template=self)
               return obj
       
    1:     def stat(self):
               """
               Return the result of the stat() system call on this path, like
               os.stat() does.
               """
    5:         return self._accessor.stat(self)
       
    1:     def owner(self):
               """
               Return the login name of the file owner.
               """
               import pwd
               return pwd.getpwuid(self.stat().st_uid).pw_name
       
    1:     def group(self):
               """
               Return the group name of the file gid.
               """
               import grp
               return grp.getgrgid(self.stat().st_gid).gr_name
       
           def open(self, mode='r', buffering=-1, encoding=None,
    1:              errors=None, newline=None):
               """
               Open the file pointed by this path and return a file object, as
               the built-in open() function does.
               """
               if self._closed:
                   self._raise_closed()
               return io.open(self, mode, buffering, encoding, errors, newline,
                              opener=self._opener)
       
    1:     def read_bytes(self):
               """
               Open the file in bytes mode, read it, and close the file.
               """
               with self.open(mode='rb') as f:
                   return f.read()
       
    1:     def read_text(self, encoding=None, errors=None):
               """
               Open the file in text mode, read it, and close the file.
               """
               with self.open(mode='r', encoding=encoding, errors=errors) as f:
                   return f.read()
       
    1:     def write_bytes(self, data):
               """
               Open the file in bytes mode, write to it, and close the file.
               """
               # type-check for the buffer interface before truncating the file
               view = memoryview(data)
               with self.open(mode='wb') as f:
                   return f.write(view)
       
    1:     def write_text(self, data, encoding=None, errors=None):
               """
               Open the file in text mode, write to it, and close the file.
               """
               if not isinstance(data, str):
                   raise TypeError('data must be str, not %s' %
                                   data.__class__.__name__)
               with self.open(mode='w', encoding=encoding, errors=errors) as f:
                   return f.write(data)
       
    1:     def touch(self, mode=0o666, exist_ok=True):
               """
               Create this file with the given access mode, if it doesn't exist.
               """
               if self._closed:
                   self._raise_closed()
               if exist_ok:
                   # First try to bump modification time
                   # Implementation note: GNU touch uses the UTIME_NOW option of
                   # the utimensat() / futimens() functions.
                   try:
                       self._accessor.utime(self, None)
                   except OSError:
                       # Avoid exception chaining
                       pass
                   else:
                       return
               flags = os.O_CREAT | os.O_WRONLY
               if not exist_ok:
                   flags |= os.O_EXCL
               fd = self._raw_open(flags, mode)
               os.close(fd)
       
    1:     def mkdir(self, mode=0o777, parents=False, exist_ok=False):
               """
               Create a new directory at this given path.
               """
    2:         if self._closed:
                   self._raise_closed()
    2:         try:
    2:             self._accessor.mkdir(self, mode)
    2:         except FileNotFoundError:
                   if not parents or self.parent == self:
                       raise
                   self.parent.mkdir(parents=True, exist_ok=True)
                   self.mkdir(mode, parents=False, exist_ok=exist_ok)
    2:         except OSError:
                   # Cannot rely on checking for EEXIST, since the operating system
                   # could give priority to other errors like EACCES or EROFS
    2:             if not exist_ok or not self.is_dir():
                       raise
       
    1:     def chmod(self, mode):
               """
               Change the permissions of the path, like os.chmod().
               """
               if self._closed:
                   self._raise_closed()
               self._accessor.chmod(self, mode)
       
    1:     def lchmod(self, mode):
               """
               Like chmod(), except if the path points to a symlink, the symlink's
               permissions are changed, rather than its target's.
               """
               if self._closed:
                   self._raise_closed()
               self._accessor.lchmod(self, mode)
       
    1:     def unlink(self):
               """
               Remove this file or link.
               If the path is a directory, use rmdir() instead.
               """
               if self._closed:
                   self._raise_closed()
               self._accessor.unlink(self)
       
    1:     def rmdir(self):
               """
               Remove this directory.  The directory must be empty.
               """
               if self._closed:
                   self._raise_closed()
               self._accessor.rmdir(self)
       
    1:     def lstat(self):
               """
               Like stat(), except if the path points to a symlink, the symlink's
               status information is returned, rather than its target's.
               """
               if self._closed:
                   self._raise_closed()
               return self._accessor.lstat(self)
       
    1:     def rename(self, target):
               """
               Rename this path to the given path.
               """
               if self._closed:
                   self._raise_closed()
               self._accessor.rename(self, target)
       
    1:     def replace(self, target):
               """
               Rename this path to the given path, clobbering the existing
               destination if it exists.
               """
               if self._closed:
                   self._raise_closed()
               self._accessor.replace(self, target)
       
    1:     def symlink_to(self, target, target_is_directory=False):
               """
               Make this path a symlink pointing to the given path.
               Note the order of arguments (self, target) is the reverse of os.symlink's.
               """
               if self._closed:
                   self._raise_closed()
               self._accessor.symlink(target, self, target_is_directory)
       
           # Convenience functions for querying the stat results
       
    1:     def exists(self):
               """
               Whether this path exists.
               """
               try:
                   self.stat()
               except OSError as e:
                   if not _ignore_error(e):
                       raise
                   return False
               return True
       
    1:     def is_dir(self):
               """
               Whether this path is a directory.
               """
    5:         try:
    5:             return S_ISDIR(self.stat().st_mode)
               except OSError as e:
                   if not _ignore_error(e):
                       raise
                   # Path doesn't exist or is a broken symlink
                   # (see https://bitbucket.org/pitrou/pathlib/issue/12/)
                   return False
       
    1:     def is_file(self):
               """
               Whether this path is a regular file (also True for symlinks pointing
               to regular files).
               """
               try:
                   return S_ISREG(self.stat().st_mode)
               except OSError as e:
                   if not _ignore_error(e):
                       raise
                   # Path doesn't exist or is a broken symlink
                   # (see https://bitbucket.org/pitrou/pathlib/issue/12/)
                   return False
       
    1:     def is_mount(self):
               """
               Check if this path is a POSIX mount point
               """
               # Need to exist and be a dir
               if not self.exists() or not self.is_dir():
                   return False
       
               parent = Path(self.parent)
               try:
                   parent_dev = parent.stat().st_dev
               except OSError:
                   return False
       
               dev = self.stat().st_dev
               if dev != parent_dev:
                   return True
               ino = self.stat().st_ino
               parent_ino = parent.stat().st_ino
               return ino == parent_ino
       
    1:     def is_symlink(self):
               """
               Whether this path is a symbolic link.
               """
               try:
                   return S_ISLNK(self.lstat().st_mode)
               except OSError as e:
                   if not _ignore_error(e):
                       raise
                   # Path doesn't exist
                   return False
       
    1:     def is_block_device(self):
               """
               Whether this path is a block device.
               """
               try:
                   return S_ISBLK(self.stat().st_mode)
               except OSError as e:
                   if not _ignore_error(e):
                       raise
                   # Path doesn't exist or is a broken symlink
                   # (see https://bitbucket.org/pitrou/pathlib/issue/12/)
                   return False
       
    1:     def is_char_device(self):
               """
               Whether this path is a character device.
               """
               try:
                   return S_ISCHR(self.stat().st_mode)
               except OSError as e:
                   if not _ignore_error(e):
                       raise
                   # Path doesn't exist or is a broken symlink
                   # (see https://bitbucket.org/pitrou/pathlib/issue/12/)
                   return False
       
    1:     def is_fifo(self):
               """
               Whether this path is a FIFO.
               """
               try:
                   return S_ISFIFO(self.stat().st_mode)
               except OSError as e:
                   if not _ignore_error(e):
                       raise
                   # Path doesn't exist or is a broken symlink
                   # (see https://bitbucket.org/pitrou/pathlib/issue/12/)
                   return False
       
    1:     def is_socket(self):
               """
               Whether this path is a socket.
               """
               try:
                   return S_ISSOCK(self.stat().st_mode)
               except OSError as e:
                   if not _ignore_error(e):
                       raise
                   # Path doesn't exist or is a broken symlink
                   # (see https://bitbucket.org/pitrou/pathlib/issue/12/)
                   return False
       
    1:     def expanduser(self):
               """ Return a new path with expanded ~ and ~user constructs
               (as returned by os.path.expanduser)
               """
               if (not (self._drv or self._root) and
                   self._parts and self._parts[0][:1] == '~'):
                   homedir = self._flavour.gethomedir(self._parts[0][1:])
                   return self._from_parts([homedir] + self._parts[1:])
       
               return self
       
       
    2: class PosixPath(Path, PurePosixPath):
           """Path subclass for non-Windows systems.
       
           On a POSIX system, instantiating a Path should return this object.
    1:     """
    1:     __slots__ = ()
       
    2: class WindowsPath(Path, PureWindowsPath):
           """Path subclass for Windows systems.
       
           On a Windows system, instantiating a Path should return this object.
    1:     """
    1:     __slots__ = ()
       
    1:     def owner(self):
               raise NotImplementedError("Path.owner() is unsupported on this system")
       
    1:     def group(self):
               raise NotImplementedError("Path.group() is unsupported on this system")
       
    1:     def is_mount(self):
               raise NotImplementedError("Path.is_mount() is unsupported on this system")
