       # This file is dual licensed under the terms of the Apache License, Version
       # 2.0, and the BSD License. See the LICENSE file in the root of this repository
       # for complete details.
       
    1: from __future__ import absolute_import, division, print_function
       
    1: from asn1crypto.algos import DSASignature
       
    1: import six
       
    1: from cryptography import utils
    1: from cryptography.hazmat.primitives import hashes
       
       
    1: def decode_dss_signature(signature):
           data = DSASignature.load(signature, strict=True).native
           return data['r'], data['s']
       
       
    1: def encode_dss_signature(r, s):
           if (
               not isinstance(r, six.integer_types) or
               not isinstance(s, six.integer_types)
           ):
               raise ValueError("Both r and s must be integers")
       
           return DSASignature({'r': r, 's': s}).dump()
       
       
    2: class Prehashed(object):
    1:     def __init__(self, algorithm):
               if not isinstance(algorithm, hashes.HashAlgorithm):
                   raise TypeError("Expected instance of HashAlgorithm.")
       
               self._algorithm = algorithm
               self._digest_size = algorithm.digest_size
       
    1:     digest_size = utils.read_only_property("_digest_size")
