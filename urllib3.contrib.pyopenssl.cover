       """
       SSL with SNI_-support for Python 2. Follow these instructions if you would
       like to verify SSL certificates in Python 2. Note, the default libraries do
       *not* do certificate checking; you need to do additional work to validate
       certificates yourself.
       
       This needs the following packages installed:
       
       * pyOpenSSL (tested with 16.0.0)
       * cryptography (minimum 1.3.4, from pyopenssl)
       * idna (minimum 2.0, from cryptography)
       
       However, pyopenssl depends on cryptography, which depends on idna, so while we
       use all three directly here we end up having relatively few packages required.
       
       You can install them with the following command:
       
           pip install pyopenssl cryptography idna
       
       To activate certificate checking, call
       :func:`~urllib3.contrib.pyopenssl.inject_into_urllib3` from your Python code
       before you begin making HTTP requests. This can be done in a ``sitecustomize``
       module, or at any other time before your application begins using ``urllib3``,
       like this::
       
           try:
               import urllib3.contrib.pyopenssl
               urllib3.contrib.pyopenssl.inject_into_urllib3()
           except ImportError:
               pass
       
       Now you can use :mod:`urllib3` as you normally would, and it will support SNI
       when the required modules are installed.
       
       Activating this module also has the positive side effect of disabling SSL/TLS
       compression in Python 2 (see `CRIME attack`_).
       
       If you want to configure the default list of supported cipher suites, you can
       set the ``urllib3.contrib.pyopenssl.DEFAULT_SSL_CIPHER_LIST`` variable.
       
       .. _sni: https://en.wikipedia.org/wiki/Server_Name_Indication
       .. _crime attack: https://en.wikipedia.org/wiki/CRIME_(security_exploit)
    1: """
    1: from __future__ import absolute_import
       
    1: import OpenSSL.SSL
    1: from cryptography import x509
    1: from cryptography.hazmat.backends.openssl import backend as openssl_backend
    1: from cryptography.hazmat.backends.openssl.x509 import _Certificate
    1: try:
    1:     from cryptography.x509 import UnsupportedExtension
    1: except ImportError:
           # UnsupportedExtension is gone in cryptography >= 2.1.0
    2:     class UnsupportedExtension(Exception):
    1:         pass
       
    1: from socket import timeout, error as SocketError
    1: from io import BytesIO
       
    1: try:  # Platform-specific: Python 2
    1:     from socket import _fileobject
    1: except ImportError:  # Platform-specific: Python 3
    1:     _fileobject = None
    1:     from ..packages.backports.makefile import backport_makefile
       
    1: import logging
    1: import ssl
    1: from ..packages import six
    1: import sys
       
    1: from .. import util
       
       
    1: __all__ = ['inject_into_urllib3', 'extract_from_urllib3']
       
       # SNI always works.
    1: HAS_SNI = True
       
       # Map from urllib3 to PyOpenSSL compatible parameter-values.
       _openssl_versions = {
    1:     util.PROTOCOL_TLS: OpenSSL.SSL.SSLv23_METHOD,
    1:     ssl.PROTOCOL_TLSv1: OpenSSL.SSL.TLSv1_METHOD,
       }
       
    1: if hasattr(ssl, 'PROTOCOL_SSLv3') and hasattr(OpenSSL.SSL, 'SSLv3_METHOD'):
           _openssl_versions[ssl.PROTOCOL_SSLv3] = OpenSSL.SSL.SSLv3_METHOD
       
    1: if hasattr(ssl, 'PROTOCOL_TLSv1_1') and hasattr(OpenSSL.SSL, 'TLSv1_1_METHOD'):
    1:     _openssl_versions[ssl.PROTOCOL_TLSv1_1] = OpenSSL.SSL.TLSv1_1_METHOD
       
    1: if hasattr(ssl, 'PROTOCOL_TLSv1_2') and hasattr(OpenSSL.SSL, 'TLSv1_2_METHOD'):
    1:     _openssl_versions[ssl.PROTOCOL_TLSv1_2] = OpenSSL.SSL.TLSv1_2_METHOD
       
       
       _stdlib_to_openssl_verify = {
    1:     ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,
    1:     ssl.CERT_OPTIONAL: OpenSSL.SSL.VERIFY_PEER,
    1:     ssl.CERT_REQUIRED:
    1:         OpenSSL.SSL.VERIFY_PEER + OpenSSL.SSL.VERIFY_FAIL_IF_NO_PEER_CERT,
       }
    1: _openssl_to_stdlib_verify = dict(
    5:     (v, k) for k, v in _stdlib_to_openssl_verify.items()
       )
       
       # OpenSSL will only write 16K at a time
    1: SSL_WRITE_BLOCKSIZE = 16384
       
    1: orig_util_HAS_SNI = util.HAS_SNI
    1: orig_util_SSLContext = util.ssl_.SSLContext
       
       
    1: log = logging.getLogger(__name__)
       
       
    1: def inject_into_urllib3():
           'Monkey-patch urllib3 with PyOpenSSL-backed SSL-support.'
       
    1:     _validate_dependencies_met()
       
    1:     util.SSLContext = PyOpenSSLContext
    1:     util.ssl_.SSLContext = PyOpenSSLContext
    1:     util.HAS_SNI = HAS_SNI
    1:     util.ssl_.HAS_SNI = HAS_SNI
    1:     util.IS_PYOPENSSL = True
    1:     util.ssl_.IS_PYOPENSSL = True
       
       
    1: def extract_from_urllib3():
           'Undo monkey-patching by :func:`inject_into_urllib3`.'
       
           util.SSLContext = orig_util_SSLContext
           util.ssl_.SSLContext = orig_util_SSLContext
           util.HAS_SNI = orig_util_HAS_SNI
           util.ssl_.HAS_SNI = orig_util_HAS_SNI
           util.IS_PYOPENSSL = False
           util.ssl_.IS_PYOPENSSL = False
       
       
    1: def _validate_dependencies_met():
           """
           Verifies that PyOpenSSL's package-level dependencies have been met.
           Throws `ImportError` if they are not met.
           """
           # Method added in `cryptography==1.1`; not available in older versions
    1:     from cryptography.x509.extensions import Extensions
    1:     if getattr(Extensions, "get_extension_for_class", None) is None:
               raise ImportError("'cryptography' module missing required functionality.  "
                                 "Try upgrading to v1.3.4 or newer.")
       
           # pyOpenSSL 0.14 and above use cryptography for OpenSSL bindings. The _x509
           # attribute is only present on those versions.
    1:     from OpenSSL.crypto import X509
    1:     x509 = X509()
    1:     if getattr(x509, "_x509", None) is None:
               raise ImportError("'pyOpenSSL' module missing required functionality. "
                                 "Try upgrading to v0.14 or newer.")
       
       
    1: def _dnsname_to_stdlib(name):
           """
           Converts a dNSName SubjectAlternativeName field to the form used by the
           standard library on the given Python version.
       
           Cryptography produces a dNSName as a unicode string that was idna-decoded
           from ASCII bytes. We need to idna-encode that string to get it back, and
           then on Python 3 we also need to convert to unicode via UTF-8 (the stdlib
           uses PyUnicode_FromStringAndSize on it, which decodes via UTF-8).
       
           If the name cannot be idna-encoded then we return None signalling that
           the name given should be skipped.
           """
   23:     def idna_encode(name):
               """
               Borrowed wholesale from the Python Cryptography Project. It turns out
               that we can't just safely call `idna.encode`: it can explode for
               wildcard names. This avoids that problem.
               """
   23:         import idna
       
   23:         try:
   69:             for prefix in [u'*.', u'.']:
   46:                 if name.startswith(prefix):
                           name = name[len(prefix):]
                           return prefix.encode('ascii') + idna.encode(name)
   23:             return idna.encode(name)
               except idna.core.IDNAError:
                   return None
       
           # Don't send IPv6 addresses through the IDNA encoder.
   23:     if ':' in name:
               return name
       
   23:     name = idna_encode(name)
   23:     if name is None:
               return None
   23:     elif sys.version_info >= (3, 0):
   23:         name = name.decode('utf-8')
   23:     return name
       
       
    1: def get_subj_alt_name(peer_cert):
           """
           Given an PyOpenSSL certificate, provides all the subject alternative names.
           """
           # Pass the cert to cryptography, which has much better APIs for this.
    1:     if hasattr(peer_cert, "to_cryptography"):
    1:         cert = peer_cert.to_cryptography()
           else:
               # This is technically using private APIs, but should work across all
               # relevant versions before PyOpenSSL got a proper API for this.
               cert = _Certificate(openssl_backend, peer_cert._x509)
       
           # We want to find the SAN extension. Ask Cryptography to locate it (it's
           # faster than looping in Python)
    1:     try:
    1:         ext = cert.extensions.get_extension_for_class(
    1:             x509.SubjectAlternativeName
               ).value
           except x509.ExtensionNotFound:
               # No such extension, return the empty list.
               return []
           except (x509.DuplicateExtension, UnsupportedExtension,
                   x509.UnsupportedGeneralNameType, UnicodeError) as e:
               # A problem has been found with the quality of the certificate. Assume
               # no SAN field is present.
               log.warning(
                   "A problem was encountered with the certificate that prevented "
                   "urllib3 from finding the SubjectAlternativeName field. This can "
                   "affect certificate validation. The error was %s",
                   e,
               )
               return []
       
           # We want to return dNSName and iPAddress fields. We need to cast the IPs
           # back to strings because the match_hostname function wants them as
           # strings.
           # Sadly the DNS names need to be idna encoded and then, on Python 3, UTF-8
           # decoded. This is pretty frustrating, but that's what the standard library
           # does with certificates, and so we need to attempt to do the same.
           # We also want to skip over names which cannot be idna encoded.
           names = [
   25:         ('DNS', name) for name in map(_dnsname_to_stdlib, ext.get_values_for_type(x509.DNSName))
   23:         if name is not None
           ]
    1:     names.extend(
    2:         ('IP Address', str(name))
    1:         for name in ext.get_values_for_type(x509.IPAddress)
           )
       
    1:     return names
       
       
    2: class WrappedSocket(object):
           '''API-compatibility wrapper for Python OpenSSL's Connection-class.
       
           Note: _makefile_refs, _drop() and _reuse() are needed for the garbage
           collector of pypy.
    1:     '''
       
    1:     def __init__(self, connection, socket, suppress_ragged_eofs=True):
    1:         self.connection = connection
    1:         self.socket = socket
    1:         self.suppress_ragged_eofs = suppress_ragged_eofs
    1:         self._makefile_refs = 0
    1:         self._closed = False
       
    1:     def fileno(self):
               return self.socket.fileno()
       
           # Copy-pasted from Python 3.5 source code
    1:     def _decref_socketios(self):
    1:         if self._makefile_refs > 0:
    1:             self._makefile_refs -= 1
    1:         if self._closed:
                   self.close()
       
    1:     def recv(self, *args, **kwargs):
               try:
                   data = self.connection.recv(*args, **kwargs)
               except OpenSSL.SSL.SysCallError as e:
                   if self.suppress_ragged_eofs and e.args == (-1, 'Unexpected EOF'):
                       return b''
                   else:
                       raise SocketError(str(e))
               except OpenSSL.SSL.ZeroReturnError:
                   if self.connection.get_shutdown() == OpenSSL.SSL.RECEIVED_SHUTDOWN:
                       return b''
                   else:
                       raise
               except OpenSSL.SSL.WantReadError:
                   if not util.wait_for_read(self.socket, self.socket.gettimeout()):
                       raise timeout('The read operation timed out')
                   else:
                       return self.recv(*args, **kwargs)
       
               # TLS 1.3 post-handshake authentication
               except OpenSSL.SSL.Error as e:
                   raise ssl.SSLError("read error: %r" % e)
               else:
                   return data
       
    1:     def recv_into(self, *args, **kwargs):
    3:         try:
    3:             return self.connection.recv_into(*args, **kwargs)
    1:         except OpenSSL.SSL.SysCallError as e:
                   if self.suppress_ragged_eofs and e.args == (-1, 'Unexpected EOF'):
                       return 0
                   else:
                       raise SocketError(str(e))
    1:         except OpenSSL.SSL.ZeroReturnError:
                   if self.connection.get_shutdown() == OpenSSL.SSL.RECEIVED_SHUTDOWN:
                       return 0
                   else:
                       raise
    1:         except OpenSSL.SSL.WantReadError:
    1:             if not util.wait_for_read(self.socket, self.socket.gettimeout()):
                       raise timeout('The read operation timed out')
                   else:
    1:                 return self.recv_into(*args, **kwargs)
       
               # TLS 1.3 post-handshake authentication
               except OpenSSL.SSL.Error as e:
                   raise ssl.SSLError("read error: %r" % e)
       
    1:     def settimeout(self, timeout):
    1:         return self.socket.settimeout(timeout)
       
    1:     def _send_until_done(self, data):
    1:         while True:
    1:             try:
    1:                 return self.connection.send(data)
                   except OpenSSL.SSL.WantWriteError:
                       if not util.wait_for_write(self.socket, self.socket.gettimeout()):
                           raise timeout()
                       continue
                   except OpenSSL.SSL.SysCallError as e:
                       raise SocketError(str(e))
       
    1:     def sendall(self, data):
    1:         total_sent = 0
    2:         while total_sent < len(data):
    1:             sent = self._send_until_done(data[total_sent:total_sent + SSL_WRITE_BLOCKSIZE])
    1:             total_sent += sent
       
    1:     def shutdown(self):
               # FIXME rethrow compatible exceptions should we ever use this
               self.connection.shutdown()
       
    1:     def close(self):
               if self._makefile_refs < 1:
                   try:
                       self._closed = True
                       return self.connection.close()
                   except OpenSSL.SSL.Error:
                       return
               else:
                   self._makefile_refs -= 1
       
    1:     def getpeercert(self, binary_form=False):
    1:         x509 = self.connection.get_peer_certificate()
       
    1:         if not x509:
                   return x509
       
    1:         if binary_form:
                   return OpenSSL.crypto.dump_certificate(
                       OpenSSL.crypto.FILETYPE_ASN1,
                       x509)
       
               return {
                   'subject': (
    1:                 (('commonName', x509.get_subject().CN),),
                   ),
    1:             'subjectAltName': get_subj_alt_name(x509)
               }
       
    1:     def version(self):
               return self.connection.get_protocol_version_name()
       
    1:     def _reuse(self):
               self._makefile_refs += 1
       
    1:     def _drop(self):
               if self._makefile_refs < 1:
                   self.close()
               else:
                   self._makefile_refs -= 1
       
       
    1: if _fileobject:  # Platform-specific: Python 2
           def makefile(self, mode, bufsize=-1):
               self._makefile_refs += 1
               return _fileobject(self, mode, bufsize, close=True)
       else:  # Platform-specific: Python 3
    1:     makefile = backport_makefile
       
    1: WrappedSocket.makefile = makefile
       
       
    2: class PyOpenSSLContext(object):
           """
           I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible
           for translating the interface of the standard library ``SSLContext`` object
           to calls into PyOpenSSL.
    1:     """
    1:     def __init__(self, protocol):
    1:         self.protocol = _openssl_versions[protocol]
    1:         self._ctx = OpenSSL.SSL.Context(self.protocol)
    1:         self._options = 0
    1:         self.check_hostname = False
       
    1:     @property
           def options(self):
    1:         return self._options
       
    1:     @options.setter
           def options(self, value):
    1:         self._options = value
    1:         self._ctx.set_options(value)
       
    1:     @property
           def verify_mode(self):
    2:         return _openssl_to_stdlib_verify[self._ctx.get_verify_mode()]
       
    1:     @verify_mode.setter
           def verify_mode(self, value):
    2:         self._ctx.set_verify(
    2:             _stdlib_to_openssl_verify[value],
    2:             _verify_callback
               )
       
    1:     def set_default_verify_paths(self):
               self._ctx.set_default_verify_paths()
       
    1:     def set_ciphers(self, ciphers):
    1:         if isinstance(ciphers, six.text_type):
    1:             ciphers = ciphers.encode('utf-8')
    1:         self._ctx.set_cipher_list(ciphers)
       
    1:     def load_verify_locations(self, cafile=None, capath=None, cadata=None):
    1:         if cafile is not None:
    1:             cafile = cafile.encode('utf-8')
    1:         if capath is not None:
                   capath = capath.encode('utf-8')
    1:         self._ctx.load_verify_locations(cafile, capath)
    1:         if cadata is not None:
                   self._ctx.load_verify_locations(BytesIO(cadata))
       
    1:     def load_cert_chain(self, certfile, keyfile=None, password=None):
               self._ctx.use_certificate_chain_file(certfile)
               if password is not None:
                   if not isinstance(password, six.binary_type):
                       password = password.encode('utf-8')
                   self._ctx.set_passwd_cb(lambda *_: password)
               self._ctx.use_privatekey_file(keyfile or certfile)
       
           def wrap_socket(self, sock, server_side=False,
                           do_handshake_on_connect=True, suppress_ragged_eofs=True,
    1:                     server_hostname=None):
    1:         cnx = OpenSSL.SSL.Connection(self._ctx, sock)
       
    1:         if isinstance(server_hostname, six.text_type):  # Platform-specific: Python 3
    1:             server_hostname = server_hostname.encode('utf-8')
       
    1:         if server_hostname is not None:
    1:             cnx.set_tlsext_host_name(server_hostname)
       
    1:         cnx.set_connect_state()
       
    1:         while True:
    3:             try:
    3:                 cnx.do_handshake()
    2:             except OpenSSL.SSL.WantReadError:
    2:                 if not util.wait_for_read(sock, sock.gettimeout()):
                           raise timeout('select timed out')
    2:                 continue
                   except OpenSSL.SSL.Error as e:
                       raise ssl.SSLError('bad handshake: %r' % e)
    1:             break
       
    1:         return WrappedSocket(cnx, sock)
       
       
    1: def _verify_callback(cnx, x509, err_no, err_depth, return_code):
    3:     return err_no == 0
