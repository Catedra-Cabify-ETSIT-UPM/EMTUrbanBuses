       """Proxy for coordinates stored outside Shapely geometries
    1: """
       
    1: from shapely.geometry.base import EMPTY
    1: from shapely.geos import lgeos
       
       
    2: class CachingGeometryProxy(object):
       
    1:     context = None
    1:     factory = None
    1:     __geom__ = EMPTY
    1:     _gtag = None
       
    1:     def __init__(self, context):
               self.context = context
       
    1:     @property
           def _is_empty(self):
               return self.__geom__ in [EMPTY, None]
       
    1:     def empty(self, val=EMPTY):
               if not self._is_empty and self.__geom__:
                   lgeos.GEOSGeom_destroy(self.__geom__)
               self.__geom__ = val
       
    1:     @property
           def _geom(self):
               """Keeps the GEOS geometry in synch with the context."""
               gtag = self.gtag()
               if gtag != self._gtag or self._is_empty:
                   self.empty()
                   if len(self.context) > 0:
                       self.__geom__, n = self.factory(self.context)
               self._gtag = gtag
               return self.__geom__
               
    1:     def gtag(self):
               return hash(repr(self.context))
       
       
    2: class PolygonProxy(CachingGeometryProxy):
       
    1:     @property
           def _geom(self):
               """Keeps the GEOS geometry in synch with the context."""
               gtag = self.gtag()
               if gtag != self._gtag or self._is_empty:
                   self.empty()
                   self.__geom__, n = self.factory(self.context[0], self.context[1])
               self._gtag = gtag
               return self.__geom__
