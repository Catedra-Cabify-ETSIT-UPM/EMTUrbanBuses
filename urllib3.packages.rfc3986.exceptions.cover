       # -*- coding: utf-8 -*-
    1: """Exceptions module for rfc3986."""
       
    1: from . import compat
       
       
    2: class RFC3986Exception(Exception):
    1:     """Base class for all rfc3986 exception classes."""
       
    1:     pass
       
       
    2: class InvalidAuthority(RFC3986Exception):
    1:     """Exception when the authority string is invalid."""
       
    1:     def __init__(self, authority):
               """Initialize the exception with the invalid authority."""
               super(InvalidAuthority, self).__init__(
                   u"The authority ({0}) is not valid.".format(
                       compat.to_str(authority)))
       
       
    2: class InvalidPort(RFC3986Exception):
    1:     """Exception when the port is invalid."""
       
    1:     def __init__(self, port):
               """Initialize the exception with the invalid port."""
               super(InvalidPort, self).__init__(
                   'The port ("{0}") is not valid.'.format(port))
       
       
    2: class ResolutionError(RFC3986Exception):
    1:     """Exception to indicate a failure to resolve a URI."""
       
    1:     def __init__(self, uri):
               """Initialize the error with the failed URI."""
               super(ResolutionError, self).__init__(
                   "{0} is not an absolute URI.".format(uri.unsplit()))
       
       
    2: class ValidationError(RFC3986Exception):
    1:     """Exception raised during Validation of a URI."""
       
    1:     pass
       
       
    2: class MissingComponentError(ValidationError):
    1:     """Exception raised when a required component is missing."""
       
    1:     def __init__(self, uri, *component_names):
               """Initialize the error with the missing component name."""
               verb = 'was'
               if len(component_names) > 1:
                   verb = 'were'
       
               self.uri = uri
               self.components = sorted(component_names)
               components = ', '.join(self.components)
               super(MissingComponentError, self).__init__(
                   "{} {} required but missing".format(components, verb),
                   uri,
                   self.components,
               )
       
       
    2: class UnpermittedComponentError(ValidationError):
    1:     """Exception raised when a component has an unpermitted value."""
       
    1:     def __init__(self, component_name, component_value, allowed_values):
               """Initialize the error with the unpermitted component."""
               super(UnpermittedComponentError, self).__init__(
                   "{} was required to be one of {!r} but was {!r}".format(
                       component_name, list(sorted(allowed_values)), component_value,
                   ),
                   component_name,
                   component_value,
                   allowed_values,
               )
               self.component_name = component_name
               self.component_value = component_value
               self.allowed_values = allowed_values
       
       
    2: class PasswordForbidden(ValidationError):
    1:     """Exception raised when a URL has a password in the userinfo section."""
       
    1:     def __init__(self, uri):
               """Initialize the error with the URI that failed validation."""
               unsplit = getattr(uri, 'unsplit', lambda: uri)
               super(PasswordForbidden, self).__init__(
                   '"{}" contained a password when validation forbade it'.format(
                       unsplit()
                   )
               )
               self.uri = uri
       
       
    2: class InvalidComponentsError(ValidationError):
    1:     """Exception raised when one or more components are invalid."""
       
    1:     def __init__(self, uri, *component_names):
               """Initialize the error with the invalid component name(s)."""
               verb = 'was'
               if len(component_names) > 1:
                   verb = 'were'
       
               self.uri = uri
               self.components = sorted(component_names)
               components = ', '.join(self.components)
               super(InvalidComponentsError, self).__init__(
                   "{} {} found to be invalid".format(components, verb),
                   uri,
                   self.components,
               )
       
       
    2: class MissingDependencyError(RFC3986Exception):
    1:     """Exception raised when an IRI is encoded without the 'idna' module."""
