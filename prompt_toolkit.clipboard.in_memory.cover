    1: from __future__ import unicode_literals
    1: from .base import Clipboard, ClipboardData
    1: from collections import deque
       
       __all__ = [
    1:     'InMemoryClipboard',
       ]
       
       
    2: class InMemoryClipboard(Clipboard):
           """
           Default clipboard implementation.
           Just keep the data in memory.
       
           This implements a kill-ring, for Emacs mode.
    1:     """
    1:     def __init__(self, data=None, max_size=60):
               assert data is None or isinstance(data, ClipboardData)
               assert max_size >= 1
       
               self.max_size = max_size
               self._ring = deque()
               if data is not None:
                   self.set_data(data)
       
    1:     def set_data(self, data):
               assert isinstance(data, ClipboardData)
               self._ring.appendleft(data)
       
               while len(self._ring) > self.max_size:
                   self._ring.pop()
       
    1:     def get_data(self):
               if self._ring:
                   return self._ring[0]
               else:
                   return ClipboardData()
       
    1:     def rotate(self):
               if self._ring:
                   # Add the very first item at the end.
                   self._ring.append(self._ring.popleft())
