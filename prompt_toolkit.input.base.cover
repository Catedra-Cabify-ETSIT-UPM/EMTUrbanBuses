       """
       Abstraction of CLI Input.
    1: """
    1: from __future__ import unicode_literals
       
    1: from abc import ABCMeta, abstractmethod, abstractproperty
    1: from contextlib import contextmanager
    1: from six import with_metaclass
       
       __all__ = [
    1:     'Input',
    1:     'DummyInput',
       ]
       
       
    2: class Input(with_metaclass(ABCMeta, object)):
           """
           Abstraction for any input.
       
           An instance of this class can be given to the constructor of a
           :class:`~prompt_toolkit.application.Application` and will also be
           passed to the :class:`~prompt_toolkit.eventloop.base.EventLoop`.
    1:     """
    1:     @abstractmethod
           def fileno(self):
               """
               Fileno for putting this in an event loop.
               """
       
    1:     @abstractmethod
           def typeahead_hash(self):
               """
               Identifier for storing type ahead key presses.
               """
       
    1:     @abstractmethod
           def read_keys(self):
               """
               Return a list of Key objects which are read/parsed from the input.
               """
       
    1:     def flush_keys(self):
               """
               Flush the underlying parser. and return the pending keys.
               (Used for vt100 input.)
               """
               return []
       
    1:     def flush(self):
               " The event loop can call this when the input has to be flushed. "
               pass
       
    1:     @property
           def responds_to_cpr(self):
               """
               `True` if the `Application` can expect to receive a CPR response from
               here.
               """
               return False
       
    1:     @abstractproperty
           def closed(self):
               " Should be true when the input stream is closed. "
               return False
       
    1:     @abstractmethod
           def raw_mode(self):
               """
               Context manager that turns the input into raw mode.
               """
       
    1:     @abstractmethod
           def cooked_mode(self):
               """
               Context manager that turns the input into cooked mode.
               """
       
    1:     @abstractmethod
           def attach(self, input_ready_callback):
               """
               Return a context manager that makes this input active in the current
               event loop.
               """
       
    1:     @abstractmethod
           def detach(self):
               """
               Return a context manager that makes sure that this input is not active
               in the current event loop.
               """
       
    1:     def close(self):
               " Close input. "
               pass
       
       
    2: class DummyInput(Input):
           """
           Input for use in a `DummyApplication`
    1:     """
    1:     def fileno(self):
               raise NotImplementedError
       
    1:     def typeahead_hash(self):
               return 'dummy-%s' % id(self)
       
    1:     def read_keys(self):
               return []
       
    1:     @property
           def closed(self):
               return True
       
    1:     def raw_mode(self):
               return _dummy_context_manager()
       
    1:     def cooked_mode(self):
               return _dummy_context_manager()
       
    1:     def attach(self, input_ready_callback):
               return _dummy_context_manager()
       
    1:     def detach(self):
               return _dummy_context_manager()
       
       
    1: @contextmanager
       def _dummy_context_manager():
           yield
