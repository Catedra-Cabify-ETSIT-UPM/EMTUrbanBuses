    1: from __future__ import unicode_literals
    1: from collections import deque
    1: from functools import wraps
       
       __all__ = [
    1:     'SimpleCache',
    1:     'FastDictCache',
    1:     'memoized',
       ]
       
       
    2: class SimpleCache(object):
           """
           Very simple cache that discards the oldest item when the cache size is
           exceeded.
       
           :param maxsize: Maximum size of the cache. (Don't make it too big.)
    1:     """
    1:     def __init__(self, maxsize=8):
    6:         assert isinstance(maxsize, int) and maxsize > 0
       
    6:         self._data = {}
    6:         self._keys = deque()
    6:         self.maxsize = maxsize
       
    1:     def get(self, key, getter_func):
               """
               Get object from the cache.
               If not found, call `getter_func` to resolve it, and put that on the top
               of the cache instead.
               """
               # Look in cache first.
               try:
                   return self._data[key]
               except KeyError:
                   # Not found? Get it.
                   value = getter_func()
                   self._data[key] = value
                   self._keys.append(key)
       
                   # Remove the oldest key when the size is exceeded.
                   if len(self._data) > self.maxsize:
                       key_to_remove = self._keys.popleft()
                       if key_to_remove in self._data:
                           del self._data[key_to_remove]
       
                   return value
       
    1:     def clear(self):
               " Clear cache. "
               self._data = {}
               self._keys = deque()
       
       
    2: class FastDictCache(dict):
           """
           Fast, lightweight cache which keeps at most `size` items.
           It will discard the oldest items in the cache first.
       
           The cache is a dictionary, which doesn't keep track of access counts.
           It is perfect to cache little immutable objects which are not expensive to
           create, but where a dictionary lookup is still much faster than an object
           instantiation.
       
           :param get_value: Callable that's called in case of a missing key.
    1:     """
           # NOTE: This cache is used to cache `prompt_toolkit.layout.screen.Char` and
           #       `prompt_toolkit.Document`. Make sure to keep this really lightweight.
           #       Accessing the cache should stay faster than instantiating new
           #       objects.
           #       (Dictionary lookups are really fast.)
           #       SimpleCache is still required for cases where the cache key is not
           #       the same as the arguments given to the function that creates the
           #       value.)
    1:     def __init__(self, get_value=None, size=1000000):
    1:         assert callable(get_value)
    1:         assert isinstance(size, int) and size > 0
       
    1:         self._keys = deque()
    1:         self.get_value = get_value
    1:         self.size = size
       
    1:     def __missing__(self, key):
               # Remove the oldest key when the size is exceeded.
               if len(self) > self.size:
                   key_to_remove = self._keys.popleft()
                   if key_to_remove in self:
                       del self[key_to_remove]
       
               result = self.get_value(*key)
               self[key] = result
               self._keys.append(key)
               return result
       
       
    1: def memoized(maxsize=1024):
           """
           Memoization decorator for immutable classes and pure functions.
           """
    6:     def decorator(obj):
    6:         cache = SimpleCache(maxsize=maxsize)
       
    6:         @wraps(obj)
               def new_callable(*a, **kw):
                   def create_new():
                       return obj(*a, **kw)
       
                   key = (a, tuple(sorted(kw.items())))
                   return cache.get(key, create_new)
    6:         return new_callable
    6:     return decorator
