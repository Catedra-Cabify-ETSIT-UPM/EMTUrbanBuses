    1: """Mixin classes for custom array types that don't inherit from ndarray."""
    1: from __future__ import division, absolute_import, print_function
       
    1: import sys
       
    1: from numpy.core import umath as um
       
       # Nothing should be exposed in the top-level NumPy module.
    1: __all__ = []
       
       
    1: def _disables_array_ufunc(obj):
           """True when __array_ufunc__ is set to None."""
           try:
               return obj.__array_ufunc__ is None
           except AttributeError:
               return False
       
       
    1: def _binary_method(ufunc, name):
           """Implement a forward binary method with a ufunc, e.g., __add__."""
   20:     def func(self, other):
               if _disables_array_ufunc(other):
                   return NotImplemented
               return ufunc(self, other)
   20:     func.__name__ = '__{}__'.format(name)
   20:     return func
       
       
    1: def _reflected_binary_method(ufunc, name):
           """Implement a reflected binary method with a ufunc, e.g., __radd__."""
   14:     def func(self, other):
               if _disables_array_ufunc(other):
                   return NotImplemented
               return ufunc(other, self)
   14:     func.__name__ = '__r{}__'.format(name)
   14:     return func
       
       
    1: def _inplace_binary_method(ufunc, name):
           """Implement an in-place binary method with a ufunc, e.g., __iadd__."""
   13:     def func(self, other):
               return ufunc(self, other, out=(self,))
   13:     func.__name__ = '__i{}__'.format(name)
   13:     return func
       
       
    1: def _numeric_methods(ufunc, name):
           """Implement forward, reflected and inplace binary methods with a ufunc."""
   13:     return (_binary_method(ufunc, name),
   13:             _reflected_binary_method(ufunc, name),
   13:             _inplace_binary_method(ufunc, name))
       
       
    1: def _unary_method(ufunc, name):
           """Implement a unary special method with a ufunc."""
    4:     def func(self):
               return ufunc(self)
    4:     func.__name__ = '__{}__'.format(name)
    4:     return func
       
       
    2: class NDArrayOperatorsMixin(object):
           """Mixin defining all operator special methods using __array_ufunc__.
       
           This class implements the special methods for almost all of Python's
           builtin operators defined in the `operator` module, including comparisons
           (``==``, ``>``, etc.) and arithmetic (``+``, ``*``, ``-``, etc.), by
           deferring to the ``__array_ufunc__`` method, which subclasses must
           implement.
       
           It is useful for writing classes that do not inherit from `numpy.ndarray`,
           but that should support arithmetic and numpy universal functions like
           arrays as described in `A Mechanism for Overriding Ufuncs
           <../../neps/nep-0013-ufunc-overrides.html>`_.
       
           As an trivial example, consider this implementation of an ``ArrayLike``
           class that simply wraps a NumPy array and ensures that the result of any
           arithmetic operation is also an ``ArrayLike`` object::
       
               class ArrayLike(np.lib.mixins.NDArrayOperatorsMixin):
                   def __init__(self, value):
                       self.value = np.asarray(value)
       
                   # One might also consider adding the built-in list type to this
                   # list, to support operations like np.add(array_like, list)
                   _HANDLED_TYPES = (np.ndarray, numbers.Number)
       
                   def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):
                       out = kwargs.get('out', ())
                       for x in inputs + out:
                           # Only support operations with instances of _HANDLED_TYPES.
                           # Use ArrayLike instead of type(self) for isinstance to
                           # allow subclasses that don't override __array_ufunc__ to
                           # handle ArrayLike objects.
                           if not isinstance(x, self._HANDLED_TYPES + (ArrayLike,)):
                               return NotImplemented
       
                       # Defer to the implementation of the ufunc on unwrapped values.
                       inputs = tuple(x.value if isinstance(x, ArrayLike) else x
                                      for x in inputs)
                       if out:
                           kwargs['out'] = tuple(
                               x.value if isinstance(x, ArrayLike) else x
                               for x in out)
                       result = getattr(ufunc, method)(*inputs, **kwargs)
       
                       if type(result) is tuple:
                           # multiple return values
                           return tuple(type(self)(x) for x in result)
                       elif method == 'at':
                           # no return value
                           return None
                       else:
                           # one return value
                           return type(self)(result)
       
                   def __repr__(self):
                       return '%s(%r)' % (type(self).__name__, self.value)
       
           In interactions between ``ArrayLike`` objects and numbers or numpy arrays,
           the result is always another ``ArrayLike``:
       
               >>> x = ArrayLike([1, 2, 3])
               >>> x - 1
               ArrayLike(array([0, 1, 2]))
               >>> 1 - x
               ArrayLike(array([ 0, -1, -2]))
               >>> np.arange(3) - x
               ArrayLike(array([-1, -1, -1]))
               >>> x - np.arange(3)
               ArrayLike(array([1, 1, 1]))
       
           Note that unlike ``numpy.ndarray``, ``ArrayLike`` does not allow operations
           with arbitrary, unrecognized types. This ensures that interactions with
           ArrayLike preserve a well-defined casting hierarchy.
       
           .. versionadded:: 1.13
    1:     """
           # Like np.ndarray, this mixin class implements "Option 1" from the ufunc
           # overrides NEP.
       
           # comparisons don't have reflected and in-place versions
    1:     __lt__ = _binary_method(um.less, 'lt')
    1:     __le__ = _binary_method(um.less_equal, 'le')
    1:     __eq__ = _binary_method(um.equal, 'eq')
    1:     __ne__ = _binary_method(um.not_equal, 'ne')
    1:     __gt__ = _binary_method(um.greater, 'gt')
    1:     __ge__ = _binary_method(um.greater_equal, 'ge')
       
           # numeric methods
    1:     __add__, __radd__, __iadd__ = _numeric_methods(um.add, 'add')
    1:     __sub__, __rsub__, __isub__ = _numeric_methods(um.subtract, 'sub')
    1:     __mul__, __rmul__, __imul__ = _numeric_methods(um.multiply, 'mul')
    1:     __matmul__, __rmatmul__, __imatmul__ = _numeric_methods(
    1:         um.matmul, 'matmul')
    1:     if sys.version_info.major < 3:
               # Python 3 uses only __truediv__ and __floordiv__
               __div__, __rdiv__, __idiv__ = _numeric_methods(um.divide, 'div')
    1:     __truediv__, __rtruediv__, __itruediv__ = _numeric_methods(
    1:         um.true_divide, 'truediv')
    1:     __floordiv__, __rfloordiv__, __ifloordiv__ = _numeric_methods(
    1:         um.floor_divide, 'floordiv')
    1:     __mod__, __rmod__, __imod__ = _numeric_methods(um.remainder, 'mod')
    1:     __divmod__ = _binary_method(um.divmod, 'divmod')
    1:     __rdivmod__ = _reflected_binary_method(um.divmod, 'divmod')
           # __idivmod__ does not exist
           # TODO: handle the optional third argument for __pow__?
    1:     __pow__, __rpow__, __ipow__ = _numeric_methods(um.power, 'pow')
    1:     __lshift__, __rlshift__, __ilshift__ = _numeric_methods(
    1:         um.left_shift, 'lshift')
    1:     __rshift__, __rrshift__, __irshift__ = _numeric_methods(
    1:         um.right_shift, 'rshift')
    1:     __and__, __rand__, __iand__ = _numeric_methods(um.bitwise_and, 'and')
    1:     __xor__, __rxor__, __ixor__ = _numeric_methods(um.bitwise_xor, 'xor')
    1:     __or__, __ror__, __ior__ = _numeric_methods(um.bitwise_or, 'or')
       
           # unary methods
    1:     __neg__ = _unary_method(um.negative, 'neg')
    1:     __pos__ = _unary_method(um.positive, 'pos')
    1:     __abs__ = _unary_method(um.absolute, 'abs')
    1:     __invert__ = _unary_method(um.invert, 'invert')
